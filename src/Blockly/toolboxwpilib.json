{
  "kind": "categoryToolbox",
  "contents": [
    {
      "kind": "category",
      "name": "wpilib",
      "contents": [
        {
          "kind": "block",
          "type": "module_function_call",
          "fields": {
            "MODULE": "wpilib",
            "FUNC": "getCurrentThreadPriority"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the thread priority for the current thread.\n:param isRealTime: Set to true if thread is real-time, otherwise false.\n:returns: The current thread priority. For real-time, this is 1-99\nwith 99 being highest. For non-real-time, this is 0. See\n\"man 7 sched\" for details.",
          "output": "tuple[int, bool]"
        },
        {
          "kind": "block",
          "type": "module_function_call",
          "fields": {
            "MODULE": "wpilib",
            "FUNC": "getDeployDirectory"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Obtains the deploy directory of the program, which is the remote location\nthe deploy directory is deployed to by default. On the roboRIO, this is\n/home/lvuser/py/deploy. In simulation, it is where the simulation was launched\nfrom, in the subdirectory \"deploy\" (`dirname(robot.py)`/deploy).\n:returns: The result of the operating directory lookup",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "module_function_call",
          "fields": {
            "MODULE": "wpilib",
            "FUNC": "getErrorMessage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets error message string for an error code.",
          "output": "tuple[str, int]"
        },
        {
          "kind": "block",
          "type": "module_function_call",
          "fields": {
            "MODULE": "wpilib",
            "FUNC": "getOperatingDirectory"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Obtains the operating directory of the program. On the roboRIO, this\nis /home/lvuser/py. In simulation, it is the location of robot.py\n:returns: The result of the operating directory lookup.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "module_function_call",
          "fields": {
            "MODULE": "wpilib",
            "FUNC": "getTime"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gives real-time clock system time with nanosecond resolution\n:returns: The time, just in case you want the robot to start autonomous at 8pm\non Saturday.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "module_function_call",
          "fields": {
            "MODULE": "wpilib",
            "FUNC": "setCurrentThreadPriority"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Sets the thread priority for the current thread.\n:param realTime: Set to true to set a real-time priority, false for standard\npriority.\n:param priority: Priority to set the thread to. For real-time, this is 1-99\nwith 99 being highest. For non-real-time, this is forced to\n0. See \"man 7 sched\" for more details.\n:returns: True on success.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "module_function_call",
          "fields": {
            "MODULE": "wpilib",
            "FUNC": "wait"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Pause the task for a specified time.\nPause the execution of the program for a specified period of time given in\nseconds. Motors will continue to run at their last assigned values, and\nsensors will continue to update. Only the task containing the wait will pause\nuntil the wait time is expired.\n:param seconds: Length of time to pause, in seconds.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.AnalogTriggerType",
            "ENUM_VALUE": "kFallingPulse"
          },
          "output": "wpilib.AnalogTriggerType",
          "colour": 180,
          "tooltip": "Defines the state in which the AnalogTrigger triggers.\n\nMembers:\n\n  kInWindow : In window.\n\n  kState : State.\n\n  kRisingPulse : Rising Pulse.\n\n  kFallingPulse : Falling pulse."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.AnalogTriggerType",
            "ENUM_VALUE": "kInWindow"
          },
          "output": "wpilib.AnalogTriggerType",
          "colour": 180,
          "tooltip": "Defines the state in which the AnalogTrigger triggers.\n\nMembers:\n\n  kInWindow : In window.\n\n  kState : State.\n\n  kRisingPulse : Rising Pulse.\n\n  kFallingPulse : Falling pulse."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.AnalogTriggerType",
            "ENUM_VALUE": "kRisingPulse"
          },
          "output": "wpilib.AnalogTriggerType",
          "colour": 180,
          "tooltip": "Defines the state in which the AnalogTrigger triggers.\n\nMembers:\n\n  kInWindow : In window.\n\n  kState : State.\n\n  kRisingPulse : Rising Pulse.\n\n  kFallingPulse : Falling pulse."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.AnalogTriggerType",
            "ENUM_VALUE": "kState"
          },
          "output": "wpilib.AnalogTriggerType",
          "colour": 180,
          "tooltip": "Defines the state in which the AnalogTrigger triggers.\n\nMembers:\n\n  kInWindow : In window.\n\n  kState : State.\n\n  kRisingPulse : Rising Pulse.\n\n  kFallingPulse : Falling pulse."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.CompressorConfigType",
            "ENUM_VALUE": "Analog"
          },
          "output": "wpilib.CompressorConfigType",
          "colour": 180,
          "tooltip": "Compressor config type.\n\nMembers:\n\n  Disabled : Disabled.\n\n  Digital : Digital.\n\n  Analog : Analog.\n\n  Hybrid : Hybrid."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.CompressorConfigType",
            "ENUM_VALUE": "Digital"
          },
          "output": "wpilib.CompressorConfigType",
          "colour": 180,
          "tooltip": "Compressor config type.\n\nMembers:\n\n  Disabled : Disabled.\n\n  Digital : Digital.\n\n  Analog : Analog.\n\n  Hybrid : Hybrid."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.CompressorConfigType",
            "ENUM_VALUE": "Disabled"
          },
          "output": "wpilib.CompressorConfigType",
          "colour": 180,
          "tooltip": "Compressor config type.\n\nMembers:\n\n  Disabled : Disabled.\n\n  Digital : Digital.\n\n  Analog : Analog.\n\n  Hybrid : Hybrid."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.CompressorConfigType",
            "ENUM_VALUE": "Hybrid"
          },
          "output": "wpilib.CompressorConfigType",
          "colour": 180,
          "tooltip": "Compressor config type.\n\nMembers:\n\n  Disabled : Disabled.\n\n  Digital : Digital.\n\n  Analog : Analog.\n\n  Hybrid : Hybrid."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.PneumaticsModuleType",
            "ENUM_VALUE": "CTREPCM"
          },
          "output": "wpilib.PneumaticsModuleType",
          "colour": 180,
          "tooltip": "Pneumatics module type.\n\nMembers:\n\n  CTREPCM : CTRE PCM.\n\n  REVPH : REV PH."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.PneumaticsModuleType",
            "ENUM_VALUE": "REVPH"
          },
          "output": "wpilib.PneumaticsModuleType",
          "colour": 180,
          "tooltip": "Pneumatics module type.\n\nMembers:\n\n  CTREPCM : CTRE PCM.\n\n  REVPH : REV PH."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.RadioLEDState",
            "ENUM_VALUE": "kGreen"
          },
          "output": "wpilib.RadioLEDState",
          "colour": 180,
          "tooltip": "Members:\n\n  kOff\n\n  kGreen\n\n  kRed\n\n  kOrange"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.RadioLEDState",
            "ENUM_VALUE": "kOff"
          },
          "output": "wpilib.RadioLEDState",
          "colour": 180,
          "tooltip": "Members:\n\n  kOff\n\n  kGreen\n\n  kRed\n\n  kOrange"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.RadioLEDState",
            "ENUM_VALUE": "kOrange"
          },
          "output": "wpilib.RadioLEDState",
          "colour": 180,
          "tooltip": "Members:\n\n  kOff\n\n  kGreen\n\n  kRed\n\n  kOrange"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.RadioLEDState",
            "ENUM_VALUE": "kRed"
          },
          "output": "wpilib.RadioLEDState",
          "colour": 180,
          "tooltip": "Members:\n\n  kOff\n\n  kGreen\n\n  kRed\n\n  kOrange"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.RuntimeType",
            "ENUM_VALUE": "kRoboRIO"
          },
          "output": "wpilib.RuntimeType",
          "colour": 180,
          "tooltip": "Runtime type.\n\nMembers:\n\n  kRoboRIO : roboRIO 1.0.\n\n  kRoboRIO2 : roboRIO 2.0.\n\n  kSimulation : Simulation runtime."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.RuntimeType",
            "ENUM_VALUE": "kRoboRIO2"
          },
          "output": "wpilib.RuntimeType",
          "colour": 180,
          "tooltip": "Runtime type.\n\nMembers:\n\n  kRoboRIO : roboRIO 1.0.\n\n  kRoboRIO2 : roboRIO 2.0.\n\n  kSimulation : Simulation runtime."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.RuntimeType",
            "ENUM_VALUE": "kSimulation"
          },
          "output": "wpilib.RuntimeType",
          "colour": 180,
          "tooltip": "Runtime type.\n\nMembers:\n\n  kRoboRIO : roboRIO 1.0.\n\n  kRoboRIO2 : roboRIO 2.0.\n\n  kSimulation : Simulation runtime."
        }
      ]
    },
    {
      "kind": "category",
      "name": "AnalogAccelerometer",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogAccelerometer",
            "FUNC": "getAcceleration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the acceleration in Gs.\nThe acceleration is returned units of Gs.\n:returns: The current acceleration of the sensor in Gs.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogAccelerometer",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogAccelerometer",
            "FUNC": "setSensitivity"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the accelerometer sensitivity.\nThis sets the sensitivity of the accelerometer used for calculating the\nacceleration. The sensitivity varies by accelerometer model. There are\nconstants defined for various models.\n:param sensitivity: The sensitivity of accelerometer in Volts per G.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogAccelerometer",
            "FUNC": "setZero"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the voltage that corresponds to 0 G.\nThe zero G voltage varies by accelerometer model. There are constants\ndefined for various models.\n:param zero: The zero G voltage.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "AnalogEncoder",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the encoder value since the last reset.\nThis is reported in rotations since the last reset.\n:returns: the encoder value in rotations",
          "output": "wpimath.units.turns"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "getAbsolutePosition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the absolute position of the analog encoder.\nGetAbsolutePosition() - GetPositionOffset() will give an encoder\nabsolute position relative to the last reset. This could potentially be\nnegative, which needs to be accounted for.\nThis will not account for rollovers, and will always be just the raw\nabsolute position.\n:returns: the absolute position",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel number.\n:returns: The channel number.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "getDistance"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the distance the sensor has driven since the last reset as scaled by\nthe value from SetDistancePerRotation.\n:returns: The distance driven since the last reset",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "getDistancePerRotation"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the distance per rotation for this encoder.\n:returns: The scale factor that will be used to convert rotation to useful\nunits.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "getPositionOffset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the offset of position relative to the last reset.\nGetAbsolutePosition() - GetPositionOffset() will give an encoder absolute\nposition relative to the last reset. This could potentially be negative,\nwhich needs to be accounted for.\n:returns: the position offset",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "reset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Reset the Encoder distance to zero.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "setDistancePerRotation"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the distance per rotation of the encoder. This sets the multiplier used\nto determine the distance driven based on the rotation value from the\nencoder. Set this value based on the how far the mechanism travels in 1\nrotation of the encoder, and factor in gearing reductions following the\nencoder shaft. This distance can be in any units you like, linear or\nangular.\n:param distancePerRotation: the distance per rotation of the encoder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogEncoder",
            "FUNC": "setPositionOffset"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the position offset.\nThis must be in the range of 0-1.\n:param offset: the offset",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "AnalogGyro",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "calibrate"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Calibrate the gyro by running for a number of samples and computing the\ncenter value. Then use the center value as the Accumulator center value for\nsubsequent measurements.\nIt's important to make sure that the robot is not moving while the\ncentering calculations are in progress, this is typically done when the\nrobot is first turned on while it's sitting at rest before the competition\nstarts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "getAnalogInput"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets the analog input for the gyro.\n:returns: AnalogInput",
          "output": "wpilib._wpilib.AnalogInput"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "getAngle"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the actual angle in degrees that the robot is currently facing.\nThe angle is based on the current accumulator value corrected by the\noversampling rate, the gyro type and the A/D calibration values. The angle\nis continuous, that is it will continue from 360->361 degrees. This allows\nalgorithms that wouldn't want to see a discontinuity in the gyro output as\nit sweeps from 360 to 0 on the second time around.\n:returns: The current heading of the robot in degrees. This heading is based\non integration of the returned rate from the gyro.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "getCenter"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the gyro center value. If run after calibration,\nthe center value can be used as a preset later.\n:returns: the current center value",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "getOffset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the gyro offset value. If run after calibration,\nthe offset value can be used as a preset later.\n:returns: the current offset value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "getRate"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the rate of rotation of the gyro\nThe rate is based on the most recent reading of the gyro analog value\n:returns: the current rate in degrees per second",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "getRotation2d"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the heading of the robot as a Rotation2d.\nThe angle is continuous, that is it will continue from 360 to 361 degrees.\nThis allows algorithms that wouldn't want to see a discontinuity in the\ngyro output as it sweeps past from 360 to 0 on the second time around.\nThe angle is expected to increase as the gyro turns counterclockwise when\nlooked at from the top. It needs to follow the NWU axis convention.\n:returns: the current heading of the robot as a Rotation2d. This heading is\nbased on integration of the returned rate from the gyro.",
          "output": "wpimath.geometry._geometry.Rotation2d"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "initGyro"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialize the gyro.\nCalibration is handled by Calibrate().",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "reset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Reset the gyro.\nResets the gyro to a heading of zero. This can be used if there is\nsignificant drift in the gyro and it needs to be recalibrated after it has\nbeen running.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "setDeadband"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the size of the neutral zone.\nAny voltage from the gyro less than this amount from the center is\nconsidered stationary.  Setting a deadband will decrease the amount of\ndrift when the gyro isn't rotating, but will make it less accurate.\n:param volts: The size of the deadband in volts",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "FUNC": "setSensitivity"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the gyro sensitivity.\nThis takes the number of volts/degree/second sensitivity of the gyro and\nuses it in subsequent calculations to allow the code to work with multiple\ngyros. This value is typically found in the gyro datasheet.\n:param voltsPerDegreePerSecond: The sensitivity in Volts/degree/second",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kAverageBits"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kOversampleBits"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kAverageBits"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kOversampleBits"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kCalibrationSampleTime"
          },
          "output": "float",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kDefaultVoltsPerDegreePerSecond"
          },
          "output": "float",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kSamplesPerSecond"
          },
          "output": "float",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kCalibrationSampleTime"
          },
          "inputs": {
            "VALUE": {
              "type": "float"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kDefaultVoltsPerDegreePerSecond"
          },
          "inputs": {
            "VALUE": {
              "type": "float"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.AnalogGyro",
            "VAR": "kSamplesPerSecond"
          },
          "inputs": {
            "VALUE": {
              "type": "float"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        }
      ]
    },
    {
      "kind": "category",
      "name": "AnalogInput",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "wpilib.AnalogInput"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.AnalogInput"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct an analog input.\n:param channel: The channel number on the roboRIO to represent. 0-3 are\non-board 4-7 are on the MXP port.",
          "output": "wpilib.AnalogInput"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getAccumulatorCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the number of accumulated values.\nRead the count of the accumulated values since the accumulator was last\nReset().\n:returns: The number of times samples from the channel were accumulated.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getAccumulatorOutput"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the accumulated value and the number of accumulated values atomically.\nThis function reads the value and count from the FPGA atomically.\nThis can be used for averaging.\n:param value: Reference to the 64-bit accumulated output.\n:param count: Reference to the number of accumulation cycles.",
          "output": "tuple[int, int]"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getAccumulatorValue"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the accumulated value.\nRead the value that has been accumulating.\nThe accumulator is attached after the oversample and average engine.\n:returns: The 64-bit value accumulated since the last Reset().",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getAverageBits"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of averaging bits previously configured.\nThis gets the number of averaging bits from the FPGA. The actual number of\naveraged samples is 2^bits. The averaging is done automatically in the\nFPGA.\n:returns: Number of bits of averaging previously configured.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getAverageValue"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get a sample from the output of the oversample and average engine for this\nchannel.\nThe sample is 12-bit + the bits configured in SetOversampleBits().\nThe value configured in SetAverageBits() will cause this value to be\naveraged 2**bits number of samples.\nThis is not a sliding window. The sample will not change until\n2**(OversampleBits + AverageBits) samples have been acquired from the\nmodule on this channel.\nUse GetAverageVoltage() to get the analog value in calibrated units.\n:returns: A sample from the oversample and average engine for this channel.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getAverageVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get a scaled sample from the output of the oversample and average engine\nfor this channel.\nThe value is scaled to units of Volts using the calibrated scaling data\nfrom GetLSBWeight() and GetOffset().\nUsing oversampling will cause this value to be higher resolution, but it\nwill update more slowly.\nUsing averaging will cause this value to be more stable, but it will update\nmore slowly.\n:returns: A scaled sample from the output of the oversample and average\nengine for this channel.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel number.\n:returns: The channel number.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getLSBWeight"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the factory scaling least significant bit weight constant.\nVolts = ((LSB_Weight * 1e-9) * raw) - (Offset * 1e-9)\n:returns: Least significant bit weight.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getOffset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the factory scaling offset constant.\nVolts = ((LSB_Weight * 1e-9) * raw) - (Offset * 1e-9)\n:returns: Offset constant.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getOversampleBits"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of oversample bits previously configured.\nThis gets the number of oversample bits from the FPGA. The actual number of\noversampled values is 2^bits. The oversampling is done automatically in the\nFPGA.\n:returns: Number of bits of oversampling previously configured.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getSampleRate"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current sample rate for all channels\n:returns: Sample rate.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getValue"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get a sample straight from this channel.\nThe sample is a 12-bit value representing the 0V to 5V range of the A/D\nconverter in the module.  The units are in A/D converter codes.  Use\nGetVoltage() to get the analog value in calibrated units.\n:returns: A sample straight from this channel.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "getVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get a scaled sample straight from this channel.\nThe value is scaled to units of Volts using the calibrated scaling data\nfrom GetLSBWeight() and GetOffset().\n:returns: A scaled sample straight from this channel.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "initAccumulator"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialize the accumulator.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "isAccumulatorChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Is the channel attached to an accumulator.\n:returns: The analog input is attached to an accumulator.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "resetAccumulator"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Resets the accumulator to the initial value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "setAccumulatorCenter"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the center value of the accumulator.\nThe center value is subtracted from each A/D value before it is added to\nthe accumulator. This is used for the center value of devices like gyros\nand accelerometers to take the device offset into account when integrating.\nThis center value is based on the output of the oversampled and averaged\nsource from the accumulator channel. Because of this, any non-zero\noversample bits will affect the size of the value for this field.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "setAccumulatorDeadband"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the accumulator's deadband.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "setAccumulatorInitialValue"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set an initial value for the accumulator.\nThis will be added to all values returned to the user.\n:param value: The value that the accumulator should start from when reset.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "setAverageBits"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the number of averaging bits.\nThis sets the number of averaging bits. The actual number of averaged\nsamples is 2^bits.\nUse averaging to improve the stability of your measurement at the expense\nof sampling rate. The averaging is done automatically in the FPGA.\n:param bits: Number of bits of averaging.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "setOversampleBits"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the number of oversample bits.\nThis sets the number of oversample bits. The actual number of oversampled\nvalues is 2^bits. Use oversampling to improve the resolution of your\nmeasurements at the expense of sampling rate. The oversampling is done\nautomatically in the FPGA.\n:param bits: Number of bits of oversampling.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "setSampleRate"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the sample rate per channel for all analog channels.\nThe maximum rate is 500kS/s divided by the number of channels in use.\nThis is 62500 samples/s per channel.\n:param samplesPerSecond: The number of samples per second.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "FUNC": "setSimDevice"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Indicates this input is used by a simulated device.\n:param device: simulated device handle",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "VAR": "kAccumulatorModuleNumber"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "VAR": "kAccumulatorNumChannels"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "VAR": "kAccumulatorModuleNumber"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.AnalogInput",
            "VAR": "kAccumulatorNumChannels"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        }
      ]
    },
    {
      "kind": "category",
      "name": "AnalogOutput",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.AnalogOutput",
            "FUNC": "wpilib.AnalogOutput"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.AnalogOutput"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct an analog output on the given channel.\nAll analog outputs are located on the MXP port.\n:param channel: The channel number on the roboRIO to represent.",
          "output": "wpilib.AnalogOutput"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogOutput",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel of this AnalogOutput.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogOutput",
            "FUNC": "getVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the voltage of the analog output.\n:returns: The value in Volts, from 0.0 to +5.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogOutput",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogOutput",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the value of the analog output.\n:param voltage: The output value in Volts, from 0.0 to +5.0.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "AnalogPotentiometer",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogPotentiometer",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current reading of the potentiometer.\n:returns: The current position of the potentiometer (in the units used for\nfullRange and offset).",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogPotentiometer",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "AnalogTrigger",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "createOutput"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.AnalogTriggerType"
            }
          },
          "colour": 270,
          "tooltip": "Creates an AnalogTriggerOutput object.\nGets an output object that can be used for routing. Caller is responsible\nfor deleting the AnalogTriggerOutput object.\n:param type: An enum of the type of output object to create.\n:returns: A pointer to a new AnalogTriggerOutput object.",
          "output": "wpilib._wpilib.AnalogTriggerOutput"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "getInWindow"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the InWindow output of the analog trigger.\nTrue if the analog input is between the upper and lower limits.\n:returns: True if the analog input is between the upper and lower limits.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "getIndex"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the index of the analog trigger.\nThis is the FPGA index of this analog trigger instance.\n:returns: The index of the analog trigger.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "getTriggerState"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the TriggerState output of the analog trigger.\nTrue if above upper limit.\nFalse if below lower limit.\nIf in Hysteresis, maintain previous state.\n:returns: True if above upper limit. False if below lower limit. If in\nHysteresis, maintain previous state.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "setAveraged"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Configure the analog trigger to use the averaged vs. raw values.\nIf the value is true, then the averaged value is selected for the analog\ntrigger, otherwise the immediate value is used.\n:param useAveragedValue: If true, use the Averaged value, otherwise use the\ninstantaneous reading",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "setFiltered"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Configure the analog trigger to use a filtered value.\nThe analog trigger will operate with a 3 point average rejection filter.\nThis is designed to help with 360 degree pot applications for the period\nwhere the pot crosses through zero.\n:param useFilteredValue: If true, use the 3 point rejection filter,\notherwise use the unfiltered value",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "setLimitsDutyCycle"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the upper and lower duty cycle limits of the analog trigger.\nThe limits are given as floating point values between 0 and 1.\n:param lower: The lower limit of the trigger in percentage.\n:param upper: The upper limit of the trigger in percentage.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "setLimitsRaw"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the upper and lower limits of the analog trigger.\nThe limits are given in ADC codes.  If oversampling is used, the units must\nbe scaled appropriately.\n:param lower: The lower limit of the trigger in ADC codes (12-bit values).\n:param upper: The upper limit of the trigger in ADC codes (12-bit values).",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTrigger",
            "FUNC": "setLimitsVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the upper and lower limits of the analog trigger.\nThe limits are given as floating point voltage values.\n:param lower: The lower limit of the trigger in Volts.\n:param upper: The upper limit of the trigger in Volts.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "AnalogTriggerOutput",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.AnalogTriggerOutput",
            "FUNC": "wpilib.AnalogTriggerOutput"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.AnalogTriggerOutput"
            },
            "ARG1": {
              "type": "wpilib._wpilib.AnalogTrigger"
            },
            "ARG2": {
              "type": "wpilib._wpilib.AnalogTriggerType"
            }
          },
          "colour": 300,
          "tooltip": "Create an object that represents one of the four outputs from an analog\ntrigger.\nBecause this class derives from DigitalSource, it can be passed into\nrouting functions for Counter, Encoder, etc.\n:param trigger:    A pointer to the trigger for which this is an output.\n:param outputType: An enum that specifies the output on the trigger to\nrepresent.",
          "output": "wpilib.AnalogTriggerOutput"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTriggerOutput",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the state of the analog trigger output.\n:returns: The state of the analog trigger output.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTriggerOutput",
            "FUNC": "getAnalogTriggerTypeForRouting"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The type of analog trigger output to be used.",
          "output": "wpilib._wpilib.AnalogTriggerType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTriggerOutput",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The channel of the source.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTriggerOutput",
            "FUNC": "getPortHandleForRouting"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The HAL Handle to the specified source.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTriggerOutput",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.AnalogTriggerOutput",
            "FUNC": "isAnalogTrigger"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Is source an AnalogTrigger",
          "output": "bool"
        }
      ]
    },
    {
      "kind": "category",
      "name": "BuiltInAccelerometer",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.BuiltInAccelerometer",
            "FUNC": "wpilib.BuiltInAccelerometer"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.BuiltInAccelerometer"
            },
            "ARG1": {
              "type": "wpilib._wpilib.BuiltInAccelerometer.Range"
            }
          },
          "colour": 300,
          "tooltip": "Constructor.\n:param range: The range the accelerometer will measure",
          "output": "wpilib.BuiltInAccelerometer"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.BuiltInAccelerometer",
            "FUNC": "getX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The acceleration of the roboRIO along the X axis in g-forces",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.BuiltInAccelerometer",
            "FUNC": "getY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The acceleration of the roboRIO along the Y axis in g-forces",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.BuiltInAccelerometer",
            "FUNC": "getZ"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The acceleration of the roboRIO along the Z axis in g-forces",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.BuiltInAccelerometer",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.BuiltInAccelerometer",
            "FUNC": "setRange"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.BuiltInAccelerometer.Range"
            }
          },
          "colour": 270,
          "tooltip": "Set the measuring range of the accelerometer.\n:param range: The maximum acceleration, positive or negative, that the\naccelerometer will measure.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.BuiltInAccelerometer",
            "VAR": "Range"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.BuiltInAccelerometer",
            "VAR": "Range"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.BuiltInAccelerometer.Range",
            "ENUM_VALUE": "kRange_2G"
          },
          "output": "wpilib.BuiltInAccelerometer.Range",
          "colour": 180,
          "tooltip": "Accelerometer range.\n\nMembers:\n\n  kRange_2G : 2 Gs max.\n\n  kRange_4G : 4 Gs max.\n\n  kRange_8G : 8 Gs max."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.BuiltInAccelerometer.Range",
            "ENUM_VALUE": "kRange_4G"
          },
          "output": "wpilib.BuiltInAccelerometer.Range",
          "colour": 180,
          "tooltip": "Accelerometer range.\n\nMembers:\n\n  kRange_2G : 2 Gs max.\n\n  kRange_4G : 4 Gs max.\n\n  kRange_8G : 8 Gs max."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.BuiltInAccelerometer.Range",
            "ENUM_VALUE": "kRange_8G"
          },
          "output": "wpilib.BuiltInAccelerometer.Range",
          "colour": 180,
          "tooltip": "Accelerometer range.\n\nMembers:\n\n  kRange_2G : 2 Gs max.\n\n  kRange_4G : 4 Gs max.\n\n  kRange_8G : 8 Gs max."
        },
        {
          "kind": "category",
          "name": "Range",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.BuiltInAccelerometer.Range",
                "ENUM_VALUE": "kRange_2G"
              },
              "output": "wpilib.BuiltInAccelerometer.Range",
              "colour": 180,
              "tooltip": "Accelerometer range.\n\nMembers:\n\n  kRange_2G : 2 Gs max.\n\n  kRange_4G : 4 Gs max.\n\n  kRange_8G : 8 Gs max."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.BuiltInAccelerometer.Range",
                "ENUM_VALUE": "kRange_4G"
              },
              "output": "wpilib.BuiltInAccelerometer.Range",
              "colour": 180,
              "tooltip": "Accelerometer range.\n\nMembers:\n\n  kRange_2G : 2 Gs max.\n\n  kRange_4G : 4 Gs max.\n\n  kRange_8G : 8 Gs max."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.BuiltInAccelerometer.Range",
                "ENUM_VALUE": "kRange_8G"
              },
              "output": "wpilib.BuiltInAccelerometer.Range",
              "colour": 180,
              "tooltip": "Accelerometer range.\n\nMembers:\n\n  kRange_2G : 2 Gs max.\n\n  kRange_4G : 4 Gs max.\n\n  kRange_8G : 8 Gs max."
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "Color",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Color",
            "FUNC": "fromHSV"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            },
            "ARG2": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Creates a Color from HSV values.\n:param h: The h value [0-180)\n:param s: The s value [0-255]\n:param v: The v value [0-255]\n:returns: The color",
          "output": "wpilib._wpilib.Color"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Color",
            "FUNC": "hexString"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return this color represented as a hex string.\n:returns: a string of the format <tt>\\#RRGGBB</tt>",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "property_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "blue"
          },
          "output": "float",
          "colour": 120,
          "tooltip": "Blue component (0-1)."
        },
        {
          "kind": "block",
          "type": "property_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "green"
          },
          "output": "float",
          "colour": 120,
          "tooltip": "Green component (0-1)."
        },
        {
          "kind": "block",
          "type": "property_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "red"
          },
          "output": "float",
          "colour": 120,
          "tooltip": "Red component (0-1)."
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAliceBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAntiqueWhite"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAqua"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAquamarine"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAzure"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBeige"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBisque"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBlack"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBlanchedAlmond"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBlueViolet"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBrown"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBurlywood"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCadetBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kChartreuse"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kChocolate"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCoral"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCornflowerBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCornsilk"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCrimson"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCyan"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkCyan"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkGoldenrod"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkGray"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkKhaki"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkMagenta"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkOliveGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkOrange"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkOrchid"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkRed"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkSalmon"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkSeaGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkSlateBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkSlateGray"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkTurquoise"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkViolet"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDeepPink"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDeepSkyBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDenim"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDimGray"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDodgerBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFirebrick"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFirstBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFirstRed"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFloralWhite"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kForestGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFuchsia"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGainsboro"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGhostWhite"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGold"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGoldenrod"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGray"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGreenYellow"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kHoneydew"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kHotPink"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kIndianRed"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kIndigo"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kIvory"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kKhaki"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLavender"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLavenderBlush"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLawnGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLemonChiffon"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightCoral"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightCyan"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightGoldenrodYellow"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightGray"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightPink"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSalmon"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSeaGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSkyBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSlateGray"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSteelBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightYellow"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLime"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLimeGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLinen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMagenta"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMaroon"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumAquamarine"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumOrchid"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumPurple"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumSeaGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumSlateBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumSpringGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumTurquoise"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumVioletRed"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMidnightBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMintcream"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMistyRose"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMoccasin"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kNavajoWhite"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kNavy"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOldLace"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOlive"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOliveDrab"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOrange"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOrangeRed"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOrchid"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPaleGoldenrod"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPaleGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPaleTurquoise"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPaleVioletRed"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPapayaWhip"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPeachPuff"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPeru"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPink"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPlum"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPowderBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPurple"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kRed"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kRosyBrown"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kRoyalBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSaddleBrown"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSalmon"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSandyBrown"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSeaGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSeashell"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSienna"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSilver"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSkyBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSlateBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSlateGray"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSnow"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSpringGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSteelBlue"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kTan"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kTeal"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kThistle"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kTomato"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kTurquoise"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kViolet"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kWheat"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kWhite"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kWhiteSmoke"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kYellow"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kYellowGreen"
          },
          "output": "wpilib.Color",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAliceBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAntiqueWhite"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAqua"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAquamarine"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kAzure"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBeige"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBisque"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBlack"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBlanchedAlmond"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBlueViolet"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBrown"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kBurlywood"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCadetBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kChartreuse"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kChocolate"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCoral"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCornflowerBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCornsilk"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCrimson"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kCyan"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkCyan"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkGoldenrod"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkGray"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkKhaki"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkMagenta"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkOliveGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkOrange"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkOrchid"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkRed"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkSalmon"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkSeaGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkSlateBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkSlateGray"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkTurquoise"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDarkViolet"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDeepPink"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDeepSkyBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDenim"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDimGray"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kDodgerBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFirebrick"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFirstBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFirstRed"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFloralWhite"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kForestGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kFuchsia"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGainsboro"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGhostWhite"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGold"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGoldenrod"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGray"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kGreenYellow"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kHoneydew"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kHotPink"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kIndianRed"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kIndigo"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kIvory"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kKhaki"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLavender"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLavenderBlush"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLawnGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLemonChiffon"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightCoral"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightCyan"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightGoldenrodYellow"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightGray"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightPink"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSalmon"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSeaGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSkyBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSlateGray"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightSteelBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLightYellow"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLime"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLimeGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kLinen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMagenta"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMaroon"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumAquamarine"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumOrchid"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumPurple"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumSeaGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumSlateBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumSpringGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumTurquoise"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMediumVioletRed"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMidnightBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMintcream"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMistyRose"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kMoccasin"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kNavajoWhite"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kNavy"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOldLace"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOlive"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOliveDrab"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOrange"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOrangeRed"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kOrchid"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPaleGoldenrod"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPaleGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPaleTurquoise"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPaleVioletRed"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPapayaWhip"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPeachPuff"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPeru"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPink"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPlum"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPowderBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kPurple"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kRed"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kRosyBrown"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kRoyalBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSaddleBrown"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSalmon"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSandyBrown"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSeaGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSeashell"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSienna"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSilver"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSkyBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSlateBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSlateGray"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSnow"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSpringGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kSteelBlue"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kTan"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kTeal"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kThistle"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kTomato"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kTurquoise"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kViolet"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kWheat"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kWhite"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kWhiteSmoke"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kYellow"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "kYellowGreen"
          },
          "inputs": {
            "VALUE": {
              "type": "wpilib.Color"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "instance_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "blue"
          },
          "output": "float",
          "colour": 120,
          "tooltip": "Blue component (0-1)."
        },
        {
          "kind": "block",
          "type": "instance_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "green"
          },
          "output": "float",
          "colour": 120,
          "tooltip": "Green component (0-1)."
        },
        {
          "kind": "block",
          "type": "instance_variable_get",
          "fields": {
            "CLASS": "wpilib.Color",
            "VAR": "red"
          },
          "output": "float",
          "colour": 120,
          "tooltip": "Red component (0-1)."
        }
      ]
    },
    {
      "kind": "category",
      "name": "Color8Bit",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Color8Bit",
            "FUNC": "fromHexString"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Create a Color8Bit from a hex string.\n:param hexString: a string of the format <tt>\\#RRGGBB</tt>\n:returns: Color8Bit object from hex string.\n@throws std::invalid_argument if the hex string is invalid.",
          "output": "wpilib._wpilib.Color8Bit"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Color8Bit",
            "FUNC": "hexString"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return this color represented as a hex string.\n:returns: a string of the format <tt>\\#RRGGBB</tt>",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Color8Bit",
            "FUNC": "toColor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.Color"
        },
        {
          "kind": "block",
          "type": "property_get",
          "fields": {
            "CLASS": "wpilib.Color8Bit",
            "VAR": "blue"
          },
          "output": "int",
          "colour": 120,
          "tooltip": "Blue component (0-255)."
        },
        {
          "kind": "block",
          "type": "property_get",
          "fields": {
            "CLASS": "wpilib.Color8Bit",
            "VAR": "green"
          },
          "output": "int",
          "colour": 120,
          "tooltip": "Green component (0-255)."
        },
        {
          "kind": "block",
          "type": "property_get",
          "fields": {
            "CLASS": "wpilib.Color8Bit",
            "VAR": "red"
          },
          "output": "int",
          "colour": 120,
          "tooltip": "Red component (0-255)."
        },
        {
          "kind": "block",
          "type": "instance_variable_get",
          "fields": {
            "CLASS": "wpilib.Color8Bit",
            "VAR": "blue"
          },
          "output": "int",
          "colour": 120,
          "tooltip": "Blue component (0-255)."
        },
        {
          "kind": "block",
          "type": "instance_variable_get",
          "fields": {
            "CLASS": "wpilib.Color8Bit",
            "VAR": "green"
          },
          "output": "int",
          "colour": 120,
          "tooltip": "Green component (0-255)."
        },
        {
          "kind": "block",
          "type": "instance_variable_get",
          "fields": {
            "CLASS": "wpilib.Color8Bit",
            "VAR": "red"
          },
          "output": "int",
          "colour": 120,
          "tooltip": "Red component (0-255)."
        }
      ]
    },
    {
      "kind": "category",
      "name": "Compressor",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Disable the compressor.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "enableAnalog"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.pounds_per_square_inch"
            },
            "ARG1": {
              "type": "wpimath.units.pounds_per_square_inch"
            }
          },
          "colour": 270,
          "tooltip": "If supported by the device, enables the compressor in analog mode. This\nmode uses an analog pressure sensor connected to analog channel 0 to cycle\nthe compressor. The compressor will turn on when the pressure drops below\n``minPressure`` and will turn off when the pressure reaches {@code\nmaxPressure}. This mode is only supported by the REV PH with the REV Analog\nPressure Sensor connected to analog channel 0.\nOn CTRE PCM, this will enable digital control.\n:param minPressure: The minimum pressure. The compressor will turn on when\nthe pressure drops below this value.\n:param maxPressure: The maximum pressure. The compressor will turn off when\nthe pressure reaches this value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "enableDigital"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Enables the compressor in digital mode using the digital pressure switch.\nThe compressor will turn on when the pressure switch indicates that the\nsystem is not full, and will turn off when the pressure switch indicates\nthat the system is full.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "enableHybrid"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.pounds_per_square_inch"
            },
            "ARG1": {
              "type": "wpimath.units.pounds_per_square_inch"
            }
          },
          "colour": 270,
          "tooltip": "If supported by the device, enables the compressor in hybrid mode. This\nmode uses both a digital pressure switch and an analog pressure sensor\nconnected to analog channel 0 to cycle the compressor. This mode is only\nsupported by the REV PH with the REV Analog Pressure Sensor connected to\nanalog channel 0.\nThe compressor will turn on when \\a both:\n- The digital pressure switch indicates the system is not full AND\n- The analog pressure sensor indicates that the pressure in the system\nis below the specified minimum pressure.\nThe compressor will turn off when \\a either:\n- The digital pressure switch is disconnected or indicates that the system\nis full OR\n- The pressure detected by the analog sensor is greater than the specified\nmaximum pressure.\nOn CTRE PCM, this will enable digital control.\n:param minPressure: The minimum pressure. The compressor will turn on\nwhen the pressure drops below this value and the pressure switch indicates\nthat the system is not full.\n:param maxPressure: The maximum pressure. The compressor will turn\noff when the pressure reaches this value or the pressure switch is\ndisconnected or indicates that the system is full.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "getAnalogVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "If supported by the device, returns the analog input voltage (on channel\n0).\nThis function is only supported by the REV PH. On CTRE PCM, this will\nreturn 0.\n:returns: The analog input voltage, in volts.",
          "output": "wpimath.units.volts"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "getConfigType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the active compressor configuration.\n:returns: The active compressor configuration.",
          "output": "wpilib._wpilib.CompressorConfigType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "getCurrent"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current drawn by the compressor.\n:returns: Current drawn by the compressor.",
          "output": "wpimath.units.amperes"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "getPressure"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "If supported by the device, returns the pressure read by the analog\npressure sensor (on channel 0).\nThis function is only supported by the REV PH with the REV Analog Pressure\nSensor. On CTRE PCM, this will return 0.\n:returns: The pressure read by the analog pressure sensor.",
          "output": "wpimath.units.pounds_per_square_inch"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "getPressureSwitchValue"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the state of the pressure switch.\n:returns: True if pressure switch indicates that the system is not full,\notherwise false.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Compressor",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether the compressor is active or not.\n:returns: true if the compressor is on - otherwise false.",
          "output": "bool"
        }
      ]
    },
    {
      "kind": "category",
      "name": "Counter",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "clearDownSource"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Disable the down counting source to the counter.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "clearUpSource"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Disable the up counting source to the counter.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the current counter value.\nRead the value at this instant. It may still be running, so it reflects the\ncurrent value. Next time it is read, it might have a different value.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "getDirection"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "The last direction the counter value changed.\n:returns: The last direction the counter value changed.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "getDistance"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the current scaled counter value. Read the value at this instant,\nscaled by the distance per pulse (defaults to 1).\n:returns: The distance since the last reset",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "getFPGAIndex"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "getPeriod"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Period of the most recent count.\nReturns the time interval of the most recent count. This can be used for\nvelocity calculations to determine shaft speed.\n:returns: The period between the last two pulses in units of seconds.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "getRate"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current rate of the Counter. Read the current rate of the counter\naccounting for the distance per pulse value. The default value for distance\nper pulse (1) yields units of pulses per second.\n:returns: The rate in units/sec",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "getSamplesToAverage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period.\nPerform averaging to account for mechanical imperfections or as\noversampling to increase resolution.\n:returns: The number of samples being averaged (from 1 to 127)",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "getStopped"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the clock is stopped.\nDetermine if the clocked input is stopped based on the MaxPeriod value set\nusing the SetMaxPeriod method. If the clock exceeds the MaxPeriod, then the\ndevice (and counter) are assumed to be stopped and it returns true.\n:returns: Returns true if the most recent counter period exceeds the\nMaxPeriod value set by SetMaxPeriod.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "reset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Reset the Counter to zero.\nSet the counter value to zero. This doesn't effect the running state of the\ncounter, just sets the current value to zero.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setDistancePerPulse"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the distance per pulse for this counter. This sets the multiplier used\nto determine the distance driven based on the count value from the encoder.\nSet this value based on the Pulses per Revolution and factor in any gearing\nreductions. This distance can be in any units you like, linear or angular.\n:param distancePerPulse: The scale factor that will be used to convert\npulses to useful units.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setDownSourceEdge"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set the edge sensitivity on a down counting source.\nSet the down source to either detect rising edges or falling edges.\n:param risingEdge:  True to trigger on rising edges\n:param fallingEdge: True to trigger on falling edges",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setExternalDirectionMode"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Set external direction mode on this counter.\nCounts are sourced on the Up counter input.\nThe Down counter input represents the direction to count.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setMaxPeriod"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the maximum period where the device is still considered \"moving\".\nSets the maximum period where the device is considered moving. This value\nis used to determine the \"stopped\" state of the counter using the\nGetStopped method.\n:param maxPeriod: The maximum period where the counted device is considered\nmoving in seconds.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setPulseLengthMode"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Configure the counter to count in up or down based on the length of the\ninput pulse.\nThis mode is most useful for direction sensitive gear tooth sensors.\n:param threshold: The pulse length beyond which the counter counts the\nopposite direction. Units are seconds.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setReverseDirection"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set the Counter to return reversed sensing on the direction.\nThis allows counters to change the direction they are counting in the case\nof 1X and 2X quadrature encoding only. Any other counter mode isn't\nsupported.\n:param reverseDirection: true if the value counted should be negated.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setSamplesToAverage"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period. Perform averaging to account\nfor mechanical imperfections or as oversampling to increase resolution.\n:param samplesToAverage: The number of samples to average from 1 to 127.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setSemiPeriodMode"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set Semi-period mode on this counter.\nCounts up on both rising and falling edges.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setUpDownCounterMode"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Set standard up / down counting mode on this counter.\nUp and down counts are sourced independently from two inputs.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setUpSourceEdge"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set the edge sensitivity on an up counting source.\nSet the up source to either detect rising edges or falling edges or both.\n:param risingEdge:  True to trigger on rising edges\n:param fallingEdge: True to trigger on falling edges",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Counter",
            "FUNC": "setUpdateWhenEmpty"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Select whether you want to continue updating the event timer output when\nthere are no samples captured.\nThe output of the event timer has a buffer of periods that are averaged and\nposted to a register on the FPGA.  When the timer detects that the event\nsource has stopped (based on the MaxPeriod) the buffer of samples to be\naveraged is emptied.  If you enable the update when empty, you will be\nnotified of the stopped source and the event time will report 0 samples.\nIf you disable update when empty, the most recent average will remain on\nthe output until a new sample is acquired.  You will never see 0 samples\noutput (except when there have been no events since an FPGA reset) and you\nwill likely not see the stopped bit become true (since it is updated at the\nend of an average and there are no samples to average).\n:param enabled: True to enable update when empty",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Counter",
            "VAR": "EncodingType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Counter",
            "VAR": "Mode"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Counter",
            "VAR": "EncodingType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Counter",
            "VAR": "Mode"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
            "ENUM_VALUE": "k1X"
          },
          "output": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
          "colour": 180,
          "tooltip": "Members:\n\n  k1X\n\n  k2X\n\n  k4X"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
            "ENUM_VALUE": "k2X"
          },
          "output": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
          "colour": 180,
          "tooltip": "Members:\n\n  k1X\n\n  k2X\n\n  k4X"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
            "ENUM_VALUE": "k4X"
          },
          "output": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
          "colour": 180,
          "tooltip": "Members:\n\n  k1X\n\n  k2X\n\n  k4X"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Counter.Mode",
            "ENUM_VALUE": "kExternalDirection"
          },
          "output": "wpilib.Counter.Mode",
          "colour": 180,
          "tooltip": "Members:\n\n  kTwoPulse\n\n  kSemiperiod\n\n  kPulseLength\n\n  kExternalDirection"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Counter.Mode",
            "ENUM_VALUE": "kPulseLength"
          },
          "output": "wpilib.Counter.Mode",
          "colour": 180,
          "tooltip": "Members:\n\n  kTwoPulse\n\n  kSemiperiod\n\n  kPulseLength\n\n  kExternalDirection"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Counter.Mode",
            "ENUM_VALUE": "kSemiperiod"
          },
          "output": "wpilib.Counter.Mode",
          "colour": 180,
          "tooltip": "Members:\n\n  kTwoPulse\n\n  kSemiperiod\n\n  kPulseLength\n\n  kExternalDirection"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Counter.Mode",
            "ENUM_VALUE": "kTwoPulse"
          },
          "output": "wpilib.Counter.Mode",
          "colour": 180,
          "tooltip": "Members:\n\n  kTwoPulse\n\n  kSemiperiod\n\n  kPulseLength\n\n  kExternalDirection"
        },
        {
          "kind": "category",
          "name": "Mode",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Counter.Mode",
                "ENUM_VALUE": "kExternalDirection"
              },
              "output": "wpilib.Counter.Mode",
              "colour": 180,
              "tooltip": "Members:\n\n  kTwoPulse\n\n  kSemiperiod\n\n  kPulseLength\n\n  kExternalDirection"
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Counter.Mode",
                "ENUM_VALUE": "kPulseLength"
              },
              "output": "wpilib.Counter.Mode",
              "colour": 180,
              "tooltip": "Members:\n\n  kTwoPulse\n\n  kSemiperiod\n\n  kPulseLength\n\n  kExternalDirection"
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Counter.Mode",
                "ENUM_VALUE": "kSemiperiod"
              },
              "output": "wpilib.Counter.Mode",
              "colour": 180,
              "tooltip": "Members:\n\n  kTwoPulse\n\n  kSemiperiod\n\n  kPulseLength\n\n  kExternalDirection"
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Counter.Mode",
                "ENUM_VALUE": "kTwoPulse"
              },
              "output": "wpilib.Counter.Mode",
              "colour": 180,
              "tooltip": "Members:\n\n  kTwoPulse\n\n  kSemiperiod\n\n  kPulseLength\n\n  kExternalDirection"
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "DMC60",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "wpilib.DMC60"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.DMC60"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a Digilent DMC 60.\n:param channel: The PWM channel that the DMC 60 is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.DMC60"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DMC60",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "DSControlWord",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "wpilib.DSControlWord"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.DSControlWord"
            }
          },
          "colour": 300,
          "tooltip": "DSControlWord constructor.\nUpon construction, the current Driver Station control word is read and\nstored internally.",
          "output": "wpilib.DSControlWord"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isAutonomous"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding autonomous mode.\n:returns: True if the robot is being commanded to be in autonomous mode",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isAutonomousEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding autonomous mode and if it has enabled the\nrobot.\n:returns: True if the robot is being commanded to be in autonomous mode and\nenabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isDSAttached"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is attached.\n:returns: True if the DS is connected to the robot",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the robot is disabled.\n:returns: True if the robot is explicitly disabled or the DS is not connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isEStopped"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the robot is e-stopped.\n:returns: True if the robot is e-stopped",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS has enabled the robot.\n:returns: True if the robot is enabled and the DS is connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isFMSAttached"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Is the driver station attached to a Field Management System?\n:returns: True if the robot is competing on a field being controlled by a\nField Management System",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isTeleop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding teleop mode.\n:returns: True if the robot is being commanded to be in teleop mode",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isTeleopEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding teleop mode and if it has enabled the robot.\n:returns: True if the robot is being commanded to be in teleop mode and\nenabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DSControlWord",
            "FUNC": "isTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding test mode.\n:returns: True if the robot is being commanded to be in test mode",
          "output": "bool"
        }
      ]
    },
    {
      "kind": "category",
      "name": "DataLogManager",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DataLogManager",
            "FUNC": "getLog"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the managed data log (for custom logging). Starts the data log manager\nif not already started.\n:returns: data log",
          "output": "wpiutil._wpiutil.log.DataLog"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DataLogManager",
            "FUNC": "getLogDir"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the log directory.\n:returns: log directory",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DataLogManager",
            "FUNC": "log"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Log a message to the \"messages\" entry. The message is also printed to\nstandard output (followed by a newline).\n:param message: message",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DataLogManager",
            "FUNC": "logNetworkTables"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable or disable logging of NetworkTables data. Note that unlike the\nnetwork interface for NetworkTables, this will capture every value change.\nDefaults to enabled.\n:param enabled: true to enable, false to disable",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DataLogManager",
            "FUNC": "start"
          },
          "inputs": {
            "ARG0": {
              "type": "str",
              "shadow": {
                "type": "text",
                "fields": {
                  "TEXT": "''"
                }
              }
            },
            "ARG1": {
              "type": "str",
              "shadow": {
                "type": "text",
                "fields": {
                  "TEXT": "''"
                }
              }
            },
            "ARG2": {
              "type": "float",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0.25"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Start data log manager. The parameters have no effect if the data log\nmanager was already started (e.g. by calling another static function).\n:param dir:      if not empty, directory to use for data log storage\n:param filename: filename to use; if none provided, the filename is\nautomatically generated\n:param period:   time between automatic flushes to disk, in seconds;\nthis is a time/storage tradeoff",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DataLogManager",
            "FUNC": "stop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Stop data log manager.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "DigitalGlitchFilter",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.DigitalGlitchFilter",
            "FUNC": "wpilib.DigitalGlitchFilter"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.DigitalGlitchFilter"
            }
          },
          "colour": 300,
          "tooltip": "",
          "output": "wpilib.DigitalGlitchFilter"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalGlitchFilter",
            "FUNC": "getPeriodCycles"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets the number of cycles that the input must not change state for.\n:returns: The number of cycles.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalGlitchFilter",
            "FUNC": "getPeriodNanoSeconds"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets the number of nanoseconds that the input must not change state for.\n:returns: The number of nanoseconds.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalGlitchFilter",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalGlitchFilter",
            "FUNC": "setPeriodCycles"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Sets the number of cycles that the input must not change state for.\n:param fpgaCycles: The number of FPGA cycles.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalGlitchFilter",
            "FUNC": "setPeriodNanoSeconds"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Sets the number of nanoseconds that the input must not change state for.\n:param nanoseconds: The number of nanoseconds.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "DigitalInput",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.DigitalInput",
            "FUNC": "wpilib.DigitalInput"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.DigitalInput"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Create an instance of a Digital Input class.\nCreates a digital input given a channel.\n:param channel: The DIO channel 0-9 are on-board, 10-25 are on the MXP port",
          "output": "wpilib.DigitalInput"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalInput",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the value from a digital input channel.\nRetrieve the value of a single digital input channel from the FPGA.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalInput",
            "FUNC": "getAnalogTriggerTypeForRouting"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The type of analog trigger output to be used. 0 for Digitals",
          "output": "wpilib._wpilib.AnalogTriggerType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalInput",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The GPIO channel number that this object represents.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalInput",
            "FUNC": "getPortHandleForRouting"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The HAL Handle to the specified source.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalInput",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalInput",
            "FUNC": "isAnalogTrigger"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Is source an AnalogTrigger",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalInput",
            "FUNC": "setSimDevice"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Indicates this input is used by a simulated device.\n:param device: simulated device handle",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "DigitalOutput",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "wpilib.DigitalOutput"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.DigitalOutput"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Create an instance of a digital output.\nCreate a digital output given a channel.\n:param channel: The digital channel 0-9 are on-board, 10-25 are on the MXP\nport",
          "output": "wpilib.DigitalOutput"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "disablePWM"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Change this line from a PWM output back to a static Digital Output line.\nFree up one of the 6 DO PWM generator resources that were in use.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "enablePPS"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Enable a PWM PPS (Pulse Per Second) Output on this line.\nAllocate one of the 6 DO PWM generator resources from this module.\nSupply the duty-cycle to output.\nThe resolution of the duty cycle is 8-bit.\n:param dutyCycle: The duty-cycle to start generating. [0..1]",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "enablePWM"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Enable a PWM Output on this line.\nAllocate one of the 6 DO PWM generator resources from this module.\nSupply the initial duty-cycle to output so as to avoid a glitch when first\nstarting.\nThe resolution of the duty cycle is 8-bit for low frequencies (1kHz or\nless) but is reduced the higher the frequency of the PWM signal is.\n:param initialDutyCycle: The duty-cycle to start generating. [0..1]",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets the value being output from the Digital Output.\n:returns: the state of the digital output.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "getAnalogTriggerTypeForRouting"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The type of analog trigger output to be used. 0 for Digitals",
          "output": "wpilib._wpilib.AnalogTriggerType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The GPIO channel number that this object represents.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "getPortHandleForRouting"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": ":returns: The HAL Handle to the specified source.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "isAnalogTrigger"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Is source an AnalogTrigger",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "isPulsing"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the pulse is still going.\nDetermine if a previously started pulse is still going.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "pulse"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Output a single pulse on the digital output line.\nSend a single pulse on the digital output line where the pulse duration is\nspecified in seconds. Maximum of 65535 microseconds.\n:param pulseLength: The pulse length in seconds",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set the value of a digital output.\nSet the value of a digital output to either one (true) or zero (false).\n:param value: 1 (true) for high, 0 (false) for disabled",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "setPWMRate"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Change the PWM frequency of the PWM output on a Digital Output line.\nThe valid range is from 0.6 Hz to 19 kHz.  The frequency resolution is\nlogarithmic.\nThere is only one PWM frequency for all digital channels.\n:param rate: The frequency to output all digital output PWM signals.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "setSimDevice"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Indicates this output is used by a simulated device.\n:param device: simulated device handle",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalOutput",
            "FUNC": "updateDutyCycle"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Change the duty-cycle that is being generated on the line.\nThe resolution of the duty cycle is 8-bit for low frequencies (1kHz or\nless) but is reduced the higher the frequency of the PWM signal is.\n:param dutyCycle: The duty-cycle to change to. [0..1]",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "DigitalSource",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.DigitalSource",
            "FUNC": "wpilib.DigitalSource"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.DigitalSource"
            }
          },
          "colour": 300,
          "tooltip": "",
          "output": "wpilib.DigitalSource"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalSource",
            "FUNC": "getAnalogTriggerTypeForRouting"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.AnalogTriggerType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalSource",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalSource",
            "FUNC": "getPortHandleForRouting"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DigitalSource",
            "FUNC": "isAnalogTrigger"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        }
      ]
    },
    {
      "kind": "category",
      "name": "DoubleSolenoid",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the current value of the solenoid.\n:returns: The current value of the solenoid.",
          "output": "wpilib._wpilib.DoubleSolenoid.Value"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "FUNC": "getFwdChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the forward channel.\n:returns: the forward channel.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "FUNC": "getRevChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the reverse channel.\n:returns: the reverse channel.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "FUNC": "isFwdSolenoidDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the forward solenoid is Disabled.\nIf a solenoid is shorted, it is added to the DisabledList and disabled\nuntil power cycle, or until faults are cleared.\n@see ClearAllStickyFaults()\n:returns: If solenoid is disabled due to short.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "FUNC": "isRevSolenoidDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the reverse solenoid is Disabled.\nIf a solenoid is shorted, it is added to the DisabledList and disabled\nuntil power cycle, or until faults are cleared.\n@see ClearAllStickyFaults()\n:returns: If solenoid is disabled due to short.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.DoubleSolenoid.Value"
            }
          },
          "colour": 270,
          "tooltip": "Set the value of a solenoid.\n:param value: The value to set (Off, Forward or Reverse)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "FUNC": "toggle"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Toggle the value of the solenoid.\nIf the solenoid is set to forward, it'll be set to reverse. If the solenoid\nis set to reverse, it'll be set to forward. If the solenoid is set to off,\nnothing happens.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "VAR": "Value"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.DoubleSolenoid",
            "VAR": "Value"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.DoubleSolenoid.Value",
            "ENUM_VALUE": "kForward"
          },
          "output": "wpilib.DoubleSolenoid.Value",
          "colour": 180,
          "tooltip": "Possible values for a DoubleSolenoid.\n\nMembers:\n\n  kOff : Off position.\n\n  kForward : Forward position.\n\n  kReverse : Reverse position."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.DoubleSolenoid.Value",
            "ENUM_VALUE": "kOff"
          },
          "output": "wpilib.DoubleSolenoid.Value",
          "colour": 180,
          "tooltip": "Possible values for a DoubleSolenoid.\n\nMembers:\n\n  kOff : Off position.\n\n  kForward : Forward position.\n\n  kReverse : Reverse position."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.DoubleSolenoid.Value",
            "ENUM_VALUE": "kReverse"
          },
          "output": "wpilib.DoubleSolenoid.Value",
          "colour": 180,
          "tooltip": "Possible values for a DoubleSolenoid.\n\nMembers:\n\n  kOff : Off position.\n\n  kForward : Forward position.\n\n  kReverse : Reverse position."
        },
        {
          "kind": "category",
          "name": "Value",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.DoubleSolenoid.Value",
                "ENUM_VALUE": "kForward"
              },
              "output": "wpilib.DoubleSolenoid.Value",
              "colour": 180,
              "tooltip": "Possible values for a DoubleSolenoid.\n\nMembers:\n\n  kOff : Off position.\n\n  kForward : Forward position.\n\n  kReverse : Reverse position."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.DoubleSolenoid.Value",
                "ENUM_VALUE": "kOff"
              },
              "output": "wpilib.DoubleSolenoid.Value",
              "colour": 180,
              "tooltip": "Possible values for a DoubleSolenoid.\n\nMembers:\n\n  kOff : Off position.\n\n  kForward : Forward position.\n\n  kReverse : Reverse position."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.DoubleSolenoid.Value",
                "ENUM_VALUE": "kReverse"
              },
              "output": "wpilib.DoubleSolenoid.Value",
              "colour": 180,
              "tooltip": "Possible values for a DoubleSolenoid.\n\nMembers:\n\n  kOff : Off position.\n\n  kForward : Forward position.\n\n  kReverse : Reverse position."
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "DriverStation",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getAlliance"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current alliance from the FMS.\nIf the FMS is not connected, it is set from the team alliance setting on\nthe driver station.\n:returns: The alliance (red or blue) or an empty optional if the alliance is\ninvalid",
          "output": "Optional[wpilib._wpilib.DriverStation.Alliance]"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getBatteryVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the battery voltage.\n:returns: The battery voltage in Volts.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getControlState"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "More efficient way to determine what state the robot is in.\n:returns: booleans representing enabled, isautonomous, istest\n.. versionadded:: 2019.2.1\n.. note:: This function only exists in RobotPy",
          "output": "tuple[bool, bool, bool]"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getEventName"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the name of the competition event provided by the FMS.\n:returns: A string containing the event name",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getGameSpecificMessage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the game specific message provided by the FMS.\nIf the FMS is not connected, it is set from the game data setting on the\ndriver station.\n:returns: A string containing the game specific message.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getJoystickAxisType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns the types of Axes on a given joystick port.\n:param stick: The joystick port number and the target axis\n:param axis:  The analog axis value to read from the joystick.\n:returns: What type of axis the axis is reporting to be",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getJoystickIsXbox"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns a boolean indicating if the controller is an xbox controller.\n:param stick: The joystick port number\n:returns: A boolean that is true if the controller is an xbox controller.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getJoystickName"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns the name of the joystick at the given port.\n:param stick: The joystick port number\n:returns: The name of the joystick at the given port",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getJoystickType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns the type of joystick at a given port.\n:param stick: The joystick port number\n:returns: The HID type of joystick at the given port",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getLocation"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the driver station location from the FMS.\nIf the FMS is not connected, it is set from the team alliance setting on\nthe driver station.\nThis could return 1, 2, or 3.\n:returns: The location of the driver station (1-3, 0 for invalid)",
          "output": "Optional[int]"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getMatchNumber"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the match number provided by the FMS.\n:returns: The number of the match",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getMatchTime"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the approximate match time. The FMS does not send an official match\ntime to the robots, but does send an approximate match time. The value will\ncount down the time remaining in the current period (auto or teleop).\nWarning: This is not an official time (so it cannot be used to dispute ref\ncalls or guarantee that a function will trigger before the match ends).\nWhen connected to the real field, this number only changes in full\ninteger increments, and always counts down.\nWhen the DS is in practice mode, this number is a floating point number,\nand counts down.\nWhen the DS is in teleop or autonomous mode, this number is a floating\npoint number, and counts up.\nSimulation matches DS behavior without an FMS connected.\n:returns: Time remaining in current match period (auto or teleop) in seconds",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getMatchType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the type of match being played provided by the FMS.\n:returns: The match type enum (kNone, kPractice, kQualification,\nkElimination)",
          "output": "wpilib._wpilib.DriverStation.MatchType"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getReplayNumber"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the number of times the current match has been replayed from the\nFMS.\n:returns: The number of replays",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getStickAxis"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the value of the axis on a joystick.\nThis depends on the mapping of the joystick connected to the specified\nport.\n:param stick: The joystick to read.\n:param axis:  The analog axis value to read from the joystick.\n:returns: The value of the axis on the joystick.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getStickAxisCount"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns the number of axes on a given joystick port.\n:param stick: The joystick port number\n:returns: The number of axes on the indicated joystick",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getStickButton"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "The state of one joystick button. %Button indexes begin at 1.\n:param stick:  The joystick to read.\n:param button: The button index, beginning at 1.\n:returns: The state of the joystick button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getStickButtonCount"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns the number of buttons on a given joystick port.\n:param stick: The joystick port number\n:returns: The number of buttons on the indicated joystick",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getStickButtonPressed"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether one joystick button was pressed since the last check. %Button\nindexes begin at 1.\n:param stick:  The joystick to read.\n:param button: The button index, beginning at 1.\n:returns: Whether the joystick button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getStickButtonReleased"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether one joystick button was released since the last check. %Button\nindexes begin at 1.\n:param stick:  The joystick to read.\n:param button: The button index, beginning at 1.\n:returns: Whether the joystick button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getStickButtons"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "The state of the buttons on the joystick.\n:param stick: The joystick to read.\n:returns: The state of the buttons on the joystick.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getStickPOV"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the state of a POV on the joystick.\n:returns: the angle of the POV in degrees, or -1 if the POV is not pressed.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "getStickPOVCount"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns the number of POVs on a given joystick port.\n:param stick: The joystick port number\n:returns: The number of POVs on the indicated joystick",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isAutonomous"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding autonomous mode.\n:returns: True if the robot is being commanded to be in autonomous mode",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isAutonomousEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding autonomous mode and if it has enabled the\nrobot.\n:returns: True if the robot is being commanded to be in autonomous mode and\nenabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isDSAttached"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is attached.\n:returns: True if the DS is connected to the robot",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the robot is disabled.\n:returns: True if the robot is explicitly disabled or the DS is not connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isEStopped"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the robot is e-stopped.\n:returns: True if the robot is e-stopped",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS has enabled the robot.\n:returns: True if the robot is enabled and the DS is connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isFMSAttached"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Is the driver station attached to a Field Management System?\n:returns: True if the robot is competing on a field being controlled by a\nField Management System",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isJoystickConnected"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns if a joystick is connected to the Driver Station.\nThis makes a best effort guess by looking at the reported number of axis,\nbuttons, and POVs attached.\n:param stick: The joystick port number\n:returns: true if a joystick is connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isJoystickConnectionWarningSilenced"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether joystick connection warnings are silenced. This will\nalways return false when connected to the FMS.\n:returns: Whether joystick connection warnings are silenced.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isTeleop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding teleop mode.\n:returns: True if the robot is being commanded to be in teleop mode",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isTeleopEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding teleop mode and if it has enabled the robot.\n:returns: True if the robot is being commanded to be in teleop mode and\nenabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding test mode.\n:returns: True if the robot is being commanded to be in test mode",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "isTestEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the DS is commanding Test mode and if it has enabled the robot.\n:returns: True if the robot is being commanded to be in Test mode and\nenabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "provideRefreshedDataEventHandle"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Registers the given handle for DS data refresh notifications.\n:param handle: The event handle.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "refreshData"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Copy data from the DS task for the user. If no new data exists, it will\njust be returned, otherwise the data will be copied from the DS polling\nloop.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "removeRefreshedDataEventHandle"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Unregisters the given handle from DS data refresh notifications.\n:param handle: The event handle.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "silenceJoystickConnectionWarning"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Allows the user to specify whether they want joystick connection warnings\nto be printed to the console. This setting is ignored when the FMS is\nconnected -- warnings will always be on in that scenario.\n:param silence: Whether warning messages should be silenced.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "startDataLog"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.log.DataLog"
            },
            "ARG1": {
              "type": "bool",
              "shadow": {
                "type": "logic_boolean",
                "fields": {
                  "BOOL": "TRUE"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Starts logging DriverStation data to data log. Repeated calls are ignored.\n:param log:          data log\n:param logJoysticks: if true, log joystick data",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "FUNC": "waitForDsConnection"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Wait for a DS connection.\n:param timeout: timeout in seconds. 0 for infinite.\n:returns: true if connected, false if timeout",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "VAR": "Alliance"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "VAR": "MatchType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "VAR": "Alliance"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "VAR": "MatchType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "VAR": "kJoystickPorts"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.DriverStation",
            "VAR": "kJoystickPorts"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.DriverStation.Alliance",
            "ENUM_VALUE": "kBlue"
          },
          "output": "wpilib.DriverStation.Alliance",
          "colour": 180,
          "tooltip": "The robot alliance that the robot is a part of.\n\nMembers:\n\n  kRed : Red alliance.\n\n  kBlue : Blue alliance."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.DriverStation.Alliance",
            "ENUM_VALUE": "kRed"
          },
          "output": "wpilib.DriverStation.Alliance",
          "colour": 180,
          "tooltip": "The robot alliance that the robot is a part of.\n\nMembers:\n\n  kRed : Red alliance.\n\n  kBlue : Blue alliance."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.DriverStation.MatchType",
            "ENUM_VALUE": "kElimination"
          },
          "output": "wpilib.DriverStation.MatchType",
          "colour": 180,
          "tooltip": "The type of robot match that the robot is part of.\n\nMembers:\n\n  kNone : None.\n\n  kPractice : Practice.\n\n  kQualification : Qualification.\n\n  kElimination : Elimination."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.DriverStation.MatchType",
            "ENUM_VALUE": "kNone"
          },
          "output": "wpilib.DriverStation.MatchType",
          "colour": 180,
          "tooltip": "The type of robot match that the robot is part of.\n\nMembers:\n\n  kNone : None.\n\n  kPractice : Practice.\n\n  kQualification : Qualification.\n\n  kElimination : Elimination."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.DriverStation.MatchType",
            "ENUM_VALUE": "kPractice"
          },
          "output": "wpilib.DriverStation.MatchType",
          "colour": 180,
          "tooltip": "The type of robot match that the robot is part of.\n\nMembers:\n\n  kNone : None.\n\n  kPractice : Practice.\n\n  kQualification : Qualification.\n\n  kElimination : Elimination."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.DriverStation.MatchType",
            "ENUM_VALUE": "kQualification"
          },
          "output": "wpilib.DriverStation.MatchType",
          "colour": 180,
          "tooltip": "The type of robot match that the robot is part of.\n\nMembers:\n\n  kNone : None.\n\n  kPractice : Practice.\n\n  kQualification : Qualification.\n\n  kElimination : Elimination."
        },
        {
          "kind": "category",
          "name": "Alliance",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.DriverStation.Alliance",
                "ENUM_VALUE": "kBlue"
              },
              "output": "wpilib.DriverStation.Alliance",
              "colour": 180,
              "tooltip": "The robot alliance that the robot is a part of.\n\nMembers:\n\n  kRed : Red alliance.\n\n  kBlue : Blue alliance."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.DriverStation.Alliance",
                "ENUM_VALUE": "kRed"
              },
              "output": "wpilib.DriverStation.Alliance",
              "colour": 180,
              "tooltip": "The robot alliance that the robot is a part of.\n\nMembers:\n\n  kRed : Red alliance.\n\n  kBlue : Blue alliance."
            }
          ]
        },
        {
          "kind": "category",
          "name": "MatchType",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.DriverStation.MatchType",
                "ENUM_VALUE": "kElimination"
              },
              "output": "wpilib.DriverStation.MatchType",
              "colour": 180,
              "tooltip": "The type of robot match that the robot is part of.\n\nMembers:\n\n  kNone : None.\n\n  kPractice : Practice.\n\n  kQualification : Qualification.\n\n  kElimination : Elimination."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.DriverStation.MatchType",
                "ENUM_VALUE": "kNone"
              },
              "output": "wpilib.DriverStation.MatchType",
              "colour": 180,
              "tooltip": "The type of robot match that the robot is part of.\n\nMembers:\n\n  kNone : None.\n\n  kPractice : Practice.\n\n  kQualification : Qualification.\n\n  kElimination : Elimination."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.DriverStation.MatchType",
                "ENUM_VALUE": "kPractice"
              },
              "output": "wpilib.DriverStation.MatchType",
              "colour": 180,
              "tooltip": "The type of robot match that the robot is part of.\n\nMembers:\n\n  kNone : None.\n\n  kPractice : Practice.\n\n  kQualification : Qualification.\n\n  kElimination : Elimination."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.DriverStation.MatchType",
                "ENUM_VALUE": "kQualification"
              },
              "output": "wpilib.DriverStation.MatchType",
              "colour": 180,
              "tooltip": "The type of robot match that the robot is part of.\n\nMembers:\n\n  kNone : None.\n\n  kPractice : Practice.\n\n  kQualification : Qualification.\n\n  kElimination : Elimination."
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "DutyCycle",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.DutyCycle",
            "FUNC": "wpilib.DutyCycle"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.DutyCycle"
            },
            "ARG1": {
              "type": "wpilib._wpilib.DigitalSource"
            }
          },
          "colour": 300,
          "tooltip": "Constructs a DutyCycle input from a DigitalSource input.\nThis class does not own the inputted source.\n:param source: The DigitalSource to use.",
          "output": "wpilib.DutyCycle"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycle",
            "FUNC": "getFPGAIndex"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the FPGA index for the DutyCycle.\n:returns: the FPGA index",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycle",
            "FUNC": "getFrequency"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the frequency of the duty cycle signal.\n:returns: frequency in Hertz",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycle",
            "FUNC": "getHighTime"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the raw high time of the duty cycle signal.\n:returns: high time of last pulse",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycle",
            "FUNC": "getOutput"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the output ratio of the duty cycle signal.\n0 means always low, 1 means always high.\n:returns: output ratio between 0 and 1",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycle",
            "FUNC": "getSourceChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel of the source.\n:returns: the source channel",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycle",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "DutyCycleEncoder",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the encoder value since the last reset.\nThis is reported in rotations since the last reset.\n:returns: the encoder value in rotations",
          "output": "wpimath.units.turns"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "getAbsolutePosition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the absolute position of the duty cycle encoder encoder.\nGetAbsolutePosition() - GetPositionOffset() will give an encoder\nabsolute position relative to the last reset. This could potentially be\nnegative, which needs to be accounted for.\nThis will not account for rollovers, and will always be just the raw\nabsolute position.\n:returns: the absolute position",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "getDistance"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the distance the sensor has driven since the last reset as scaled by\nthe value from SetDistancePerRotation.\n:returns: The distance driven since the last reset",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "getDistancePerRotation"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the distance per rotation for this encoder.\n:returns: The scale factor that will be used to convert rotation to useful\nunits.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "getFPGAIndex"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the FPGA index for the DutyCycleEncoder.\n:returns: the FPGA index",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "getFrequency"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the frequency in Hz of the duty cycle signal from the encoder.\n:returns: duty cycle frequency in Hz",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "getPositionOffset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the offset of position relative to the last reset.\nGetAbsolutePosition() - GetPositionOffset() will give an encoder absolute\nposition relative to the last reset. This could potentially be negative,\nwhich needs to be accounted for.\n:returns: the position offset",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "getSourceChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel of the source.\n:returns: the source channel",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "isConnected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the sensor is connected\nThis uses the duty cycle frequency to determine if the sensor is connected.\nBy default, a value of 100 Hz is used as the threshold, and this value can\nbe changed with SetConnectedFrequencyThreshold.\n:returns: true if the sensor is connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "reset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Reset the Encoder distance to zero.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "setConnectedFrequencyThreshold"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Change the frequency threshold for detecting connection used by\nIsConnected.\n:param frequency: the minimum frequency in Hz.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "setDistancePerRotation"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the distance per rotation of the encoder. This sets the multiplier used\nto determine the distance driven based on the rotation value from the\nencoder. Set this value based on the how far the mechanism travels in 1\nrotation of the encoder, and factor in gearing reductions following the\nencoder shaft. This distance can be in any units you like, linear or\nangular.\n:param distancePerRotation: the distance per rotation of the encoder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "setDutyCycleRange"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the encoder duty cycle range. As the encoder needs to maintain a duty\ncycle, the duty cycle cannot go all the way to 0% or all the way to 100%.\nFor example, an encoder with a 4096 us period might have a minimum duty\ncycle of 1 us / 4096 us and a maximum duty cycle of 4095 / 4096 us. Setting\nthe range will result in an encoder duty cycle less than or equal to the\nminimum being output as 0 rotation, the duty cycle greater than or equal to\nthe maximum being output as 1 rotation, and values in between linearly\nscaled from 0 to 1.\n:param min: minimum duty cycle (0-1 range)\n:param max: maximum duty cycle (0-1 range)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.DutyCycleEncoder",
            "FUNC": "setPositionOffset"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the position offset.\nThis must be in the range of 0-1.\n:param offset: the offset",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "Encoder",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets the current count.\nReturns the current count on the Encoder. This method compensates for the\ndecoding type.\n:returns: Current count from the Encoder adjusted for the 1x, 2x, or 4x scale\nfactor.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getDirection"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "The last direction the encoder value changed.\n:returns: The last direction the encoder value changed.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getDistance"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the distance the robot has driven since the last reset.\n:returns: The distance driven since the last reset as scaled by the value\nfrom SetDistancePerPulse().",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getDistancePerPulse"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the distance per pulse for this encoder.\n:returns: The scale factor that will be used to convert pulses to useful\nunits.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getEncodingScale"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "The encoding scale factor 1x, 2x, or 4x, per the requested encodingType.\nUsed to divide raw edge counts down to spec'd counts.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getFPGAIndex"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getPeriod"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the period of the most recent pulse.\nReturns the period of the most recent Encoder pulse in seconds. This method\ncompensates for the decoding type.\nWarning: This returns unscaled periods. Use GetRate() for rates that are\nscaled using the value from SetDistancePerPulse().\n:deprecated: Use getRate() in favor of this method.\n:returns: Period in seconds of the most recent pulse.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getRate"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current rate of the encoder.\nUnits are distance per second as scaled by the value from\nSetDistancePerPulse().\n:returns: The current rate of the encoder.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getRaw"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets the raw value from the encoder.\nThe raw value is the actual count unscaled by the 1x, 2x, or 4x scale\nfactor.\n:returns: Current raw count from the encoder",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getSamplesToAverage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period.\nPerform averaging to account for mechanical imperfections or as\noversampling to increase resolution.\n:returns: The number of samples being averaged (from 1 to 127)",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "getStopped"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the encoder is stopped.\nUsing the MaxPeriod value, a boolean is returned that is true if the\nencoder is considered stopped and false if it is still moving. A stopped\nencoder is one where the most recent pulse width exceeds the MaxPeriod.\n:returns: True if the encoder is considered stopped.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "reset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Reset the Encoder distance to zero.\nResets the current count to zero on the encoder.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "setDistancePerPulse"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the distance per pulse for this encoder.\nThis sets the multiplier used to determine the distance driven based on the\ncount value from the encoder.\nDo not include the decoding type in this scale.  The library already\ncompensates for the decoding type.\nSet this value based on the encoder's rated Pulses per Revolution and\nfactor in gearing reductions following the encoder shaft.\nThis distance can be in any units you like, linear or angular.\n:param distancePerPulse: The scale factor that will be used to convert\npulses to useful units.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "setMaxPeriod"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Sets the maximum period for stopped detection.\nSets the value that represents the maximum period of the Encoder before it\nwill assume that the attached device is stopped. This timeout allows users\nto determine if the wheels or other shaft has stopped rotating.\nThis method compensates for the decoding type.\n:deprecated: Use SetMinRate() in favor of this method.  This takes unscaled\nperiods and SetMinRate() scales using value from\nSetDistancePerPulse().\n:param maxPeriod: The maximum time between rising and falling edges before\nthe FPGA will report the device stopped. This is expressed\nin seconds.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "setMinRate"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the minimum rate of the device before the hardware reports it stopped.\n:param minRate: The minimum rate.  The units are in distance per second as\nscaled by the value from SetDistancePerPulse().",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "setReverseDirection"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set the direction sensing for this encoder.\nThis sets the direction sensing on the encoder so that it could count in\nthe correct software direction regardless of the mounting.\n:param reverseDirection: true if the encoder direction should be reversed",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "setSamplesToAverage"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the Samples to Average which specifies the number of samples of the\ntimer to average when calculating the period.\nPerform averaging to account for mechanical imperfections or as\noversampling to increase resolution.\n:param samplesToAverage: The number of samples to average from 1 to 127.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "FUNC": "setSimDevice"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Indicates this encoder is used by a simulated device.\n:param device: simulated device handle",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "VAR": "EncodingType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "VAR": "IndexingType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "VAR": "EncodingType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Encoder",
            "VAR": "IndexingType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
            "ENUM_VALUE": "k1X"
          },
          "output": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
          "colour": 180,
          "tooltip": "Members:\n\n  k1X\n\n  k2X\n\n  k4X"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
            "ENUM_VALUE": "k2X"
          },
          "output": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
          "colour": 180,
          "tooltip": "Members:\n\n  k1X\n\n  k2X\n\n  k4X"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
            "ENUM_VALUE": "k4X"
          },
          "output": "wpilib.interfaces._interfaces.CounterBase.EncodingType",
          "colour": 180,
          "tooltip": "Members:\n\n  k1X\n\n  k2X\n\n  k4X"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Encoder.IndexingType",
            "ENUM_VALUE": "kResetOnFallingEdge"
          },
          "output": "wpilib.Encoder.IndexingType",
          "colour": 180,
          "tooltip": "Encoder indexing types.\n\nMembers:\n\n  kResetWhileHigh : Reset while the signal is high.\n\n  kResetWhileLow : Reset while the signal is low.\n\n  kResetOnFallingEdge : Reset on falling edge of the signal.\n\n  kResetOnRisingEdge : Reset on rising edge of the signal."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Encoder.IndexingType",
            "ENUM_VALUE": "kResetOnRisingEdge"
          },
          "output": "wpilib.Encoder.IndexingType",
          "colour": 180,
          "tooltip": "Encoder indexing types.\n\nMembers:\n\n  kResetWhileHigh : Reset while the signal is high.\n\n  kResetWhileLow : Reset while the signal is low.\n\n  kResetOnFallingEdge : Reset on falling edge of the signal.\n\n  kResetOnRisingEdge : Reset on rising edge of the signal."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Encoder.IndexingType",
            "ENUM_VALUE": "kResetWhileHigh"
          },
          "output": "wpilib.Encoder.IndexingType",
          "colour": 180,
          "tooltip": "Encoder indexing types.\n\nMembers:\n\n  kResetWhileHigh : Reset while the signal is high.\n\n  kResetWhileLow : Reset while the signal is low.\n\n  kResetOnFallingEdge : Reset on falling edge of the signal.\n\n  kResetOnRisingEdge : Reset on rising edge of the signal."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Encoder.IndexingType",
            "ENUM_VALUE": "kResetWhileLow"
          },
          "output": "wpilib.Encoder.IndexingType",
          "colour": 180,
          "tooltip": "Encoder indexing types.\n\nMembers:\n\n  kResetWhileHigh : Reset while the signal is high.\n\n  kResetWhileLow : Reset while the signal is low.\n\n  kResetOnFallingEdge : Reset on falling edge of the signal.\n\n  kResetOnRisingEdge : Reset on rising edge of the signal."
        },
        {
          "kind": "category",
          "name": "IndexingType",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Encoder.IndexingType",
                "ENUM_VALUE": "kResetOnFallingEdge"
              },
              "output": "wpilib.Encoder.IndexingType",
              "colour": 180,
              "tooltip": "Encoder indexing types.\n\nMembers:\n\n  kResetWhileHigh : Reset while the signal is high.\n\n  kResetWhileLow : Reset while the signal is low.\n\n  kResetOnFallingEdge : Reset on falling edge of the signal.\n\n  kResetOnRisingEdge : Reset on rising edge of the signal."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Encoder.IndexingType",
                "ENUM_VALUE": "kResetOnRisingEdge"
              },
              "output": "wpilib.Encoder.IndexingType",
              "colour": 180,
              "tooltip": "Encoder indexing types.\n\nMembers:\n\n  kResetWhileHigh : Reset while the signal is high.\n\n  kResetWhileLow : Reset while the signal is low.\n\n  kResetOnFallingEdge : Reset on falling edge of the signal.\n\n  kResetOnRisingEdge : Reset on rising edge of the signal."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Encoder.IndexingType",
                "ENUM_VALUE": "kResetWhileHigh"
              },
              "output": "wpilib.Encoder.IndexingType",
              "colour": 180,
              "tooltip": "Encoder indexing types.\n\nMembers:\n\n  kResetWhileHigh : Reset while the signal is high.\n\n  kResetWhileLow : Reset while the signal is low.\n\n  kResetOnFallingEdge : Reset on falling edge of the signal.\n\n  kResetOnRisingEdge : Reset on rising edge of the signal."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Encoder.IndexingType",
                "ENUM_VALUE": "kResetWhileLow"
              },
              "output": "wpilib.Encoder.IndexingType",
              "colour": 180,
              "tooltip": "Encoder indexing types.\n\nMembers:\n\n  kResetWhileHigh : Reset while the signal is high.\n\n  kResetWhileLow : Reset while the signal is low.\n\n  kResetOnFallingEdge : Reset on falling edge of the signal.\n\n  kResetOnRisingEdge : Reset on rising edge of the signal."
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "Field2d",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Field2d",
            "FUNC": "wpilib.Field2d"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Field2d"
            }
          },
          "colour": 300,
          "tooltip": "",
          "output": "wpilib.Field2d"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Field2d",
            "FUNC": "getObject"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Get or create a field object.\n:returns: Field object",
          "output": "wpilib._wpilib.FieldObject2d"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Field2d",
            "FUNC": "getRobotObject"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the robot object.\n:returns: Field object for robot",
          "output": "wpilib._wpilib.FieldObject2d"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Field2d",
            "FUNC": "getRobotPose"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the robot pose.\n:returns: 2D pose",
          "output": "wpimath.geometry._geometry.Pose2d"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Field2d",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "ntcore._ntcore.NTSendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "FieldObject2d",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.FieldObject2d",
            "FUNC": "getPose"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the pose.\n:returns: 2D pose, or 0,0,0 if unknown / does not exist",
          "output": "wpimath.geometry._geometry.Pose2d"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.FieldObject2d",
            "FUNC": "getPoses"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get multiple poses.\n:param obj: Object entry\n:returns: vector of 2D poses",
          "output": "list[wpimath.geometry._geometry.Pose2d]"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.FieldObject2d",
            "FUNC": "setPoses"
          },
          "inputs": {
            "ARG0": {
              "type": "List[wpimath.geometry._geometry.Pose2d]"
            }
          },
          "colour": 270,
          "tooltip": "Set multiple poses from an array of Pose objects.\nThe total number of poses is limited to 85.\n:param poses: array of 2D poses",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.FieldObject2d",
            "FUNC": "setTrajectory"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath._controls._controls.trajectory.Trajectory"
            }
          },
          "colour": 270,
          "tooltip": "Sets poses from a trajectory.\n:param trajectory: The trajectory from which poses should be added.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "I2C",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "wpilib.I2C"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.I2C"
            },
            "ARG1": {
              "type": "wpilib._wpilib.I2C.Port"
            },
            "ARG2": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor.\n:param port:          The I2C port to which the device is connected.\n:param deviceAddress: The address of the device on the I2C bus.",
          "output": "wpilib.I2C"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "addressOnly"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Attempt to address a device on the I2C bus.\nThis allows you to figure out if there is a device on the I2C bus that\nresponds to the address specified in the constructor.\n:returns: Transfer Aborted... false for success, true for aborted.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "getDeviceAddress"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns I2C device address.\n:returns: I2C device address.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "getPort"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns I2C port.\n:returns: I2C port.",
          "output": "wpilib._wpilib.I2C.Port"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "read"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Execute a read transaction with the device.\nRead bytes from a device.\nMost I2C devices will auto-increment the register pointer internally\nallowing you to read consecutive registers on a device in a single\ntransaction.\n:param registerAddress: The register to read first in the transaction.\n:param count:           The number of bytes to read in the transaction.\n:param data:            A pointer to the array of bytes to store the data\nread from the device.\n:returns: Transfer Aborted... false for success, true for aborted.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "readOnly"
          },
          "inputs": {
            "ARG0": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Execute a read only transaction with the device.\nRead bytes from a device. This method does not write any data to prompt the\ndevice.\n:param buffer: A pointer to the array of bytes to store the data read from\nthe device.\n:param count:  The number of bytes to read in the transaction.\n:returns: Transfer Aborted... false for success, true for aborted.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "transaction"
          },
          "inputs": {
            "ARG0": {
              "type": "Buffer"
            },
            "ARG1": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Generic transaction.\nThis is a lower-level interface to the I2C hardware giving you more control\nover each transaction. If you intend to write multiple bytes in the same\ntransaction and do not plan to receive anything back, use writeBulk()\ninstead. Calling this with a receiveSize of 0 will result in an error.\n:param dataToSend:   Buffer of data to send as part of the transaction.\n:param sendSize:     Number of bytes to send as part of the transaction.\n:param dataReceived: Buffer to read data into.\n:param receiveSize:  Number of bytes to read from the device.\n:returns: Transfer Aborted... false for success, true for aborted.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "verifySensor"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Verify that a device's registers contain expected values.\nMost devices will have a set of registers that contain a known value that\ncan be used to identify them.  This allows an I2C device driver to easily\nverify that the device contains the expected value.\n@pre The device must support and be configured to use register\nauto-increment.\n:param registerAddress: The base register to start reading from the device.\n:param count:           The size of the field to be verified.\n:param expected:        A buffer containing the values expected from the\ndevice.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "write"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Execute a write transaction with the device.\nWrite a single byte to a register on a device and wait until the\ntransaction is complete.\n:param registerAddress: The address of the register on the device to be\nwritten.\n:param data:            The byte to write to the register on the device.\n:returns: Transfer Aborted... false for success, true for aborted.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.I2C",
            "FUNC": "writeBulk"
          },
          "inputs": {
            "ARG0": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Execute a bulk write transaction with the device.\nWrite multiple bytes to a device and wait until the\ntransaction is complete.\n:param data:  The data to write to the register on the device.\n:param count: The number of bytes to be written.\n:returns: Transfer Aborted... false for success, true for aborted.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.I2C",
            "VAR": "Port"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.I2C",
            "VAR": "Port"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.I2C.Port",
            "ENUM_VALUE": "kMXP"
          },
          "output": "wpilib.I2C.Port",
          "colour": 180,
          "tooltip": "I2C connection ports.\n\nMembers:\n\n  kOnboard : Onboard I2C port.\n\n  kMXP : MXP (roboRIO MXP) I2C port."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.I2C.Port",
            "ENUM_VALUE": "kOnboard"
          },
          "output": "wpilib.I2C.Port",
          "colour": 180,
          "tooltip": "I2C connection ports.\n\nMembers:\n\n  kOnboard : Onboard I2C port.\n\n  kMXP : MXP (roboRIO MXP) I2C port."
        },
        {
          "kind": "category",
          "name": "Port",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.I2C.Port",
                "ENUM_VALUE": "kMXP"
              },
              "output": "wpilib.I2C.Port",
              "colour": 180,
              "tooltip": "I2C connection ports.\n\nMembers:\n\n  kOnboard : Onboard I2C port.\n\n  kMXP : MXP (roboRIO MXP) I2C port."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.I2C.Port",
                "ENUM_VALUE": "kOnboard"
              },
              "output": "wpilib.I2C.Port",
              "colour": 180,
              "tooltip": "I2C connection ports.\n\nMembers:\n\n  kOnboard : Onboard I2C port.\n\n  kMXP : MXP (roboRIO MXP) I2C port."
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "IterativeRobotBase",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "wpilib.IterativeRobotBase"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.IterativeRobotBase"
            },
            "ARG1": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for IterativeRobotBase.\n:param period: Period.",
          "output": "wpilib.IterativeRobotBase"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "autonomousExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for autonomous mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits autonomous mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "autonomousInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for autonomous mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time the robot enters autonomous mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "autonomousPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for autonomous mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in\nautonomous mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "disabledExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for disabled mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits disabled mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "disabledInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for disabled mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time\nthe robot enters disabled mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "disabledPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for disabled mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in disabled\nmode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "driverStationConnected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Code that needs to know the DS state should go here.\nUsers should override this method for initialization that needs to occur\nafter the DS is connected, such as needing the alliance information.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "enableLiveWindowInTest"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Sets whether LiveWindow operation is enabled during test mode.\n:param testLW: True to enable, false to disable. Defaults to false.\n@throws if called in test mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "endCompetition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Ends the main loop in StartCompetition().",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "getControlState"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "More efficient way to determine what state the robot is in.\n:returns: booleans representing enabled, isautonomous, istest\n.. versionadded:: 2019.2.1\n.. note:: This function only exists in RobotPy",
          "output": "tuple[bool, bool, bool]"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "getPeriod"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets time period between calls to Periodic() functions.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "getRuntimeType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current runtime type.\n:returns: Current runtime type.",
          "output": "wpilib._wpilib.RuntimeType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isAutonomous"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Autonomous mode.\n:returns: True if the robot is currently operating Autonomously as determined\nby the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isAutonomousEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Autonomous mode and enabled.\n:returns: True if the robot us currently operating Autonomously while enabled\nas determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the Robot is currently disabled.\n:returns: True if the Robot is currently disabled by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the Robot is currently enabled.\n:returns: True if the Robot is currently enabled by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isLiveWindowEnabledInTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether LiveWindow operation is enabled during test mode.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isReal"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the robot is real.\n:returns: If the robot is running in the real world.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isSimulation"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the robot is a simulation.\n:returns: If the robot is running in simulation.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isTeleop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Operator Control mode.\n:returns: True if the robot is currently operating in Tele-Op mode as\ndetermined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isTeleopEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is current in Operator Control mode and enabled.\n:returns: True if the robot is currently operating in Tele-Op mode while\nenabled as determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Test mode.\n:returns: True if the robot is currently running in Test mode as determined\nby the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "isTestEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is current in Test mode and enabled.\n:returns: True if the robot is currently operating in Test mode while\nenabled as determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "main"
          },
          "inputs": {
            "ARG0": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Starting point for the application",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "robotInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Robot-wide initialization code should go here.\nUsers should override this method for default Robot-wide initialization\nwhich will be called when the robot is first powered on. It will be called\nexactly one time.\nWarning: the Driver Station \"Robot Code\" light and FMS \"Robot Ready\"\nindicators will be off until RobotInit() exits. Code in RobotInit() that\nwaits for enable will cause the robot to never indicate that the code is\nready, causing the robot to be bypassed in a match.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "robotPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for all modes should go here.\nThis function is called each time a new packet is received from the driver\nstation.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "setNetworkTablesFlushEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enables or disables flushing NetworkTables every loop iteration.\nBy default, this is enabled.\n:param enabled: True to enable, false to disable",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "startCompetition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Start the main robot code. This function will be called once and should not\nexit until signalled by EndCompetition()",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "teleopExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for teleop mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits teleop mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "teleopInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for teleop mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time the robot enters teleop mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "teleopPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for teleop mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in teleop\nmode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "testExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for test mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits test mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "testInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for test mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time the robot enters test mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "FUNC": "testPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for test mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in test\nmode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "VAR": "logger"
          },
          "output": "logging.Logger",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.IterativeRobotBase",
            "VAR": "logger"
          },
          "inputs": {
            "VALUE": {
              "type": "logging.Logger"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        }
      ]
    },
    {
      "kind": "category",
      "name": "Jaguar",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "wpilib.Jaguar"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Jaguar"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a Jaguar connected via PWM.\n:param channel: The PWM channel that the Jaguar is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.Jaguar"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Jaguar",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "Joystick",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "wpilib.Joystick"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Joystick"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct an instance of a joystick.\nThe joystick index is the USB port on the Driver Station.\n:param port: The port on the Driver Station that the joystick is plugged\ninto (0-5).",
          "output": "wpilib.Joystick"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "POVCenter"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the center of a POV on the\nHID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "POVDown"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 180 degree angle (down)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 180 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "POVDownLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 225 degree angle (down\nleft) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 225 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "POVDownRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 135 degree angle (right\ndown) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 135 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "POVLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 270 degree angle (left)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 270 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "POVRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 90 degree angle (right)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 90 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "POVUp"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 0 degree angle (up) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 0 degree angle of a POV on\nthe HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "POVUpLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 315 degree angle (left\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 315 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "POVUpRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 45 degree angle (right\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 45 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "axisGreaterThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is greater than\nthe provided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "axisLessThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is less than the\nprovided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "button"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around this button's digital signal.\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n:returns: an event instance representing the button's digital signal attached\nto the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getAxisCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of axes for the HID.\n:returns: the number of axis for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getAxisType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the axis type of a joystick axis.\n:returns: the axis type of a joystick axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getButtonCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of buttons for the HID.\n:returns: the number of buttons on the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getDirectionDegrees"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the direction of the vector formed by the joystick and its origin\nin degrees.\n:deprecated: Use GetDirection() instead.\n:returns: The direction of the vector in degrees",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getDirectionRadians"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the direction of the vector formed by the joystick and its origin\nin radians.\n:deprecated: Use GetDirection() instead.\n:returns: The direction of the vector in radians",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getMagnitude"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the magnitude of the direction vector formed by the joystick's\ncurrent position relative to its origin.\n:returns: The magnitude of the direction vector",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getName"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the name of the HID.\n:returns: the name of the HID.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getPOV"
          },
          "inputs": {
            "ARG0": {
              "type": "int",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Get the angle in degrees of a POV on the HID.\nThe POV angles start at 0 in the up direction, and increase clockwise\n(e.g. right is 90, upper-left is 315).\n:param pov: The index of the POV to read (starting at 0)\n:returns: the angle of the POV in degrees, or -1 if the POV is not pressed.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getPOVCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of POVs for the HID.\n:returns: the number of POVs for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getPort"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the port number of the HID.\n:returns: The port number of the HID.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getRawAxis"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the value of the axis.\n:param axis: The axis to read, starting at 0.\n:returns: The value of the axis.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getRawButton"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the button value (starting at button 1).\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n:param button: The button number to be read (starting at 1)\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getRawButtonPressed"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getRawButtonReleased"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getThrottle"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the throttle value of the current joystick.\nThis depends on the mapping of the joystick connected to the current port.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getThrottleChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel currently associated with the throttle axis.\n:returns: The channel for the axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getTop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the state of the top button on the joystick.\nLook up which button has been assigned to the top and read its state.\n:returns: The state of the top button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getTopPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the top button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getTopReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the top button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getTrigger"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the state of the trigger on the joystick.\nLook up which button has been assigned to the trigger and read its state.\n:returns: The state of the trigger.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getTriggerPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the trigger was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getTriggerReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the trigger was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getTwist"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the twist value of the current joystick.\nThis depends on the mapping of the joystick connected to the current port.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getTwistChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel currently associated with the twist axis.\n:returns: The channel for the axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the type of the HID.\n:returns: the type of the HID.",
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the X value of the current joystick.\nThis depends on the mapping of the joystick connected to the current port.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getXChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel currently associated with the X axis.\n:returns: The channel for the axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Y value of the current joystick.\nThis depends on the mapping of the joystick connected to the current port.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getYChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel currently associated with the Y axis.\n:returns: The channel for the axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getZ"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Z value of the current joystick.\nThis depends on the mapping of the joystick connected to the current port.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "getZChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel currently associated with the Z axis.\n:returns: The channel for the axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "isConnected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the HID is connected.\n:returns: true if the HID is connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "setOutput"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set a single HID output value for the HID.\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "setOutputs"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set all output values for the HID.\n:param value: The 32 bit output value (1 bit for each output)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "setRumble"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.interfaces._interfaces.GenericHID.RumbleType"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the rumble output for the HID.\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "setThrottleChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the channel associated with the throttle axis.\n:param channel: The channel to set the axis to.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "setTwistChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the channel associated with the twist axis.\n:param channel: The channel to set the axis to.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "setXChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the channel associated with the X axis.\n:param channel: The channel to set the axis to.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "setYChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the channel associated with the Y axis.\n:param channel: The channel to set the axis to.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "setZChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the channel associated with the Z axis.\n:param channel: The channel to set the axis to.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "top"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the top button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the top button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "FUNC": "trigger"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the trigger button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the trigger button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "AxisType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "ButtonType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "HIDType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "RumbleType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "AxisType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "ButtonType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "HIDType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "RumbleType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultThrottleChannel"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultTwistChannel"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultXChannel"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultYChannel"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultZChannel"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultThrottleChannel"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultTwistChannel"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultXChannel"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultYChannel"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Joystick",
            "VAR": "kDefaultZChannel"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Joystick.AxisType",
            "ENUM_VALUE": "kThrottleAxis"
          },
          "output": "wpilib.Joystick.AxisType",
          "colour": 180,
          "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Joystick.AxisType",
            "ENUM_VALUE": "kTwistAxis"
          },
          "output": "wpilib.Joystick.AxisType",
          "colour": 180,
          "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Joystick.AxisType",
            "ENUM_VALUE": "kXAxis"
          },
          "output": "wpilib.Joystick.AxisType",
          "colour": 180,
          "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Joystick.AxisType",
            "ENUM_VALUE": "kYAxis"
          },
          "output": "wpilib.Joystick.AxisType",
          "colour": 180,
          "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Joystick.AxisType",
            "ENUM_VALUE": "kZAxis"
          },
          "output": "wpilib.Joystick.AxisType",
          "colour": 180,
          "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Joystick.ButtonType",
            "ENUM_VALUE": "kTopButton"
          },
          "output": "wpilib.Joystick.ButtonType",
          "colour": 180,
          "tooltip": "Represents a digital button on a joystick.\n\nMembers:\n\n  kTriggerButton : kTrigger.\n\n  kTopButton : kTop."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.Joystick.ButtonType",
            "ENUM_VALUE": "kTriggerButton"
          },
          "output": "wpilib.Joystick.ButtonType",
          "colour": 180,
          "tooltip": "Represents a digital button on a joystick.\n\nMembers:\n\n  kTriggerButton : kTrigger.\n\n  kTopButton : kTop."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHID1stPerson"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDDriving"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDFlight"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDJoystick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadeStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDancePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDrumKit"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputFlightStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar2"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar3"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputWheel"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kBothRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kLeftRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kRightRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "category",
          "name": "AxisType",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Joystick.AxisType",
                "ENUM_VALUE": "kThrottleAxis"
              },
              "output": "wpilib.Joystick.AxisType",
              "colour": 180,
              "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Joystick.AxisType",
                "ENUM_VALUE": "kTwistAxis"
              },
              "output": "wpilib.Joystick.AxisType",
              "colour": 180,
              "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Joystick.AxisType",
                "ENUM_VALUE": "kXAxis"
              },
              "output": "wpilib.Joystick.AxisType",
              "colour": 180,
              "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Joystick.AxisType",
                "ENUM_VALUE": "kYAxis"
              },
              "output": "wpilib.Joystick.AxisType",
              "colour": 180,
              "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Joystick.AxisType",
                "ENUM_VALUE": "kZAxis"
              },
              "output": "wpilib.Joystick.AxisType",
              "colour": 180,
              "tooltip": "Represents an analog axis on a joystick.\n\nMembers:\n\n  kXAxis : X axis.\n\n  kYAxis : Y axis.\n\n  kZAxis : Z axis.\n\n  kTwistAxis : Twist axis.\n\n  kThrottleAxis : Throttle axis."
            }
          ]
        },
        {
          "kind": "category",
          "name": "ButtonType",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Joystick.ButtonType",
                "ENUM_VALUE": "kTopButton"
              },
              "output": "wpilib.Joystick.ButtonType",
              "colour": 180,
              "tooltip": "Represents a digital button on a joystick.\n\nMembers:\n\n  kTriggerButton : kTrigger.\n\n  kTopButton : kTop."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.Joystick.ButtonType",
                "ENUM_VALUE": "kTriggerButton"
              },
              "output": "wpilib.Joystick.ButtonType",
              "colour": 180,
              "tooltip": "Represents a digital button on a joystick.\n\nMembers:\n\n  kTriggerButton : kTrigger.\n\n  kTopButton : kTop."
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "LiveWindow",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.LiveWindow",
            "FUNC": "disableAllTelemetry"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Disable ALL telemetry.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.LiveWindow",
            "FUNC": "disableTelemetry"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.Sendable"
            }
          },
          "colour": 270,
          "tooltip": "Disable telemetry for a single component.\n:param component: sendable",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.LiveWindow",
            "FUNC": "enableAllTelemetry"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Enable ALL telemetry.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.LiveWindow",
            "FUNC": "enableTelemetry"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.Sendable"
            }
          },
          "colour": 270,
          "tooltip": "Enable telemetry for a single component.\n:param component: sendable",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.LiveWindow",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns true if LiveWindow is enabled.\n:returns: True if LiveWindow is enabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.LiveWindow",
            "FUNC": "setDisabledCallback"
          },
          "inputs": {
            "ARG0": {
              "type": "Callable[[]"
            },
            "ARG1": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "Sets function to be called when LiveWindow is disabled.\n:param func: function (or nullptr for none)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.LiveWindow",
            "FUNC": "setEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Change the enabled status of LiveWindow.\nIf it changes to enabled, start livewindow running otherwise stop it",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.LiveWindow",
            "FUNC": "setEnabledCallback"
          },
          "inputs": {
            "ARG0": {
              "type": "Callable[[]"
            },
            "ARG1": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "Sets function to be called when LiveWindow is enabled.\n:param func: function (or nullptr for none)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.LiveWindow",
            "FUNC": "updateValues"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Tell all the sensors to update (send) their values.\nActuators are handled through callbacks on their value changing from the\nSmartDashboard widgets.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "Mechanism2d",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Mechanism2d",
            "FUNC": "getRoot"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Get or create a root in this Mechanism2d with the given name and\nposition.\nIf a root with the given name already exists, the given x and y\ncoordinates are not used.\n:param name: the root name\n:param x:    the root x coordinate\n:param y:    the root y coordinate\n:returns: a new root object, or the existing one with the given name.",
          "output": "wpilib._wpilib.MechanismRoot2d"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Mechanism2d",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "ntcore._ntcore.NTSendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Mechanism2d",
            "FUNC": "setBackgroundColor"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Color8Bit"
            }
          },
          "colour": 270,
          "tooltip": "Set the Mechanism2d background color.\n:param color: the new background color",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "MechanismLigament2d",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismLigament2d",
            "FUNC": "getAngle"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the ligament's angle relative to its parent.\n:returns: the angle",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismLigament2d",
            "FUNC": "getColor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the ligament color.\n:returns: the color of the line",
          "output": "wpilib._wpilib.Color8Bit"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismLigament2d",
            "FUNC": "getLength"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the ligament length.\n:returns: the line length",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismLigament2d",
            "FUNC": "getLineWeight"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the line thickness.\n:returns: the line thickness",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismLigament2d",
            "FUNC": "getName"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the object's name.\n:returns: the object's name relative to its parent.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismLigament2d",
            "FUNC": "setAngle"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.degrees"
            }
          },
          "colour": 270,
          "tooltip": "Set the ligament's angle relative to its parent.\n:param angle: the angle",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismLigament2d",
            "FUNC": "setColor"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Color8Bit"
            }
          },
          "colour": 270,
          "tooltip": "Set the ligament color.\n:param color: the color of the line",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismLigament2d",
            "FUNC": "setLength"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the ligament's length.\n:param length: the line length",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismLigament2d",
            "FUNC": "setLineWeight"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the line thickness.\n:param lineWidth: the line thickness",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "MechanismObject2d",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismObject2d",
            "FUNC": "getName"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the object's name.\n:returns: the object's name relative to its parent.",
          "output": "str"
        }
      ]
    },
    {
      "kind": "category",
      "name": "MechanismRoot2d",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismRoot2d",
            "FUNC": "getName"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.MechanismRoot2d",
            "FUNC": "setPosition"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the root's position.\n:param x: new x coordinate\n:param y: new y coordinate",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "PS4Controller",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "wpilib.PS4Controller"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PS4Controller"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct an instance of an PS4 controller.\nThe controller index is the USB port on the Driver Station.\n:param port: The port on the Driver Station that the controller is plugged\ninto (0-5).",
          "output": "wpilib.PS4Controller"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "L1"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the L1 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the L1 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "L2"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the L2 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the L2 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "L3"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the L3 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the L3 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "POVCenter"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the center of a POV on the\nHID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "POVDown"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 180 degree angle (down)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 180 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "POVDownLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 225 degree angle (down\nleft) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 225 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "POVDownRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 135 degree angle (right\ndown) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 135 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "POVLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 270 degree angle (left)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 270 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "POVRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 90 degree angle (right)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 90 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "POVUp"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 0 degree angle (up) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 0 degree angle of a POV on\nthe HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "POVUpLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 315 degree angle (left\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 315 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "POVUpRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 45 degree angle (right\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 45 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "PS"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the PS button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the PS button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "R1"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the R1 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the R1 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "R2"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the R2 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the R2 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "R3"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the R3 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the R3 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "axisGreaterThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is greater than\nthe provided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "axisLessThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is less than the\nprovided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "button"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around this button's digital signal.\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n:returns: an event instance representing the button's digital signal attached\nto the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "circle"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the circle button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the circle button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "cross"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the cross button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the cross button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getAxisCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of axes for the HID.\n:returns: the number of axis for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getAxisType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the axis type of a joystick axis.\n:returns: the axis type of a joystick axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getButtonCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of buttons for the HID.\n:returns: the number of buttons on the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getCircleButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Circle button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getCircleButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Circle button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getCircleButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Circle button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getCrossButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Cross button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getCrossButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Cross button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getCrossButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Cross button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL1Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the L1 button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL1ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L1 button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL1ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L1 button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL2Axis"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the L2 axis value of the controller. Note that this axis is bound to\nthe range of [0, 1] as opposed to the usual [-1, 1].\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL2Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the L2 button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL2ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L2 button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL2ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L2 button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL3Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the L3 button (pressing the left analog stick) on the\ncontroller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL3ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L3 (left stick) button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getL3ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L3 (left stick) button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getLeftX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the X axis value of left side of the controller.\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getLeftY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Y axis value of left side of the controller.\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getName"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the name of the HID.\n:returns: the name of the HID.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getOptionsButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Options button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getOptionsButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Options button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getOptionsButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Options button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getPOV"
          },
          "inputs": {
            "ARG0": {
              "type": "int",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Get the angle in degrees of a POV on the HID.\nThe POV angles start at 0 in the up direction, and increase clockwise\n(e.g. right is 90, upper-left is 315).\n:param pov: The index of the POV to read (starting at 0)\n:returns: the angle of the POV in degrees, or -1 if the POV is not pressed.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getPOVCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of POVs for the HID.\n:returns: the number of POVs for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getPSButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the PS button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getPSButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the PS button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getPSButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the PS button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getPort"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the port number of the HID.\n:returns: The port number of the HID.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR1Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the R1 button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR1ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R1 button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR1ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R1 button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR2Axis"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the R2 axis value of the controller. Note that this axis is bound to\nthe range of [0, 1] as opposed to the usual [-1, 1].\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR2Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the R2 button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR2ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R2 button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR2ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R2 button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR3Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the R3 button (pressing the right analog stick) on the\ncontroller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR3ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R3 (right stick) button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getR3ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R3 (right stick) button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getRawAxis"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the value of the axis.\n:param axis: The axis to read, starting at 0.\n:returns: The value of the axis.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getRawButton"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the button value (starting at button 1).\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n:param button: The button number to be read (starting at 1)\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getRawButtonPressed"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getRawButtonReleased"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getRightX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the X axis value of right side of the controller.\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getRightY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Y axis value of right side of the controller.\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getShareButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Share button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getShareButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Share button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getShareButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Share button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getSquareButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Square button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getSquareButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Square button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getSquareButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Square button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getTouchpad"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the touchpad button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getTouchpadPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the touchpad was pressed since the last check.\n:returns: Whether the touchpad was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getTouchpadReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the touchpad was released since the last check.\n:returns: Whether the touchpad was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getTriangleButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Triangle button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getTriangleButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Triangle button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getTriangleButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Triangle button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "getType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the type of the HID.\n:returns: the type of the HID.",
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "isConnected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the HID is connected.\n:returns: true if the HID is connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "options"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the options button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the options button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "setOutput"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set a single HID output value for the HID.\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "setOutputs"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set all output values for the HID.\n:param value: The 32 bit output value (1 bit for each output)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "setRumble"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.interfaces._interfaces.GenericHID.RumbleType"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the rumble output for the HID.\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "share"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the share button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the share button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "square"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the square button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the square button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "touchpad"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the touchpad's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the touchpad's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "FUNC": "triangle"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the triangle button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the triangle button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "VAR": "Axis"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "VAR": "Button"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "VAR": "HIDType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "VAR": "RumbleType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "VAR": "Axis"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "VAR": "Button"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "VAR": "HIDType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PS4Controller",
            "VAR": "RumbleType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHID1stPerson"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDDriving"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDFlight"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDJoystick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadeStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDancePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDrumKit"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputFlightStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar2"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar3"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputWheel"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kBothRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kLeftRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kRightRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "category",
          "name": "Axis",
          "contents": [
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kL2"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kLeftX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kLeftY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kR2"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kRightX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kRightY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kL2"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kLeftX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kLeftY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kR2"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kRightX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Axis",
                "VAR": "kRightY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            }
          ]
        },
        {
          "kind": "category",
          "name": "Button",
          "contents": [
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kCircle"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kCross"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kL1"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kL2"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kL3"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kOptions"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kPS"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kR1"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kR2"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kR3"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kShare"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kSquare"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kTouchpad"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kTriangle"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kCircle"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kCross"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kL1"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kL2"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kL3"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kOptions"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kPS"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kR1"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kR2"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kR3"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kShare"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kSquare"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kTouchpad"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS4Controller.Button",
                "VAR": "kTriangle"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "PS5Controller",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "wpilib.PS5Controller"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PS5Controller"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct an instance of an PS5 controller.\nThe controller index is the USB port on the Driver Station.\n:param port: The port on the Driver Station that the controller is plugged\ninto (0-5).",
          "output": "wpilib.PS5Controller"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "L1"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the L1 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the L1 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "L2"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the L2 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the L2 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "L3"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the L3 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the L3 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "POVCenter"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the center of a POV on the\nHID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "POVDown"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 180 degree angle (down)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 180 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "POVDownLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 225 degree angle (down\nleft) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 225 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "POVDownRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 135 degree angle (right\ndown) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 135 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "POVLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 270 degree angle (left)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 270 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "POVRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 90 degree angle (right)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 90 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "POVUp"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 0 degree angle (up) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 0 degree angle of a POV on\nthe HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "POVUpLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 315 degree angle (left\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 315 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "POVUpRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 45 degree angle (right\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 45 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "PS"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the PS button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the PS button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "R1"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the R1 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the R1 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "R2"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the R2 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the R2 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "R3"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the R3 button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the R3 button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "axisGreaterThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is greater than\nthe provided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "axisLessThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is less than the\nprovided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "button"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around this button's digital signal.\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n:returns: an event instance representing the button's digital signal attached\nto the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "circle"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the circle button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the circle button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "create"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the Create button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the Create button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "cross"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the cross button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the cross button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getAxisCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of axes for the HID.\n:returns: the number of axis for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getAxisType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the axis type of a joystick axis.\n:returns: the axis type of a joystick axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getButtonCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of buttons for the HID.\n:returns: the number of buttons on the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getCircleButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Circle button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getCircleButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Circle button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getCircleButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Circle button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getCreateButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Create button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getCreateButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Create button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getCreateButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Create button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getCrossButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Cross button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getCrossButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Cross button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getCrossButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Cross button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL1Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the L1 button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL1ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L1 button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL1ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L1 button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL2Axis"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the L2 axis value of the controller. Note that this axis is bound to\nthe range of [0, 1] as opposed to the usual [-1, 1].\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL2Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the L2 button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL2ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L2 button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL2ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L2 button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL3Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the L3 button (pressing the left analog stick) on the\ncontroller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL3ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L3 (left stick) button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getL3ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the L3 (left stick) button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getLeftX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the X axis value of left side of the controller.\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getLeftY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Y axis value of left side of the controller.\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getName"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the name of the HID.\n:returns: the name of the HID.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getOptionsButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Options button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getOptionsButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Options button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getOptionsButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Options button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getPOV"
          },
          "inputs": {
            "ARG0": {
              "type": "int",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Get the angle in degrees of a POV on the HID.\nThe POV angles start at 0 in the up direction, and increase clockwise\n(e.g. right is 90, upper-left is 315).\n:param pov: The index of the POV to read (starting at 0)\n:returns: the angle of the POV in degrees, or -1 if the POV is not pressed.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getPOVCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of POVs for the HID.\n:returns: the number of POVs for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getPSButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the PS button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getPSButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the PS button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getPSButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the PS button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getPort"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the port number of the HID.\n:returns: The port number of the HID.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR1Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the R1 button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR1ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R1 button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR1ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R1 button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR2Axis"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the R2 axis value of the controller. Note that this axis is bound to\nthe range of [0, 1] as opposed to the usual [-1, 1].\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR2Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the R2 button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR2ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R2 button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR2ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R2 button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR3Button"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the R3 button (pressing the right analog stick) on the\ncontroller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR3ButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R3 (right stick) button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getR3ButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the R3 (right stick) button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getRawAxis"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the value of the axis.\n:param axis: The axis to read, starting at 0.\n:returns: The value of the axis.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getRawButton"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the button value (starting at button 1).\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n:param button: The button number to be read (starting at 1)\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getRawButtonPressed"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getRawButtonReleased"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getRightX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the X axis value of right side of the controller.\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getRightY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Y axis value of right side of the controller.\n:returns: the axis value.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getSquareButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Square button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getSquareButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Square button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getSquareButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Square button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getTouchpad"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the touchpad button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getTouchpadPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the touchpad was pressed since the last check.\n:returns: Whether the touchpad was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getTouchpadReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the touchpad was released since the last check.\n:returns: Whether the touchpad was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getTriangleButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Triangle button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getTriangleButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Triangle button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getTriangleButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Triangle button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "getType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the type of the HID.\n:returns: the type of the HID.",
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "isConnected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the HID is connected.\n:returns: true if the HID is connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "options"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the options button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the options button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "setOutput"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set a single HID output value for the HID.\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "setOutputs"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set all output values for the HID.\n:param value: The 32 bit output value (1 bit for each output)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "setRumble"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.interfaces._interfaces.GenericHID.RumbleType"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the rumble output for the HID.\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "square"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the square button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the square button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "touchpad"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the touchpad's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the touchpad's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "FUNC": "triangle"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the triangle button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the triangle button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "VAR": "Axis"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "VAR": "Button"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "VAR": "HIDType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "VAR": "RumbleType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "VAR": "Axis"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "VAR": "Button"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "VAR": "HIDType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PS5Controller",
            "VAR": "RumbleType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHID1stPerson"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDDriving"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDFlight"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDJoystick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadeStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDancePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDrumKit"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputFlightStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar2"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar3"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputWheel"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kBothRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kLeftRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kRightRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "category",
          "name": "Axis",
          "contents": [
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kL2"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kLeftX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kLeftY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kR2"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kRightX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kRightY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kL2"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kLeftX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kLeftY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kR2"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kRightX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Axis",
                "VAR": "kRightY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            }
          ]
        },
        {
          "kind": "category",
          "name": "Button",
          "contents": [
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kCircle"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kCreate"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kCross"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kL1"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kL2"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kL3"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kOptions"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kPS"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kR1"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kR2"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kR3"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kSquare"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kTouchpad"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kTriangle"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kCircle"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kCreate"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kCross"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kL1"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kL2"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kL3"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kOptions"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kPS"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kR1"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kR2"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kR3"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kSquare"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kTouchpad"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.PS5Controller.Button",
                "VAR": "kTriangle"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "PWM",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "wpilib.PWM"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWM"
            },
            "ARG1": {
              "type": "int"
            },
            "ARG2": {
              "type": "bool",
              "shadow": {
                "type": "logic_boolean",
                "fields": {
                  "BOOL": "TRUE"
                }
              }
            }
          },
          "colour": 300,
          "tooltip": "Allocate a PWM given a channel number.\nChecks channel value range and allocates the appropriate channel.\nThe allocation is only done to help users ensure that they don't double\nassign channels.\n:param channel:          The PWM channel number. 0-9 are on-board, 10-19 are on the\nMXP port\n:param registerSendable: If true, adds this instance to SendableRegistry\nand LiveWindow",
          "output": "wpilib.PWM"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "getBounds"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.microseconds"
            },
            "ARG1": {
              "type": "wpimath.units.microseconds"
            },
            "ARG2": {
              "type": "wpimath.units.microseconds"
            },
            "ARG3": {
              "type": "wpimath.units.microseconds"
            },
            "ARG4": {
              "type": "wpimath.units.microseconds"
            }
          },
          "colour": 270,
          "tooltip": "Get the bounds on the PWM values.\nThis gets the bounds on the PWM values for a particular each type of\ncontroller. The values determine the upper and lower speeds as well as the\ndeadband bracket.\n:param max:         The maximum pwm value\n:param deadbandMax: The high end of the deadband range\n:param center:      The center speed (off)\n:param deadbandMin: The low end of the deadband range\n:param min:         The minimum pwm value",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "getPosition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the PWM value in terms of a position.\nThis is intended to be used by servos.\n@pre SetBounds() called.\n:returns: The position the servo is set to between 0.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "getPulseTime"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the PWM pulse time directly from the hardware.\nRead a microsecond value from a PWM channel.\n:returns: Microsecond PWM control value.",
          "output": "wpimath.units.microseconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "getSpeed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the PWM value in terms of speed.\nThis is intended to be used by motor controllers.\n@pre SetBounds() called.\n:returns: The most recently set speed between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "setAlwaysHighMode"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Sets the PWM output to be a continuous high signal while enabled.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "setBounds"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.microseconds"
            },
            "ARG1": {
              "type": "wpimath.units.microseconds"
            },
            "ARG2": {
              "type": "wpimath.units.microseconds"
            },
            "ARG3": {
              "type": "wpimath.units.microseconds"
            },
            "ARG4": {
              "type": "wpimath.units.microseconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the bounds on the PWM pulse widths.\nThis sets the bounds on the PWM values for a particular type of controller.\nThe values determine the upper and lower speeds as well as the deadband\nbracket.\n:param max:         The max PWM pulse width in us\n:param deadbandMax: The high end of the deadband range pulse width in us\n:param center:      The center (off) pulse width in us\n:param deadbandMin: The low end of the deadband pulse width in us\n:param min:         The minimum pulse width in us",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "setDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Temporarily disables the PWM output. The next set call will re-enable\nthe output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "setPeriodMultiplier"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWM.PeriodMultiplier"
            }
          },
          "colour": 270,
          "tooltip": "Slow down the PWM signal for old devices.\n:param mult: The period multiplier to apply to this channel",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "setPosition"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value based on a position.\nThis is intended to be used by servos.\n@pre SetBounds() called.\n:param pos: The position to set the servo between 0.0 and 1.0.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "setPulseTime"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.microseconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM pulse time directly to the hardware.\nWrite a microsecond value to a PWM channel.\n:param time: Microsecond PWM value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "setSpeed"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value based on a speed.\nThis is intended to be used by motor controllers.\n@pre SetBounds() called.\n:param speed: The speed to set the motor controller between -1.0 and 1.0.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWM",
            "FUNC": "setZeroLatch"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Latches PWM to zero.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PWM",
            "VAR": "PeriodMultiplier"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PWM",
            "VAR": "PeriodMultiplier"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.PWM.PeriodMultiplier",
            "ENUM_VALUE": "kPeriodMultiplier_1X"
          },
          "output": "wpilib.PWM.PeriodMultiplier",
          "colour": 180,
          "tooltip": "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.PWM.PeriodMultiplier",
            "ENUM_VALUE": "kPeriodMultiplier_2X"
          },
          "output": "wpilib.PWM.PeriodMultiplier",
          "colour": 180,
          "tooltip": "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.PWM.PeriodMultiplier",
            "ENUM_VALUE": "kPeriodMultiplier_4X"
          },
          "output": "wpilib.PWM.PeriodMultiplier",
          "colour": 180,
          "tooltip": "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms"
        },
        {
          "kind": "category",
          "name": "PeriodMultiplier",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.PWM.PeriodMultiplier",
                "ENUM_VALUE": "kPeriodMultiplier_1X"
              },
              "output": "wpilib.PWM.PeriodMultiplier",
              "colour": 180,
              "tooltip": "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms"
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.PWM.PeriodMultiplier",
                "ENUM_VALUE": "kPeriodMultiplier_2X"
              },
              "output": "wpilib.PWM.PeriodMultiplier",
              "colour": 180,
              "tooltip": "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms"
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.PWM.PeriodMultiplier",
                "ENUM_VALUE": "kPeriodMultiplier_4X"
              },
              "output": "wpilib.PWM.PeriodMultiplier",
              "colour": 180,
              "tooltip": "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms"
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "PWMMotorController",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "wpilib.PWMMotorController"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            },
            "ARG1": {
              "type": "str"
            },
            "ARG2": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a PWM Motor %Controller connected via PWM.\n:param name:    Name to use for SendableRegistry\n:param channel: The PWM channel that the controller is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.PWMMotorController"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMMotorController",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "PWMSparkFlex",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "wpilib.PWMSparkFlex"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMSparkFlex"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a SPARK Flex.\n:param channel: The PWM channel that the SPARK Flex is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.PWMSparkFlex"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkFlex",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "PWMSparkMax",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "wpilib.PWMSparkMax"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMSparkMax"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a SPARK MAX.\n:param channel: The PWM channel that the SPARK MAX is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.PWMSparkMax"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMSparkMax",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "PWMTalonFX",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "wpilib.PWMTalonFX"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMTalonFX"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct a %Talon FX connected via PWM.\n:param channel: The PWM channel that the %Talon FX is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.PWMTalonFX"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonFX",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "PWMTalonSRX",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "wpilib.PWMTalonSRX"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMTalonSRX"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct a %Talon SRX connected via PWM.\n:param channel: The PWM channel that the %Talon SRX is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.PWMTalonSRX"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMTalonSRX",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "PWMVenom",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "wpilib.PWMVenom"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMVenom"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct a Venom connected via PWM.\n:param channel: The PWM channel that the Venom is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.PWMVenom"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVenom",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "PWMVictorSPX",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "wpilib.PWMVictorSPX"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMVictorSPX"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct a %Victor SPX connected via PWM.\n:param channel: The PWM channel that the %Victor SPX is attached to. 0-9\nare on-board, 10-19 are on the MXP port",
          "output": "wpilib.PWMVictorSPX"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PWMVictorSPX",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "PneumaticHub",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "checkAndReserveSolenoids"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "checkSolenoidChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "clearStickyFaults"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Clears the sticky faults.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "disableCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Disables the compressor. The compressor will not turn on until\nEnableCompressorDigital(), EnableCompressorAnalog(), or\nEnableCompressorHybrid() are called.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "enableCompressorAnalog"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.pounds_per_square_inch"
            },
            "ARG1": {
              "type": "wpimath.units.pounds_per_square_inch"
            }
          },
          "colour": 270,
          "tooltip": "Enables the compressor in analog mode. This mode uses an analog pressure\nsensor connected to analog channel 0 to cycle the compressor. The\ncompressor will turn on when the pressure drops below ``minPressure``\nand will turn off when the pressure reaches ``maxPressure``.\n:param minPressure: The minimum pressure. The compressor will turn on when\nthe pressure drops below this value. Range 0 - 120 PSI.\n:param maxPressure: The maximum pressure. The compressor will turn off when\nthe pressure reaches this value. Range 0 - 120 PSI. Must be larger then\nminPressure.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "enableCompressorDigital"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "enableCompressorHybrid"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.pounds_per_square_inch"
            },
            "ARG1": {
              "type": "wpimath.units.pounds_per_square_inch"
            }
          },
          "colour": 270,
          "tooltip": "Enables the compressor in hybrid mode. This mode uses both a digital\npressure switch and an analog pressure sensor connected to analog channel 0\nto cycle the compressor.\nThe compressor will turn on when \\a both:\n- The digital pressure switch indicates the system is not full AND\n- The analog pressure sensor indicates that the pressure in the system is\nbelow the specified minimum pressure.\nThe compressor will turn off when \\a either:\n- The digital pressure switch is disconnected or indicates that the system\nis full OR\n- The pressure detected by the analog sensor is greater than the specified\nmaximum pressure.\n:param minPressure: The minimum pressure. The compressor will turn on when\nthe pressure drops below this value and the pressure switch indicates that\nthe system is not full.  Range 0 - 120 PSI.\n:param maxPressure: The maximum pressure. The compressor will turn off when\nthe pressure reaches this value or the pressure switch is disconnected or\nindicates that the system is full. Range 0 - 120 PSI. Must be larger then\nminPressure.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "fireOneShot"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "get5VRegulatedVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the current voltage of the regulated 5v supply.\n:returns: The current voltage of the 5v supply.",
          "output": "wpimath.units.volts"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getAnalogVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns the raw voltage of the specified analog input channel.\n:param channel: The analog input channel to read voltage from.\n:returns: The voltage of the specified analog input channel.",
          "output": "wpimath.units.volts"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getCompressorConfigType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.CompressorConfigType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getCompressorCurrent"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpimath.units.amperes"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getDefaultForType"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PneumaticsModuleType"
            }
          },
          "colour": 270,
          "tooltip": "For internal use to get the default for a specific type.\n:param moduleType: module type\n:returns: module default",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getFaults"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the faults currently active on this device.\n:returns: The faults.",
          "output": "wpilib._wpilib.PneumaticHub.Faults"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getForType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpilib._wpilib.PneumaticsModuleType"
            }
          },
          "colour": 270,
          "tooltip": "For internal use to get a module for a specific type.\n:param module:     module number\n:param moduleType: module type\n:returns: module",
          "output": "wpilib._wpilib.PneumaticsBase"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getInputVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the current input voltage for this device.\n:returns: The input voltage.",
          "output": "wpimath.units.volts"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getModuleNumber"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getPressure"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Returns the pressure read by an analog pressure sensor on the specified\nanalog input channel.\n:param channel: The analog input channel to read pressure from.\n:returns: The pressure read by an analog pressure sensor on the specified\nanalog input channel.",
          "output": "wpimath.units.pounds_per_square_inch"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getPressureSwitch"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getSolenoidDisabledList"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getSolenoids"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getSolenoidsTotalCurrent"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the total current drawn by all solenoids.\n:returns: Total current drawn by all solenoids.",
          "output": "wpimath.units.amperes"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getSolenoidsVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the current voltage of the solenoid power supply.\n:returns: The current voltage of the solenoid power supply.",
          "output": "wpimath.units.volts"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getStickyFaults"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the sticky faults currently active on this device.\n:returns: The sticky faults.",
          "output": "wpilib._wpilib.PneumaticHub.StickyFaults"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "getVersion"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the hardware and firmware versions of this device.\n:returns: The hardware and firmware versions.",
          "output": "wpilib._wpilib.PneumaticHub.Version"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "makeCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.Compressor"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "makeDoubleSolenoid"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.DoubleSolenoid"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "makeSolenoid"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.Solenoid"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "reserveCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "setOneShotDuration"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "setSolenoids"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "unreserveCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "FUNC": "unreserveSolenoids"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "VAR": "Faults"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "VAR": "StickyFaults"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "VAR": "Version"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "VAR": "Faults"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "VAR": "StickyFaults"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.PneumaticHub",
            "VAR": "Version"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "category",
          "name": "Faults",
          "contents": [
            {
              "kind": "block",
              "type": "instance_method_call",
              "fields": {
                "CLASS": "wpilib.PneumaticHub.Faults",
                "FUNC": "getChannelFault"
              },
              "inputs": {
                "ARG0": {
                  "type": "int"
                }
              },
              "colour": 270,
              "tooltip": "Gets whether there is a fault at the specified channel.\n:param channel: Channel to check for faults.\n:returns: True if a a fault exists at the channel, otherwise false.\n@throws A ChannelIndexOutOfRange error if the provided channel is outside\nof the range supported by the hardware.",
              "output": "bool"
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "PneumaticsBase",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "wpilib.PneumaticsBase"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PneumaticsBase"
            }
          },
          "colour": 300,
          "tooltip": "",
          "output": "wpilib.PneumaticsBase"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "checkAndReserveSolenoids"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Check to see if the masked solenoids can be reserved, and if not reserve\nthem.\n:param mask: The bitmask of solenoids to reserve\n:returns: 0 if successful; mask of solenoids that couldn't be allocated\notherwise",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "checkSolenoidChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Check if a solenoid channel is valid.\n:param channel: Channel to check\n:returns: True if channel exists",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "disableCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Disables the compressor.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "enableCompressorAnalog"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.pounds_per_square_inch"
            },
            "ARG1": {
              "type": "wpimath.units.pounds_per_square_inch"
            }
          },
          "colour": 270,
          "tooltip": "If supported by the device, enables the compressor in analog mode. This\nmode uses an analog pressure sensor connected to analog channel 0 to cycle\nthe compressor. The compressor will turn on when the pressure drops below\n``minPressure`` and will turn off when the pressure reaches {@code\nmaxPressure}. This mode is only supported by the REV PH with the REV Analog\nPressure Sensor connected to analog channel 0.\nOn CTRE PCM, this will enable digital control.\n:param minPressure: The minimum pressure. The compressor will turn on\nwhen the pressure drops below this value.\n:param maxPressure: The maximum pressure. The compressor will turn\noff when the pressure reaches this value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "enableCompressorDigital"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Enables the compressor in digital mode using the digital pressure switch.\nThe compressor will turn on when the pressure switch indicates that the\nsystem is not full, and will turn off when the pressure switch indicates\nthat the system is full.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "enableCompressorHybrid"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.pounds_per_square_inch"
            },
            "ARG1": {
              "type": "wpimath.units.pounds_per_square_inch"
            }
          },
          "colour": 270,
          "tooltip": "If supported by the device, enables the compressor in hybrid mode. This\nmode uses both a digital pressure switch and an analog pressure sensor\nconnected to analog channel 0 to cycle the compressor. This mode is only\nsupported by the REV PH with the REV Analog Pressure Sensor connected to\nanalog channel 0.\nThe compressor will turn on when \\a both:\n- The digital pressure switch indicates the system is not full AND\n- The analog pressure sensor indicates that the pressure in the system\nis below the specified minimum pressure.\nThe compressor will turn off when \\a either:\n- The digital pressure switch is disconnected or indicates that the system\nis full OR\n- The pressure detected by the analog sensor is greater than the specified\nmaximum pressure.\nOn CTRE PCM, this will enable digital control.\n:param minPressure: The minimum pressure. The compressor will turn on\nwhen the pressure drops below this value and the pressure switch indicates\nthat the system is not full.\n:param maxPressure: The maximum pressure. The compressor will turn\noff when the pressure reaches this value or the pressure switch is\ndisconnected or indicates that the system is full.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "fireOneShot"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Fire a single solenoid shot.\n:param index: solenoid index",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getAnalogVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "If supported by the device, returns the raw voltage of the specified analog\ninput channel.\nThis function is only supported by the REV PH. On CTRE PCM, this will\nreturn 0.\n:param channel: The analog input channel to read voltage from.\n:returns: The voltage of the specified analog input channel.",
          "output": "wpimath.units.volts"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether the compressor is active or not.\n:returns: True if the compressor is on - otherwise false.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getCompressorConfigType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the active compressor configuration.\n:returns: The active compressor configuration.",
          "output": "wpilib._wpilib.CompressorConfigType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getCompressorCurrent"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the current drawn by the compressor.\n:returns: The current drawn by the compressor.",
          "output": "wpimath.units.amperes"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getDefaultForType"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PneumaticsModuleType"
            }
          },
          "colour": 270,
          "tooltip": "For internal use to get the default for a specific type.\n:param moduleType: module type\n:returns: module default",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getForType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpilib._wpilib.PneumaticsModuleType"
            }
          },
          "colour": 270,
          "tooltip": "For internal use to get a module for a specific type.\n:param module:     module number\n:param moduleType: module type\n:returns: module",
          "output": "wpilib._wpilib.PneumaticsBase"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getModuleNumber"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get module number for this module.\n:returns: module number",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getPressure"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "If supported by the device, returns the pressure read by an analog\npressure sensor on the specified analog input channel.\nThis function is only supported by the REV PH. On CTRE PCM, this will\nreturn 0.\n:param channel: The analog input channel to read pressure from.\n:returns: The pressure read by an analog pressure sensor on the\nspecified analog input channel.",
          "output": "wpimath.units.pounds_per_square_inch"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getPressureSwitch"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the state of the pressure switch.\n:returns: True if pressure switch indicates that the system is full,\notherwise false.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getSolenoidDisabledList"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get a bitmask of disabled solenoids.\n:returns: bitmask of disabled solenoids",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "getSolenoids"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets a bitmask of solenoid values.\n:returns: solenoid values",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "makeCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Create a compressor object.\n:returns: Compressor object",
          "output": "wpilib._wpilib.Compressor"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "makeDoubleSolenoid"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Create a double solenoid object for the specified channels.\n:param forwardChannel: solenoid channel for forward\n:param reverseChannel: solenoid channel for reverse\n:returns: DoubleSolenoid object",
          "output": "wpilib._wpilib.DoubleSolenoid"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "makeSolenoid"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Create a solenoid object for the specified channel.\n:param channel: solenoid channel\n:returns: Solenoid object",
          "output": "wpilib._wpilib.Solenoid"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "reserveCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Reserve the compressor.\n:returns: true if successful; false if compressor already reserved",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "setOneShotDuration"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the duration for a single solenoid shot.\n:param index:    solenoid index\n:param duration: shot duration",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "setSolenoids"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Sets solenoids on a pneumatics module.\n:param mask:   bitmask to set\n:param values: solenoid values",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "unreserveCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Unreserve the compressor.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsBase",
            "FUNC": "unreserveSolenoids"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Unreserve the masked solenoids.\n:param mask: The bitmask of solenoids to unreserve",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "PneumaticsControlModule",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "checkAndReserveSolenoids"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "checkSolenoidChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "clearAllStickyFaults"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Clears all sticky faults on this device.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "disableCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Disables the compressor. The compressor will not turn on until\nEnableCompressorDigital() is called.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "enableCompressorAnalog"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.pounds_per_square_inch"
            },
            "ARG1": {
              "type": "wpimath.units.pounds_per_square_inch"
            }
          },
          "colour": 270,
          "tooltip": "Enables the compressor in digital mode. Analog mode is unsupported by the\nCTRE PCM.\n:param minPressure: Unsupported.\n:param maxPressure: Unsupported.\n@see EnableCompressorDigital()",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "enableCompressorDigital"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "enableCompressorHybrid"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.pounds_per_square_inch"
            },
            "ARG1": {
              "type": "wpimath.units.pounds_per_square_inch"
            }
          },
          "colour": 270,
          "tooltip": "Enables the compressor in digital mode. Hybrid mode is unsupported by the\nCTRE PCM.\n:param minPressure: Unsupported.\n:param maxPressure: Unsupported.\n@see EnableCompressorDigital()",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "fireOneShot"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getAnalogVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Unsupported by the CTRE PCM.\n:param channel: Unsupported.\n:returns: 0",
          "output": "wpimath.units.volts"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getCompressorConfigType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.CompressorConfigType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getCompressorCurrent"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpimath.units.amperes"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getCompressorCurrentTooHighFault"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return whether the compressor current is currently too high.\n:returns: True if the compressor current is too high, otherwise false.\n@see GetCompressorCurrentTooHighStickyFault()",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getCompressorCurrentTooHighStickyFault"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether the compressor current has been too high since sticky\nfaults were last cleared. This fault is persistent and can be cleared by\nClearAllStickyFaults()\n:returns: True if the compressor current has been too high since sticky\nfaults were last cleared.\n@see GetCompressorCurrentTooHighFault()",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getCompressorNotConnectedFault"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether the compressor is currently disconnected.\n:returns: True if compressor is currently disconnected, otherwise false.\n@see GetCompressorNotConnectedStickyFault()",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getCompressorNotConnectedStickyFault"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether the compressor has been disconnected since sticky faults\nwere last cleared. This fault is persistent and can be cleared by\nClearAllStickyFaults()\n:returns: True if the compressor has been disconnected since sticky faults\nwere last cleared, otherwise false.\n@see GetCompressorNotConnectedFault()",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getCompressorShortedFault"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether the compressor is currently shorted.\n:returns: True if the compressor is currently shorted, otherwise false.\n@see GetCompressorShortedStickyFault()",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getCompressorShortedStickyFault"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether the compressor has been shorted since sticky faults were\nlast cleared. This fault is persistent and can be cleared by\nClearAllStickyFaults()\n:returns: True if the compressor has been shorted since sticky faults were\nlast cleared, otherwise false.\n@see GetCompressorShortedFault()",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getDefaultForType"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PneumaticsModuleType"
            }
          },
          "colour": 270,
          "tooltip": "For internal use to get the default for a specific type.\n:param moduleType: module type\n:returns: module default",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getForType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpilib._wpilib.PneumaticsModuleType"
            }
          },
          "colour": 270,
          "tooltip": "For internal use to get a module for a specific type.\n:param module:     module number\n:param moduleType: module type\n:returns: module",
          "output": "wpilib._wpilib.PneumaticsBase"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getModuleNumber"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getPressure"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Unsupported by the CTRE PCM.\n:param channel: Unsupported.\n:returns: 0",
          "output": "wpimath.units.pounds_per_square_inch"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getPressureSwitch"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getSolenoidDisabledList"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getSolenoidVoltageFault"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether the solenoid is currently reporting a voltage fault.\n:returns: True if solenoid is reporting a fault, otherwise false.\n@see GetSolenoidVoltageStickyFault()",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getSolenoidVoltageStickyFault"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns whether the solenoid has reported a voltage fault since sticky\nfaults were last cleared. This fault is persistent and can be cleared by\nClearAllStickyFaults()\n:returns: True if solenoid is reporting a fault, otherwise false.\n@see GetSolenoidVoltageFault()",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "getSolenoids"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "makeCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.Compressor"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "makeDoubleSolenoid"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.DoubleSolenoid"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "makeSolenoid"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "output": "wpilib._wpilib.Solenoid"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "reserveCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "setOneShotDuration"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "setSolenoids"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "unreserveCompressor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.PneumaticsControlModule",
            "FUNC": "unreserveSolenoids"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "Preferences",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "containsKey"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Returns whether or not there is a key with the given name.\n:param key: the key\n:returns: if there is a value at the given key",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "getBoolean"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "bool",
              "shadow": {
                "type": "logic_boolean",
                "fields": {
                  "BOOL": "FALSE"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Returns the boolean at the given key.  If this table does not have a value\nfor that position, then the given defaultValue value will be returned.\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n:returns: either the value in the table, or the defaultValue",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "getDouble"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0.0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Returns the double at the given key.  If this table does not have a value\nfor that position, then the given defaultValue value will be returned.\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n:returns: either the value in the table, or the defaultValue",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "getFloat"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0.0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Returns the float at the given key.  If this table does not have a value\nfor that position, then the given defaultValue value will be returned.\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n:returns: either the value in the table, or the defaultValue",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "getInt"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "int",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Returns the int at the given key.  If this table does not have a value for\nthat position, then the given defaultValue value will be returned.\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n:returns: either the value in the table, or the defaultValue",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "getKeys"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns a vector of all the keys.\n:returns: a vector of the keys",
          "output": "list[str]"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "getLong"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "int",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Returns the long (int64_t) at the given key.  If this table does not have a\nvalue for that position, then the given defaultValue value will be\nreturned.\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n:returns: either the value in the table, or the defaultValue",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "getString"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "str",
              "shadow": {
                "type": "text",
                "fields": {
                  "TEXT": "''"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Returns the string at the given key.  If this table does not have a value\nfor that position, then the given defaultValue will be returned.\n:param key:          the key\n:param defaultValue: the value to return if none exists in the table\n:returns: either the value in the table, or the defaultValue",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "initBoolean"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given boolean into the preferences table if it doesn't\nalready exist.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "initDouble"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given double into the preferences table if it doesn't\nalready exist.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "initFloat"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given float into the preferences table if it doesn't\nalready exist.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "initInt"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given int into the preferences table if it doesn't\nalready exist.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "initLong"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given long into the preferences table if it doesn't\nalready exist.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "initString"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given string into the preferences table if it doesn't\nalready exist.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "remove"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Remove a preference.\n:param key: the key",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "removeAll"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Remove all preferences.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "setBoolean"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given boolean into the preferences table.\nThe key may not have any whitespace nor an equals sign.\n:param key:   the key\n:param value: the value",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "setDouble"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given double into the preferences table.\nThe key may not have any whitespace nor an equals sign.\n:param key:   the key\n:param value: the value",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "setFloat"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given float into the preferences table.\nThe key may not have any whitespace nor an equals sign.\n:param key:   the key\n:param value: the value",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "setInt"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given int into the preferences table.\nThe key may not have any whitespace nor an equals sign.\n:param key:   the key\n:param value: the value",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "setLong"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given long (int64_t) into the preferences table.\nThe key may not have any whitespace nor an equals sign.\n:param key:   the key\n:param value: the value",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Preferences",
            "FUNC": "setString"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Puts the given string into the preferences table.\nThe value may not have quotation marks, nor may the key have any whitespace\nnor an equals sign.\n:param key:   the key\n:param value: the value",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "RobotBase",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "wpilib.RobotBase"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.RobotBase"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a generic robot program.\nUser code can be placed in the constructor that runs before the\nAutonomous or Operator Control period starts. The constructor will run to\ncompletion before Autonomous is entered.\nThis must be used to ensure that the communications code starts. In the\nfuture it would be nice to put this code into it's own task that loads on\nboot so ensure that it runs.",
          "output": "wpilib.RobotBase"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "endCompetition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Ends the main loop in StartCompetition().",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "getControlState"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "More efficient way to determine what state the robot is in.\n:returns: booleans representing enabled, isautonomous, istest\n.. versionadded:: 2019.2.1\n.. note:: This function only exists in RobotPy",
          "output": "tuple[bool, bool, bool]"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "getRuntimeType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current runtime type.\n:returns: Current runtime type.",
          "output": "wpilib._wpilib.RuntimeType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isAutonomous"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Autonomous mode.\n:returns: True if the robot is currently operating Autonomously as determined\nby the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isAutonomousEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Autonomous mode and enabled.\n:returns: True if the robot us currently operating Autonomously while enabled\nas determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the Robot is currently disabled.\n:returns: True if the Robot is currently disabled by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the Robot is currently enabled.\n:returns: True if the Robot is currently enabled by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isReal"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the robot is real.\n:returns: If the robot is running in the real world.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isSimulation"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the robot is a simulation.\n:returns: If the robot is running in simulation.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isTeleop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Operator Control mode.\n:returns: True if the robot is currently operating in Tele-Op mode as\ndetermined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isTeleopEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is current in Operator Control mode and enabled.\n:returns: True if the robot is currently operating in Tele-Op mode while\nenabled as determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Test mode.\n:returns: True if the robot is currently running in Test mode as determined\nby the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "isTestEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is current in Test mode and enabled.\n:returns: True if the robot is currently operating in Test mode while\nenabled as determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "main"
          },
          "inputs": {
            "ARG0": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Starting point for the application",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "FUNC": "startCompetition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Start the main robot code. This function will be called once and should not\nexit until signalled by EndCompetition()",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "VAR": "logger"
          },
          "output": "logging.Logger",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.RobotBase",
            "VAR": "logger"
          },
          "inputs": {
            "VALUE": {
              "type": "logging.Logger"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        }
      ]
    },
    {
      "kind": "category",
      "name": "RobotController",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getBatteryVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the battery voltage.\n:returns: The battery voltage in Volts.",
          "output": "wpimath.units.volts"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getBrownoutVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current brownout voltage setting.\n:returns: The brownout voltage",
          "output": "wpimath.units.volts"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getCANStatus"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current status of the CAN bus.\n:returns: The status of the CAN bus",
          "output": "wpilib._wpilib.CANStatus"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getCPUTemp"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current CPU temperature.\n:returns: current CPU temperature",
          "output": "wpimath.units.celsius"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getComments"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the comments from the roboRIO web interface.\nThe comments string is cached after the first call to this function on the\nRoboRIO - restart the robot code to reload the comments string after\nchanging it in the web interface.\n:returns: The comments from the roboRIO web interface.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getCurrent3V3"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current output of the 3.3V rail.\n:returns: The controller 3.3V rail output current value in Amps",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getCurrent5V"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current output of the 5V rail.\n:returns: The controller 5V rail output current value in Amps",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getCurrent6V"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current output of the 6V rail.\n:returns: The controller 6V rail output current value in Amps",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getEnabled3V3"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the enabled state of the 3.3V rail. The rail may be disabled due to\ncalling SetEnabled3V3(), a controller brownout, a short circuit on the\nrail, or controller over-voltage.\n:returns: The controller 3.3V rail enabled value. True for enabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getEnabled5V"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the enabled state of the 5V rail. The rail may be disabled due to\ncalling SetEnabled5V(), a controller brownout, a short circuit on the rail,\nor controller over-voltage.\n:returns: The controller 5V rail enabled value. True for enabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getEnabled6V"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the enabled state of the 6V rail. The rail may be disabled due to\ncalling SetEnabled6V(), a controller brownout, a short circuit on the rail,\nor controller over-voltage.\n:returns: The controller 6V rail enabled value. True for enabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getFPGARevision"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the FPGA Revision number.\nThe format of the revision is 3 numbers. The 12 most significant bits are\nthe Major Revision. The next 8 bits are the Minor Revision. The 12 least\nsignificant bits are the Build Number.\n:returns: FPGA Revision number.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getFPGATime"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the microsecond-resolution timer on the FPGA.\n:returns: The current time in microseconds according to the FPGA (since FPGA\nreset).",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getFPGAVersion"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the FPGA Version number.\nFor now, expect this to be competition year.\n:returns: FPGA Version number.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getFaultCount3V3"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the count of the total current faults on the 3.3V rail since the\ncontroller has booted.\n:returns: The number of faults",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getFaultCount5V"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the count of the total current faults on the 5V rail since the\ncontroller has booted.\n:returns: The number of faults",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getFaultCount6V"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the count of the total current faults on the 6V rail since the\ncontroller has booted.\n:returns: The number of faults.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getInputCurrent"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the input current to the robot controller.\n:returns: The controller input current value in Amps",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getInputVoltage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the input voltage to the robot controller.\n:returns: The controller input voltage value in Volts",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getRSLState"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets the current state of the Robot Signal Light (RSL)\n:returns: The current state of the RSL- true if on, false if off",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getRadioLEDState"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the state of the \"Radio\" LED. On the RoboRIO, this reads from sysfs, so\nthis function should not be called multiple times per loop cycle to avoid\noverruns.\n:returns: The state of the LED.",
          "output": "wpilib._wpilib.RadioLEDState"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getSerialNumber"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the serial number of the roboRIO.\n:returns: The serial number of the roboRIO.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getTeamNumber"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the team number configured for the robot controller.\n:returns: team number, or 0 if not found.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getUserButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the state of the \"USER\" button on the roboRIO.\n@warning the User Button is used to stop user programs from automatically\nloading if it is held for more then 5 seconds. Because of this, it's not\nrecommended to be used by teams for any other purpose.\n:returns: True if the button is currently pressed down",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getVoltage3V3"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the voltage of the 3.3V rail.\n:returns: The controller 3.3V rail voltage value in Volts",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getVoltage5V"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the voltage of the 5V rail.\n:returns: The controller 5V rail voltage value in Volts",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "getVoltage6V"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the voltage of the 6V rail.\n:returns: The controller 6V rail voltage value in Volts",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "isBrownedOut"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the system is browned out.\n:returns: True if the system is browned out",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "isSysActive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if the FPGA outputs are enabled.\nThe outputs may be disabled if the robot is disabled or e-stopped, the\nwatchdog has expired, or if the roboRIO browns out.\n:returns: True if the FPGA outputs are enabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "isSystemTimeValid"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets if the system time is valid.\n:returns: True if the system time is valid, false otherwise",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "setBrownoutVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Set the voltage the roboRIO will brownout and disable all outputs.\nNote that this only does anything on the roboRIO 2.\nOn the roboRIO it is a no-op.\n:param brownoutVoltage: The brownout voltage",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "setEnabled3V3"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enables or disables the 3.3V rail.\n:param enabled: whether to enable the 3.3V rail.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "setEnabled5V"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enables or disables the 5V rail.\n:param enabled: whether to enable the 5V rail.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "setEnabled6V"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enables or disables the 6V rail.\n:param enabled: whether to enable the 6V rail.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotController",
            "FUNC": "setRadioLEDState"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.RadioLEDState"
            }
          },
          "colour": 270,
          "tooltip": "Set the state of the \"Radio\" LED. On the RoboRIO, this writes to sysfs, so\nthis function should not be called multiple times per loop cycle to avoid\noverruns.\n:param state: The state to set the LED to.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "RobotState",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotState",
            "FUNC": "isAutonomous"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns true if the robot is in autonomous mode.\n:returns: True if the robot is in autonomous mode.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotState",
            "FUNC": "isDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns true if the robot is disabled.\n:returns: True if the robot is disabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotState",
            "FUNC": "isEStopped"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns true if the robot is E-stopped.\n:returns: True if the robot is E-stopped.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotState",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns true if the robot is enabled.\n:returns: True if the robot is enabled.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotState",
            "FUNC": "isTeleop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns true if the robot is in teleop mode.\n:returns: True if the robot is in teleop mode.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.RobotState",
            "FUNC": "isTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns true if the robot is in test mode.\n:returns: True if the robot is in test mode.",
          "output": "bool"
        }
      ]
    },
    {
      "kind": "category",
      "name": "SD540",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "wpilib.SD540"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.SD540"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a SD540.\n:param channel: The PWM channel that the SD540 is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.SD540"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SD540",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "SPI",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "wpilib.SPI"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.SPI"
            },
            "ARG1": {
              "type": "wpilib._wpilib.SPI.Port"
            }
          },
          "colour": 300,
          "tooltip": "Constructor\n:param port: the physical SPI port",
          "output": "wpilib.SPI"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "configureAutoStall"
          },
          "inputs": {
            "ARG0": {
              "type": "hal._wpiHal.SPIPort"
            },
            "ARG1": {
              "type": "int"
            },
            "ARG2": {
              "type": "int"
            },
            "ARG3": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Configure the Auto SPI Stall time between reads.\n:param port:             The number of the port to use. 0-3 for Onboard CS0-CS2, 4 for\nMXP.\n:param csToSclkTicks:    the number of ticks to wait before asserting the cs\npin\n:param stallTicks:       the number of ticks to stall for\n:param pow2BytesPerRead: the number of bytes to read before stalling",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "forceAutoRead"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Force the engine to make a single transfer.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "freeAccumulator"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Frees the accumulator.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "freeAuto"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Frees the automatic SPI transfer engine.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "getAccumulatorAverage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the average of the accumulated value.\n:returns: The accumulated average value (value / count).",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "getAccumulatorCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the number of accumulated values.\nRead the count of the accumulated values since the accumulator was last\nReset().\n:returns: The number of times samples from the channel were accumulated.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "getAccumulatorIntegratedAverage"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the average of the integrated value.  This is the sum of (each value\ntimes the time between values), divided by the count.\n:returns: The average of the integrated value accumulated since the last\nReset().",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "getAccumulatorIntegratedValue"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the integrated value.  This is the sum of (each value * time between\nvalues).\n:returns: The integrated value accumulated since the last Reset().",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "getAccumulatorLastValue"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the last value read by the accumulator engine.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "getAccumulatorOutput"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the accumulated value and the number of accumulated values atomically.\nThis function reads the value and count atomically.\nThis can be used for averaging.\n:param value: Pointer to the 64-bit accumulated output.\n:param count: Pointer to the number of accumulation cycles.",
          "output": "tuple[int, int]"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "getAccumulatorValue"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the accumulated value.\n:returns: The 64-bit value accumulated since the last Reset().",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "getAutoDroppedCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of bytes dropped by the automatic SPI transfer engine due\nto the receive buffer being full.\n:returns: Number of bytes dropped",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "getPort"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the SPI port.\n:returns: The SPI port.",
          "output": "wpilib._wpilib.SPI.Port"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "initAccumulator"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            },
            "ARG1": {
              "type": "int"
            },
            "ARG2": {
              "type": "int"
            },
            "ARG3": {
              "type": "int"
            },
            "ARG4": {
              "type": "int"
            },
            "ARG5": {
              "type": "int"
            },
            "ARG6": {
              "type": "int"
            },
            "ARG7": {
              "type": "bool"
            },
            "ARG8": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Initialize the accumulator.\n:param period:     Time between reads\n:param cmd:        SPI command to send to request data\n:param xferSize:   SPI transfer size, in bytes\n:param validMask:  Mask to apply to received data for validity checking\n:param validValue: After valid_mask is applied, required matching value for\nvalidity checking\n:param dataShift:  Bit shift to apply to received data to get actual data\nvalue\n:param dataSize:   Size (in bits) of data field\n:param isSigned:   Is data field signed?\n:param bigEndian:  Is device big endian?",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "initAuto"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Initialize automatic SPI transfer engine.\nOnly a single engine is available, and use of it blocks use of all other\nchip select usage on the same physical SPI port while it is running.\n:param bufferSize: buffer size in bytes",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "read"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            },
            "ARG1": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Read a word from the receive FIFO.\nWaits for the current transfer to complete if the receive FIFO is empty.\nIf the receive FIFO is empty, there is no active transfer, and initiate\nis false, errors.\n:param initiate:     If true, this function pushes \"0\" into the transmit\nbuffer and initiates a transfer. If false, this\nfunction assumes that data is already in the receive\nFIFO from a previous write.\n:param dataReceived: Buffer to receive data from the device\n:param size:         The length of the transaction, in bytes",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "readAutoReceivedData"
          },
          "inputs": {
            "ARG0": {
              "type": "Buffer"
            },
            "ARG1": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Read data that has been transferred by the automatic SPI transfer engine.\nTransfers may be made a byte at a time, so it's necessary for the caller\nto handle cases where an entire transfer has not been completed.\nEach received data sequence consists of a timestamp followed by the\nreceived data bytes, one byte per word (in the least significant byte).\nThe length of each received data sequence is the same as the combined\nsize of the data and zeroSize set in SetAutoTransmitData().\nBlocks until numToRead words have been read or timeout expires.\nMay be called with numToRead=0 to retrieve how many words are available.\n:param buffer:    buffer where read words are stored\n:param numToRead: number of words to read\n:param timeout:   timeout (ms resolution)\n:returns: Number of words remaining to be read",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "resetAccumulator"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Resets the accumulator to zero.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "setAccumulatorCenter"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the center value of the accumulator.\nThe center value is subtracted from each value before it is added to the\naccumulator. This is used for the center value of devices like gyros and\naccelerometers to make integration work and to take the device offset into\naccount when integrating.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "setAccumulatorDeadband"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the accumulator's deadband.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "setAccumulatorIntegratedCenter"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the center value of the accumulator integrator.\nThe center value is subtracted from each value*dt before it is added to the\nintegrated value. This is used for the center value of devices like gyros\nand accelerometers to take the device offset into account when integrating.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "setAutoTransmitData"
          },
          "inputs": {
            "ARG0": {
              "type": "Buffer"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set the data to be transmitted by the engine.\nUp to 16 bytes are configurable, and may be followed by up to 127 zero\nbytes.\n:param dataToSend: data to send (maximum 16 bytes)\n:param zeroSize:   number of zeros to send after the data",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "setChipSelectActiveHigh"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Configure the chip select line to be active high.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "setChipSelectActiveLow"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Configure the chip select line to be active low.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "setClockRate"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Configure the rate of the generated clock signal.\nThe default value is 500,000Hz.\nThe maximum value is 4,000,000Hz.\n:param hz: The clock rate in Hertz.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "setMode"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.SPI.Mode"
            }
          },
          "colour": 270,
          "tooltip": "Sets the mode for the SPI device.\nMode 0 is Clock idle low, data sampled on rising edge\nMode 1 is Clock idle low, data sampled on falling edge\nMode 2 is Clock idle high, data sampled on falling edge\nMode 3 is Clock idle high, data sampled on rising edge\n:param mode: The mode to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "startAutoRate"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Start running the automatic SPI transfer engine at a periodic rate.\nInitAuto() and SetAutoTransmitData() must be called before calling this\nfunction.\n:param period: period between transfers (us resolution)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "startAutoTrigger"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.DigitalSource"
            },
            "ARG1": {
              "type": "bool"
            },
            "ARG2": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Start running the automatic SPI transfer engine when a trigger occurs.\nInitAuto() and SetAutoTransmitData() must be called before calling this\nfunction.\n:param source:  digital source for the trigger (may be an analog trigger)\n:param rising:  trigger on the rising edge\n:param falling: trigger on the falling edge",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "stopAuto"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Stop running the automatic SPI transfer engine.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "transaction"
          },
          "inputs": {
            "ARG0": {
              "type": "Buffer"
            },
            "ARG1": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Perform a simultaneous read/write transaction with the device\n:param dataToSend:   The data to be written out to the device\n:param dataReceived: Buffer to receive data from the device\n:param size:         The length of the transaction, in bytes",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SPI",
            "FUNC": "write"
          },
          "inputs": {
            "ARG0": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Write data to the peripheral device.  Blocks until there is space in the\noutput FIFO.\nIf not running in output only mode, also saves the data received\non the CIPO input during the transfer into the receive FIFO.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SPI",
            "VAR": "Mode"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SPI",
            "VAR": "Port"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SPI",
            "VAR": "Mode"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SPI",
            "VAR": "Port"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SPI.Mode",
            "ENUM_VALUE": "kMode0"
          },
          "output": "wpilib.SPI.Mode",
          "colour": 180,
          "tooltip": "SPI mode.\n\nMembers:\n\n  kMode0 : Clock idle low, data sampled on rising edge.\n\n  kMode1 : Clock idle low, data sampled on falling edge.\n\n  kMode2 : Clock idle high, data sampled on falling edge.\n\n  kMode3 : Clock idle high, data sampled on rising edge."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SPI.Mode",
            "ENUM_VALUE": "kMode1"
          },
          "output": "wpilib.SPI.Mode",
          "colour": 180,
          "tooltip": "SPI mode.\n\nMembers:\n\n  kMode0 : Clock idle low, data sampled on rising edge.\n\n  kMode1 : Clock idle low, data sampled on falling edge.\n\n  kMode2 : Clock idle high, data sampled on falling edge.\n\n  kMode3 : Clock idle high, data sampled on rising edge."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SPI.Mode",
            "ENUM_VALUE": "kMode2"
          },
          "output": "wpilib.SPI.Mode",
          "colour": 180,
          "tooltip": "SPI mode.\n\nMembers:\n\n  kMode0 : Clock idle low, data sampled on rising edge.\n\n  kMode1 : Clock idle low, data sampled on falling edge.\n\n  kMode2 : Clock idle high, data sampled on falling edge.\n\n  kMode3 : Clock idle high, data sampled on rising edge."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SPI.Mode",
            "ENUM_VALUE": "kMode3"
          },
          "output": "wpilib.SPI.Mode",
          "colour": 180,
          "tooltip": "SPI mode.\n\nMembers:\n\n  kMode0 : Clock idle low, data sampled on rising edge.\n\n  kMode1 : Clock idle low, data sampled on falling edge.\n\n  kMode2 : Clock idle high, data sampled on falling edge.\n\n  kMode3 : Clock idle high, data sampled on rising edge."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SPI.Port",
            "ENUM_VALUE": "kMXP"
          },
          "output": "wpilib.SPI.Port",
          "colour": 180,
          "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SPI.Port",
            "ENUM_VALUE": "kOnboardCS0"
          },
          "output": "wpilib.SPI.Port",
          "colour": 180,
          "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SPI.Port",
            "ENUM_VALUE": "kOnboardCS1"
          },
          "output": "wpilib.SPI.Port",
          "colour": 180,
          "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SPI.Port",
            "ENUM_VALUE": "kOnboardCS2"
          },
          "output": "wpilib.SPI.Port",
          "colour": 180,
          "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SPI.Port",
            "ENUM_VALUE": "kOnboardCS3"
          },
          "output": "wpilib.SPI.Port",
          "colour": 180,
          "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
        },
        {
          "kind": "category",
          "name": "Port",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SPI.Port",
                "ENUM_VALUE": "kMXP"
              },
              "output": "wpilib.SPI.Port",
              "colour": 180,
              "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SPI.Port",
                "ENUM_VALUE": "kOnboardCS0"
              },
              "output": "wpilib.SPI.Port",
              "colour": 180,
              "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SPI.Port",
                "ENUM_VALUE": "kOnboardCS1"
              },
              "output": "wpilib.SPI.Port",
              "colour": 180,
              "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SPI.Port",
                "ENUM_VALUE": "kOnboardCS2"
              },
              "output": "wpilib.SPI.Port",
              "colour": 180,
              "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SPI.Port",
                "ENUM_VALUE": "kOnboardCS3"
              },
              "output": "wpilib.SPI.Port",
              "colour": 180,
              "tooltip": "SPI port.\n\nMembers:\n\n  kOnboardCS0 : Onboard SPI bus port CS0.\n\n  kOnboardCS1 : Onboard SPI bus port CS1.\n\n  kOnboardCS2 : Onboard SPI bus port CS2.\n\n  kOnboardCS3 : Onboard SPI bus port CS3.\n\n  kMXP : MXP (roboRIO MXP) SPI bus port."
            }
          ]
        },
        {
          "kind": "category",
          "name": "Mode",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SPI.Mode",
                "ENUM_VALUE": "kMode0"
              },
              "output": "wpilib.SPI.Mode",
              "colour": 180,
              "tooltip": "SPI mode.\n\nMembers:\n\n  kMode0 : Clock idle low, data sampled on rising edge.\n\n  kMode1 : Clock idle low, data sampled on falling edge.\n\n  kMode2 : Clock idle high, data sampled on falling edge.\n\n  kMode3 : Clock idle high, data sampled on rising edge."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SPI.Mode",
                "ENUM_VALUE": "kMode1"
              },
              "output": "wpilib.SPI.Mode",
              "colour": 180,
              "tooltip": "SPI mode.\n\nMembers:\n\n  kMode0 : Clock idle low, data sampled on rising edge.\n\n  kMode1 : Clock idle low, data sampled on falling edge.\n\n  kMode2 : Clock idle high, data sampled on falling edge.\n\n  kMode3 : Clock idle high, data sampled on rising edge."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SPI.Mode",
                "ENUM_VALUE": "kMode2"
              },
              "output": "wpilib.SPI.Mode",
              "colour": 180,
              "tooltip": "SPI mode.\n\nMembers:\n\n  kMode0 : Clock idle low, data sampled on rising edge.\n\n  kMode1 : Clock idle low, data sampled on falling edge.\n\n  kMode2 : Clock idle high, data sampled on falling edge.\n\n  kMode3 : Clock idle high, data sampled on rising edge."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SPI.Mode",
                "ENUM_VALUE": "kMode3"
              },
              "output": "wpilib.SPI.Mode",
              "colour": 180,
              "tooltip": "SPI mode.\n\nMembers:\n\n  kMode0 : Clock idle low, data sampled on rising edge.\n\n  kMode1 : Clock idle low, data sampled on falling edge.\n\n  kMode2 : Clock idle high, data sampled on falling edge.\n\n  kMode3 : Clock idle high, data sampled on rising edge."
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "SendableBuilderImpl",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "wpilib.SendableBuilderImpl"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.SendableBuilderImpl"
            }
          },
          "colour": 300,
          "tooltip": "",
          "output": "wpilib.SendableBuilderImpl"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addBooleanArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[int]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addBooleanProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[bool]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addDoubleArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[float]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addDoubleProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[float]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addFloatArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[float]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addFloatProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[float]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addIntegerArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[int]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addIntegerProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[int]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addRawProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "str"
            },
            "ARG2": {
              "type": "Callable[[]"
            },
            "ARG3": {
              "type": "Any"
            },
            "ARG4": {
              "type": "Callable[[Buffer]"
            },
            "ARG5": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addSmallBooleanArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[List[int]]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[int]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addSmallDoubleArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[List[float]]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[float]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addSmallFloatArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[List[float]]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[float]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addSmallIntegerArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[List[int]]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[int]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addSmallRawProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "str"
            },
            "ARG2": {
              "type": "Callable[[List[int]]"
            },
            "ARG3": {
              "type": "Any"
            },
            "ARG4": {
              "type": "Callable[[Buffer]"
            },
            "ARG5": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addSmallStringArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[List[str]]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[str]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addSmallStringProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[List[str]]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[str]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addStringArrayProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[List[str]]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "addStringProperty"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Callable[[]"
            },
            "ARG2": {
              "type": "Any"
            },
            "ARG3": {
              "type": "Callable[[str]"
            },
            "ARG4": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "clearProperties"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Clear properties.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "getBackendKind"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets the kind of backend being used.\n:returns: Backend kind",
          "output": "wpiutil._wpiutil.SendableBuilder.BackendKind"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "getTable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the network table.\n:returns: The network table",
          "output": "ntcore._ntcore.NetworkTable"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "getTopic"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "",
          "output": "ntcore._ntcore.Topic"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "isActuator"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return whether this sendable should be treated as an actuator.\n:returns: True if actuator, false if not.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "isPublished"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return whether this sendable has an associated table.\n:returns: True if it has a table, false if not.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstBoolean"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstBooleanArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[int]"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstDouble"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstDoubleArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[float]"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstFloat"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstFloatArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[float]"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstInteger"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstIntegerArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[int]"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstRaw"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "str"
            },
            "ARG2": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstString"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "publishConstStringArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[str]"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "setActuator"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "setSafeState"
          },
          "inputs": {
            "ARG0": {
              "type": "Callable[[]"
            },
            "ARG1": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "setSmartDashboardType"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "setTable"
          },
          "inputs": {
            "ARG0": {
              "type": "ntcore._ntcore.NetworkTable"
            }
          },
          "colour": 270,
          "tooltip": "Set the network table.  Must be called prior to any Add* functions being\ncalled.\n:param table: Network table",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "setUpdateTable"
          },
          "inputs": {
            "ARG0": {
              "type": "Callable[[]"
            },
            "ARG1": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "startListeners"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Hook setters for all properties.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "startLiveWindowMode"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Start LiveWindow mode by hooking the setters for all properties.  Also\ncalls the SafeState function if one was provided.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "stopListeners"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Unhook setters for all properties.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "stopLiveWindowMode"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Stop LiveWindow mode by unhooking the setters for all properties.  Also\ncalls the SafeState function if one was provided.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "FUNC": "update"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Synchronize with network table values by calling the getters for all\nproperties and setters when the network table value has changed.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "VAR": "BackendKind"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SendableBuilderImpl",
            "VAR": "BackendKind"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpiutil._wpiutil.SendableBuilder.BackendKind",
            "ENUM_VALUE": "kNetworkTables"
          },
          "output": "wpiutil._wpiutil.SendableBuilder.BackendKind",
          "colour": 180,
          "tooltip": "The backend kinds used for the sendable builder.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kNetworkTables : NetworkTables."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpiutil._wpiutil.SendableBuilder.BackendKind",
            "ENUM_VALUE": "kUnknown"
          },
          "output": "wpiutil._wpiutil.SendableBuilder.BackendKind",
          "colour": 180,
          "tooltip": "The backend kinds used for the sendable builder.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kNetworkTables : NetworkTables."
        }
      ]
    },
    {
      "kind": "category",
      "name": "SendableChooser",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.SendableChooser",
            "FUNC": "wpilib.SendableChooser"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.SendableChooser"
            }
          },
          "colour": 300,
          "tooltip": "",
          "output": "wpilib.SendableChooser"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableChooser",
            "FUNC": "addOption"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Adds the given object to the list of options.\nOn the SmartDashboard on the desktop, the object will appear as the given\nname.\n:param name:   the name of the option\n:param object: the option",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableChooser",
            "FUNC": "getSelected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns a copy of the selected option (a std::weak_ptr<U> if T =\nstd::shared_ptr<U>).\nIf there is none selected, it will return the default. If there is none\nselected and no default, then it will return a value-initialized instance.\nFor integer types, this is 0. For container types like std::string, this is\nan empty string.\n:returns: The option selected",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableChooser",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableChooser",
            "FUNC": "onChange"
          },
          "inputs": {
            "ARG0": {
              "type": "Callable[[object]"
            },
            "ARG1": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "Bind a listener that's called when the selected value changes.\nOnly one listener can be bound. Calling this function will replace the\nprevious listener.\n:param listener: The function to call that accepts the new value",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableChooser",
            "FUNC": "setDefaultOption"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Add the given object to the list of options and marks it as the default.\nFunctionally, this is very close to AddOption() except that it will use\nthis as the default option if none other is explicitly selected.\n:param name:   the name of the option\n:param object: the option",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "SendableChooserBase",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SendableChooserBase",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "SensorUtil",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "FUNC": "checkAnalogInputChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Check that the analog input number is value.\nVerify that the analog input number is one of the legal channel numbers.\nChannel numbers are 0-based.\n:returns: Analog channel is valid",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "FUNC": "checkAnalogOutputChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Check that the analog output number is valid.\nVerify that the analog output number is one of the legal channel numbers.\nChannel numbers are 0-based.\n:returns: Analog channel is valid",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "FUNC": "checkDigitalChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Check that the digital channel number is valid.\nVerify that the channel number is one of the legal channel numbers. Channel\nnumbers are 0-based.\n:returns: Digital channel is valid",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "FUNC": "checkPWMChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Check that the digital channel number is valid.\nVerify that the channel number is one of the legal channel numbers. Channel\nnumbers are 0-based.\n:returns: PWM channel is valid",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "FUNC": "checkRelayChannel"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Check that the relay channel number is valid.\nVerify that the channel number is one of the legal channel numbers. Channel\nnumbers are 0-based.\n:returns: Relay channel is valid",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "FUNC": "getDefaultCTREPCMModule"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of the default solenoid module.\n:returns: The number of the default solenoid module.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "FUNC": "getDefaultREVPHModule"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of the default solenoid module.\n:returns: The number of the default solenoid module.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kAnalogInputs"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kAnalogOutputs"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kDigitalChannels"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kPwmChannels"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kRelayChannels"
          },
          "output": "int",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kAnalogInputs"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kAnalogOutputs"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kDigitalChannels"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kPwmChannels"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SensorUtil",
            "VAR": "kRelayChannels"
          },
          "inputs": {
            "VALUE": {
              "type": "int"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        }
      ]
    },
    {
      "kind": "category",
      "name": "SerialPort",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "disableTermination"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Disable termination behavior.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "enableTermination"
          },
          "inputs": {
            "ARG0": {
              "type": "str",
              "shadow": {
                "type": "text",
                "fields": {
                  "TEXT": "'\\n'"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Enable termination and specify the termination character.\nTermination is currently only implemented for receive.\nWhen the the terminator is received, the Read() or Scanf() will return\nfewer bytes than requested, stopping after the terminator.\n:param terminator: The character to use for termination.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "flush"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Force the output buffer to be written to the port.\nThis is used when SetWriteBufferMode() is set to kFlushWhenFull to force a\nflush before the buffer is full.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "getBytesReceived"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of bytes currently available to read from the serial port.\n:returns: The number of bytes available to read",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "read"
          },
          "inputs": {
            "ARG0": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Read raw bytes out of the buffer.\n:param buffer: Pointer to the buffer to store the bytes in.\n:param count:  The maximum number of bytes to read.\n:returns: The number of bytes actually read into the buffer.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "reset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Reset the serial port driver to a known state.\nEmpty the transmit and receive buffers in the device and formatted I/O.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "setFlowControl"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.SerialPort.FlowControl"
            }
          },
          "colour": 270,
          "tooltip": "Set the type of flow control to enable on this port.\nBy default, flow control is disabled.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "setReadBufferSize"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Specify the size of the input buffer.\nSpecify the amount of data that can be stored before data\nfrom the device is returned to Read or Scanf.  If you want\ndata that is received to be returned immediately, set this to 1.\nIt the buffer is not filled before the read timeout expires, all\ndata that has been received so far will be returned.\n:param size: The read buffer size.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "setTimeout"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Configure the timeout of the serial port.\nThis defines the timeout for transactions with the hardware.\nIt will affect reads and very large writes.\n:param timeout: The time to wait for I/O.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "setWriteBufferMode"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.SerialPort.WriteBufferMode"
            }
          },
          "colour": 270,
          "tooltip": "Specify the flushing behavior of the output buffer.\nWhen set to kFlushOnAccess, data is synchronously written to the serial\nport after each call to either Printf() or Write().\nWhen set to kFlushWhenFull, data will only be written to the serial port\nwhen the buffer is full or when Flush() is called.\n:param mode: The write buffer mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "setWriteBufferSize"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Specify the size of the output buffer.\nSpecify the amount of data that can be stored before being\ntransmitted to the device.\n:param size: The write buffer size.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "FUNC": "write"
          },
          "inputs": {
            "ARG0": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Write raw bytes to the buffer.\n:param buffer: Pointer to the buffer to read the bytes from.\n:param count:  The maximum number of bytes to write.\n:returns: The number of bytes actually written into the port.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "FlowControl"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "Parity"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "Port"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "StopBits"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "WriteBufferMode"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "FlowControl"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "Parity"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "Port"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "StopBits"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SerialPort",
            "VAR": "WriteBufferMode"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.FlowControl",
            "ENUM_VALUE": "kFlowControl_DtrDsr"
          },
          "output": "wpilib.SerialPort.FlowControl",
          "colour": 180,
          "tooltip": "Represents what type of flow control to use for serial communication.\n\nMembers:\n\n  kFlowControl_None : No flow control.\n\n  kFlowControl_XonXoff : XON/XOFF flow control.\n\n  kFlowControl_RtsCts : RTS/CTS flow control.\n\n  kFlowControl_DtrDsr : DTS/DSR flow control."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.FlowControl",
            "ENUM_VALUE": "kFlowControl_None"
          },
          "output": "wpilib.SerialPort.FlowControl",
          "colour": 180,
          "tooltip": "Represents what type of flow control to use for serial communication.\n\nMembers:\n\n  kFlowControl_None : No flow control.\n\n  kFlowControl_XonXoff : XON/XOFF flow control.\n\n  kFlowControl_RtsCts : RTS/CTS flow control.\n\n  kFlowControl_DtrDsr : DTS/DSR flow control."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.FlowControl",
            "ENUM_VALUE": "kFlowControl_RtsCts"
          },
          "output": "wpilib.SerialPort.FlowControl",
          "colour": 180,
          "tooltip": "Represents what type of flow control to use for serial communication.\n\nMembers:\n\n  kFlowControl_None : No flow control.\n\n  kFlowControl_XonXoff : XON/XOFF flow control.\n\n  kFlowControl_RtsCts : RTS/CTS flow control.\n\n  kFlowControl_DtrDsr : DTS/DSR flow control."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.FlowControl",
            "ENUM_VALUE": "kFlowControl_XonXoff"
          },
          "output": "wpilib.SerialPort.FlowControl",
          "colour": 180,
          "tooltip": "Represents what type of flow control to use for serial communication.\n\nMembers:\n\n  kFlowControl_None : No flow control.\n\n  kFlowControl_XonXoff : XON/XOFF flow control.\n\n  kFlowControl_RtsCts : RTS/CTS flow control.\n\n  kFlowControl_DtrDsr : DTS/DSR flow control."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Parity",
            "ENUM_VALUE": "kParity_Even"
          },
          "output": "wpilib.SerialPort.Parity",
          "colour": 180,
          "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Parity",
            "ENUM_VALUE": "kParity_Mark"
          },
          "output": "wpilib.SerialPort.Parity",
          "colour": 180,
          "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Parity",
            "ENUM_VALUE": "kParity_None"
          },
          "output": "wpilib.SerialPort.Parity",
          "colour": 180,
          "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Parity",
            "ENUM_VALUE": "kParity_Odd"
          },
          "output": "wpilib.SerialPort.Parity",
          "colour": 180,
          "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Parity",
            "ENUM_VALUE": "kParity_Space"
          },
          "output": "wpilib.SerialPort.Parity",
          "colour": 180,
          "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Port",
            "ENUM_VALUE": "kMXP"
          },
          "output": "wpilib.SerialPort.Port",
          "colour": 180,
          "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Port",
            "ENUM_VALUE": "kOnboard"
          },
          "output": "wpilib.SerialPort.Port",
          "colour": 180,
          "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Port",
            "ENUM_VALUE": "kUSB"
          },
          "output": "wpilib.SerialPort.Port",
          "colour": 180,
          "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Port",
            "ENUM_VALUE": "kUSB1"
          },
          "output": "wpilib.SerialPort.Port",
          "colour": 180,
          "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.Port",
            "ENUM_VALUE": "kUSB2"
          },
          "output": "wpilib.SerialPort.Port",
          "colour": 180,
          "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.StopBits",
            "ENUM_VALUE": "kStopBits_One"
          },
          "output": "wpilib.SerialPort.StopBits",
          "colour": 180,
          "tooltip": "Represents the number of stop bits to use for Serial Communication.\n\nMembers:\n\n  kStopBits_One : One stop bit.\n\n  kStopBits_OnePointFive : One and a half stop bits.\n\n  kStopBits_Two : Two stop bits."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.StopBits",
            "ENUM_VALUE": "kStopBits_OnePointFive"
          },
          "output": "wpilib.SerialPort.StopBits",
          "colour": 180,
          "tooltip": "Represents the number of stop bits to use for Serial Communication.\n\nMembers:\n\n  kStopBits_One : One stop bit.\n\n  kStopBits_OnePointFive : One and a half stop bits.\n\n  kStopBits_Two : Two stop bits."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.StopBits",
            "ENUM_VALUE": "kStopBits_Two"
          },
          "output": "wpilib.SerialPort.StopBits",
          "colour": 180,
          "tooltip": "Represents the number of stop bits to use for Serial Communication.\n\nMembers:\n\n  kStopBits_One : One stop bit.\n\n  kStopBits_OnePointFive : One and a half stop bits.\n\n  kStopBits_Two : Two stop bits."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.WriteBufferMode",
            "ENUM_VALUE": "kFlushOnAccess"
          },
          "output": "wpilib.SerialPort.WriteBufferMode",
          "colour": 180,
          "tooltip": "Represents which type of buffer mode to use when writing to a serial port.\n\nMembers:\n\n  kFlushOnAccess : Flush the buffer on each access.\n\n  kFlushWhenFull : Flush the buffer when it is full."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SerialPort.WriteBufferMode",
            "ENUM_VALUE": "kFlushWhenFull"
          },
          "output": "wpilib.SerialPort.WriteBufferMode",
          "colour": 180,
          "tooltip": "Represents which type of buffer mode to use when writing to a serial port.\n\nMembers:\n\n  kFlushOnAccess : Flush the buffer on each access.\n\n  kFlushWhenFull : Flush the buffer when it is full."
        },
        {
          "kind": "category",
          "name": "FlowControl",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.FlowControl",
                "ENUM_VALUE": "kFlowControl_DtrDsr"
              },
              "output": "wpilib.SerialPort.FlowControl",
              "colour": 180,
              "tooltip": "Represents what type of flow control to use for serial communication.\n\nMembers:\n\n  kFlowControl_None : No flow control.\n\n  kFlowControl_XonXoff : XON/XOFF flow control.\n\n  kFlowControl_RtsCts : RTS/CTS flow control.\n\n  kFlowControl_DtrDsr : DTS/DSR flow control."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.FlowControl",
                "ENUM_VALUE": "kFlowControl_None"
              },
              "output": "wpilib.SerialPort.FlowControl",
              "colour": 180,
              "tooltip": "Represents what type of flow control to use for serial communication.\n\nMembers:\n\n  kFlowControl_None : No flow control.\n\n  kFlowControl_XonXoff : XON/XOFF flow control.\n\n  kFlowControl_RtsCts : RTS/CTS flow control.\n\n  kFlowControl_DtrDsr : DTS/DSR flow control."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.FlowControl",
                "ENUM_VALUE": "kFlowControl_RtsCts"
              },
              "output": "wpilib.SerialPort.FlowControl",
              "colour": 180,
              "tooltip": "Represents what type of flow control to use for serial communication.\n\nMembers:\n\n  kFlowControl_None : No flow control.\n\n  kFlowControl_XonXoff : XON/XOFF flow control.\n\n  kFlowControl_RtsCts : RTS/CTS flow control.\n\n  kFlowControl_DtrDsr : DTS/DSR flow control."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.FlowControl",
                "ENUM_VALUE": "kFlowControl_XonXoff"
              },
              "output": "wpilib.SerialPort.FlowControl",
              "colour": 180,
              "tooltip": "Represents what type of flow control to use for serial communication.\n\nMembers:\n\n  kFlowControl_None : No flow control.\n\n  kFlowControl_XonXoff : XON/XOFF flow control.\n\n  kFlowControl_RtsCts : RTS/CTS flow control.\n\n  kFlowControl_DtrDsr : DTS/DSR flow control."
            }
          ]
        },
        {
          "kind": "category",
          "name": "Parity",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Parity",
                "ENUM_VALUE": "kParity_Even"
              },
              "output": "wpilib.SerialPort.Parity",
              "colour": 180,
              "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Parity",
                "ENUM_VALUE": "kParity_Mark"
              },
              "output": "wpilib.SerialPort.Parity",
              "colour": 180,
              "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Parity",
                "ENUM_VALUE": "kParity_None"
              },
              "output": "wpilib.SerialPort.Parity",
              "colour": 180,
              "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Parity",
                "ENUM_VALUE": "kParity_Odd"
              },
              "output": "wpilib.SerialPort.Parity",
              "colour": 180,
              "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Parity",
                "ENUM_VALUE": "kParity_Space"
              },
              "output": "wpilib.SerialPort.Parity",
              "colour": 180,
              "tooltip": "Represents the parity to use for serial communications.\n\nMembers:\n\n  kParity_None : No parity.\n\n  kParity_Odd : Odd parity.\n\n  kParity_Even : Even parity.\n\n  kParity_Mark : Parity bit always on.\n\n  kParity_Space : Parity bit always off."
            }
          ]
        },
        {
          "kind": "category",
          "name": "Port",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Port",
                "ENUM_VALUE": "kMXP"
              },
              "output": "wpilib.SerialPort.Port",
              "colour": 180,
              "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Port",
                "ENUM_VALUE": "kOnboard"
              },
              "output": "wpilib.SerialPort.Port",
              "colour": 180,
              "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Port",
                "ENUM_VALUE": "kUSB"
              },
              "output": "wpilib.SerialPort.Port",
              "colour": 180,
              "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Port",
                "ENUM_VALUE": "kUSB1"
              },
              "output": "wpilib.SerialPort.Port",
              "colour": 180,
              "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.Port",
                "ENUM_VALUE": "kUSB2"
              },
              "output": "wpilib.SerialPort.Port",
              "colour": 180,
              "tooltip": "Serial port.\n\nMembers:\n\n  kOnboard : Onboard serial port on the roboRIO.\n\n  kMXP : MXP (roboRIO MXP) serial port.\n\n  kUSB : USB serial port (same as KUSB1).\n\n  kUSB1 : USB serial port 1.\n\n  kUSB2 : USB serial port 2."
            }
          ]
        },
        {
          "kind": "category",
          "name": "StopBits",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.StopBits",
                "ENUM_VALUE": "kStopBits_One"
              },
              "output": "wpilib.SerialPort.StopBits",
              "colour": 180,
              "tooltip": "Represents the number of stop bits to use for Serial Communication.\n\nMembers:\n\n  kStopBits_One : One stop bit.\n\n  kStopBits_OnePointFive : One and a half stop bits.\n\n  kStopBits_Two : Two stop bits."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.StopBits",
                "ENUM_VALUE": "kStopBits_OnePointFive"
              },
              "output": "wpilib.SerialPort.StopBits",
              "colour": 180,
              "tooltip": "Represents the number of stop bits to use for Serial Communication.\n\nMembers:\n\n  kStopBits_One : One stop bit.\n\n  kStopBits_OnePointFive : One and a half stop bits.\n\n  kStopBits_Two : Two stop bits."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.StopBits",
                "ENUM_VALUE": "kStopBits_Two"
              },
              "output": "wpilib.SerialPort.StopBits",
              "colour": 180,
              "tooltip": "Represents the number of stop bits to use for Serial Communication.\n\nMembers:\n\n  kStopBits_One : One stop bit.\n\n  kStopBits_OnePointFive : One and a half stop bits.\n\n  kStopBits_Two : Two stop bits."
            }
          ]
        },
        {
          "kind": "category",
          "name": "WriteBufferMode",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.WriteBufferMode",
                "ENUM_VALUE": "kFlushOnAccess"
              },
              "output": "wpilib.SerialPort.WriteBufferMode",
              "colour": 180,
              "tooltip": "Represents which type of buffer mode to use when writing to a serial port.\n\nMembers:\n\n  kFlushOnAccess : Flush the buffer on each access.\n\n  kFlushWhenFull : Flush the buffer when it is full."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SerialPort.WriteBufferMode",
                "ENUM_VALUE": "kFlushWhenFull"
              },
              "output": "wpilib.SerialPort.WriteBufferMode",
              "colour": 180,
              "tooltip": "Represents which type of buffer mode to use when writing to a serial port.\n\nMembers:\n\n  kFlushOnAccess : Flush the buffer on each access.\n\n  kFlushWhenFull : Flush the buffer when it is full."
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "Servo",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "wpilib.Servo"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Servo"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor.\nBy default, 2.4 ms is used as the max PWM value and 0.6 ms is used as the\nmin PWM value.\n:param channel: The PWM channel to which the servo is attached. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.Servo"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the servo position.\nServo values range from 0.0 to 1.0 corresponding to the range of full left\nto full right. This returns the commanded position, not the position that\nthe servo is actually at, as the servo does not report its own position.\n:returns: Position from 0.0 to 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "getAngle"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the servo angle.\nThis returns the commanded angle, not the angle that the servo is actually\nat, as the servo does not report its own angle.\n:returns: The angle in degrees to which the servo is set.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "getBounds"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.microseconds"
            },
            "ARG1": {
              "type": "wpimath.units.microseconds"
            },
            "ARG2": {
              "type": "wpimath.units.microseconds"
            },
            "ARG3": {
              "type": "wpimath.units.microseconds"
            },
            "ARG4": {
              "type": "wpimath.units.microseconds"
            }
          },
          "colour": 270,
          "tooltip": "Get the bounds on the PWM values.\nThis gets the bounds on the PWM values for a particular each type of\ncontroller. The values determine the upper and lower speeds as well as the\ndeadband bracket.\n:param max:         The maximum pwm value\n:param deadbandMax: The high end of the deadband range\n:param center:      The center speed (off)\n:param deadbandMin: The low end of the deadband range\n:param min:         The minimum pwm value",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "getMaxAngle"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the maximum angle of the servo.\n:returns: The maximum angle of the servo in degrees.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "getMinAngle"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the minimum angle of the servo.\n:returns: The minimum angle of the servo in degrees.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "getPosition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the PWM value in terms of a position.\nThis is intended to be used by servos.\n@pre SetBounds() called.\n:returns: The position the servo is set to between 0.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "getPulseTime"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the PWM pulse time directly from the hardware.\nRead a microsecond value from a PWM channel.\n:returns: Microsecond PWM control value.",
          "output": "wpimath.units.microseconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "getSpeed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the PWM value in terms of speed.\nThis is intended to be used by motor controllers.\n@pre SetBounds() called.\n:returns: The most recently set speed between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the servo position.\nServo values range from 0.0 to 1.0 corresponding to the range of full left\nto full right.\n:param value: Position from 0.0 to 1.0.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setAlwaysHighMode"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Sets the PWM output to be a continuous high signal while enabled.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setAngle"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the servo angle.\nThe angles are based on the HS-322HD Servo, and have a range of 0 to 180\ndegrees.\nServo angles that are out of the supported range of the servo simply\n\"saturate\" in that direction. In other words, if the servo has a range of\n(X degrees to Y degrees) than angles of less than X result in an angle of\nX being set and angles of more than Y degrees result in an angle of Y being\nset.\n:param angle: The angle in degrees to set the servo.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setBounds"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.microseconds"
            },
            "ARG1": {
              "type": "wpimath.units.microseconds"
            },
            "ARG2": {
              "type": "wpimath.units.microseconds"
            },
            "ARG3": {
              "type": "wpimath.units.microseconds"
            },
            "ARG4": {
              "type": "wpimath.units.microseconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the bounds on the PWM pulse widths.\nThis sets the bounds on the PWM values for a particular type of controller.\nThe values determine the upper and lower speeds as well as the deadband\nbracket.\n:param max:         The max PWM pulse width in us\n:param deadbandMax: The high end of the deadband range pulse width in us\n:param center:      The center (off) pulse width in us\n:param deadbandMin: The low end of the deadband pulse width in us\n:param min:         The minimum pulse width in us",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Temporarily disables the PWM output. The next set call will re-enable\nthe output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setOffline"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Set the servo to offline.\nSet the servo raw value to 0 (undriven)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setPeriodMultiplier"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWM.PeriodMultiplier"
            }
          },
          "colour": 270,
          "tooltip": "Slow down the PWM signal for old devices.\n:param mult: The period multiplier to apply to this channel",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setPosition"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value based on a position.\nThis is intended to be used by servos.\n@pre SetBounds() called.\n:param pos: The position to set the servo between 0.0 and 1.0.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setPulseTime"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.microseconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM pulse time directly to the hardware.\nWrite a microsecond value to a PWM channel.\n:param time: Microsecond PWM value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setSpeed"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value based on a speed.\nThis is intended to be used by motor controllers.\n@pre SetBounds() called.\n:param speed: The speed to set the motor controller between -1.0 and 1.0.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Servo",
            "FUNC": "setZeroLatch"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Latches PWM to zero.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.Servo",
            "VAR": "PeriodMultiplier"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.Servo",
            "VAR": "PeriodMultiplier"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.PWM.PeriodMultiplier",
            "ENUM_VALUE": "kPeriodMultiplier_1X"
          },
          "output": "wpilib.PWM.PeriodMultiplier",
          "colour": 180,
          "tooltip": "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.PWM.PeriodMultiplier",
            "ENUM_VALUE": "kPeriodMultiplier_2X"
          },
          "output": "wpilib.PWM.PeriodMultiplier",
          "colour": 180,
          "tooltip": "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms"
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.PWM.PeriodMultiplier",
            "ENUM_VALUE": "kPeriodMultiplier_4X"
          },
          "output": "wpilib.PWM.PeriodMultiplier",
          "colour": 180,
          "tooltip": "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms"
        }
      ]
    },
    {
      "kind": "category",
      "name": "SmartDashboard",
      "contents": [
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "clearPersistent"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Stop making a key's value persistent through program restarts.\nThe key cannot be null.\n:param key: the key name",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "containsKey"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Determines whether the given key is in this table.\n:param key: the key to search for\n:returns: true if the table as a value assigned to the given key",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getBoolean"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Returns the value at the specified key.\nIf the key is not found, returns the default value.\n:param keyName:      the key\n:param defaultValue: the default value to set if key doesn't exist\n:returns: the value",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getBooleanArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Returns the boolean array the key maps to.\nIf the key does not exist or is of different type, it will return the\ndefault value.\n:param key:          The key to look up.\n:param defaultValue: The value to be returned if no value is found.\n:returns: the value associated with the given key or the given default value\nif there is no value associated with the key\n.. note:: This makes a copy of the array. If the overhead of this is a concern,\nuse GetValue() instead.\n.. note:: The returned array is std::vector<int> instead of std::vector<bool>\nbecause std::vector<bool> is special-cased in C++. 0 is false, any\nnon-zero value is true.",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getData"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Returns the value at the specified key.\n:param keyName: the key\n:returns: the value",
          "output": "wpiutil._wpiutil.Sendable"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getEntry"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Returns an NT Entry mapping to the specified key\nThis is useful if an entry is used often, or is read and then modified.\n:param key: the key\n:returns: the entry for the key",
          "output": "ntcore._ntcore.NetworkTableEntry"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getKeys"
          },
          "inputs": {
            "ARG0": {
              "type": "int",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": ":param types: bitmask of types; 0 is treated as a \"don't care\".\n:returns: keys currently in the table",
          "output": "list[str]"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getNumber"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Returns the value at the specified key.\nIf the key is not found, returns the default value.\n:param keyName:      the key\n:param defaultValue: the default value to set if the key doesn't exist\n:returns: the value",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getNumberArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Returns the number array the key maps to.\nIf the key does not exist or is of different type, it will return the\ndefault value.\n:param key:          The key to look up.\n:param defaultValue: The value to be returned if no value is found.\n:returns: the value associated with the given key or the given default value\nif there is no value associated with the key\n.. note:: This makes a copy of the array. If the overhead of this is a concern,\nuse GetValue() instead.",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getRaw"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Returns the raw value (byte array) the key maps to.\nIf the key does not exist or is of different type, it will return the\ndefault value.\n:param key:          The key to look up.\n:param defaultValue: The value to be returned if no value is found.\n:returns: the value associated with the given key or the given default value\nif there is no value associated with the key\n.. note:: This makes a copy of the raw contents. If the overhead of this is a\nconcern, use GetValue() instead.",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getString"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Returns the value at the specified key.\nIf the key is not found, returns the default value.\n:param keyName:      the key\n:param defaultValue: the default value to set if the key doesn't exist\n:returns: the value",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getStringArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Returns the string array the key maps to.\nIf the key does not exist or is of different type, it will return the\ndefault value.\n:param key:          The key to look up.\n:param defaultValue: The value to be returned if no value is found.\n:returns: the value associated with the given key or the given default value\nif there is no value associated with the key\n.. note:: This makes a copy of the array. If the overhead of this is a concern,\nuse GetValue() instead.",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "getValue"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Retrieves the complex value (such as an array) in this table into the\ncomplex data object.\n:param keyName: the key",
          "output": "ntcore._ntcore.Value"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "init"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "isPersistent"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Returns whether the value is persistent through program restarts.\nThe key cannot be null.\n:param key: the key name",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "postListenerTask"
          },
          "inputs": {
            "ARG0": {
              "type": "Callable[[]"
            },
            "ARG1": {
              "type": "Any"
            }
          },
          "colour": 270,
          "tooltip": "Posts a task from a listener to the ListenerExecutor, so that it can be run\nsynchronously from the main loop on the next call to updateValues().\n:param task: The task to run synchronously from the main thread.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "putBoolean"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Maps the specified key to the specified value in this table.\nThe value can be retrieved by calling the get method with a key that is\nequal to the original key.\n:param keyName: the key\n:param value:   the value\n:returns: False if the table key already exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "putBooleanArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[int]"
            }
          },
          "colour": 270,
          "tooltip": "Put a boolean array in the table.\n:param key:   the key to be assigned to\n:param value: the value that will be assigned\n:returns: False if the table key already exists with a different type\n.. note:: The array must be of int's rather than of bool's because\nstd::vector<bool> is special-cased in C++. 0 is false, any\nnon-zero value is true.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "putNumber"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Maps the specified key to the specified value in this table.\nThe value can be retrieved by calling the get method with a key that is\nequal to the original key.\n:param keyName: the key\n:param value:   the value\n:returns: False if the table key already exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "putNumberArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[float]"
            }
          },
          "colour": 270,
          "tooltip": "Put a number array in the table.\n:param key:   The key to be assigned to.\n:param value: The value that will be assigned.\n:returns: False if the table key already exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "putRaw"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Put a raw value (byte array) in the table.\n:param key:   The key to be assigned to.\n:param value: The value that will be assigned.\n:returns: False if the table key already exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "putString"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Maps the specified key to the specified value in this table.\nThe value can be retrieved by calling the get method with a key that is\nequal to the original key.\n:param keyName: the key\n:param value:   the value\n:returns: False if the table key already exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "putStringArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[str]"
            }
          },
          "colour": 270,
          "tooltip": "Put a string array in the table.\n:param key:   The key to be assigned to.\n:param value: The value that will be assigned.\n:returns: False if the table key already exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "putValue"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "ntcore._ntcore.Value"
            }
          },
          "colour": 270,
          "tooltip": "Maps the specified key to the specified complex value (such as an array) in\nthis table.\nThe value can be retrieved by calling the RetrieveValue method with a key\nthat is equal to the original key.\n:param keyName: the key\n:param value:   the value\n:returns: False if the table key already exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "setDefaultBoolean"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Gets the current value in the table, setting it if it does not exist.\n:param key:          the key\n:param defaultValue: the default value to set if key doesn't exist.\n:returns: False if the table key exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "setDefaultBooleanArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[int]"
            }
          },
          "colour": 270,
          "tooltip": "Gets the current value in the table, setting it if it does not exist.\n:param key:          the key\n:param defaultValue: the default value to set if key doesn't exist.\n:returns: False if the table key exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "setDefaultNumber"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Gets the current value in the table, setting it if it does not exist.\n:param key:          The key.\n:param defaultValue: The default value to set if key doesn't exist.\n:returns: False if the table key exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "setDefaultNumberArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[float]"
            }
          },
          "colour": 270,
          "tooltip": "Gets the current value in the table, setting it if it does not exist.\n:param key:          The key.\n:param defaultValue: The default value to set if key doesn't exist.\n:returns: False if the table key exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "setDefaultRaw"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "Buffer"
            }
          },
          "colour": 270,
          "tooltip": "Gets the current value in the table, setting it if it does not exist.\n:param key:          The key.\n:param defaultValue: The default value to set if key doesn't exist.\n:returns: False if the table key exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "setDefaultString"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Gets the current value in the table, setting it if it does not exist.\n:param key:          the key\n:param defaultValue: the default value to set if key doesn't exist.\n:returns: False if the table key exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "setDefaultStringArray"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "List[str]"
            }
          },
          "colour": 270,
          "tooltip": "Gets the current value in the table, setting it if it does not exist.\n:param key:          The key.\n:param defaultValue: The default value to set if key doesn't exist.\n:returns: False if the table key exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "setDefaultValue"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            },
            "ARG1": {
              "type": "ntcore._ntcore.Value"
            }
          },
          "colour": 270,
          "tooltip": "Gets the current value in the table, setting it if it does not exist.\n:param key:          the key\n:param defaultValue: The default value to set if key doesn't exist.\n:returns: False if the table key exists with a different type",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "setPersistent"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Makes a key's value persistent through program restarts.\n:param key: the key to make persistent",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.SmartDashboard",
            "FUNC": "updateValues"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Puts all sendable data to the dashboard.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "Solenoid",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Solenoid",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the current value of the solenoid.\n:returns: The current value of the solenoid.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Solenoid",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the channel this solenoid is connected to.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Solenoid",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Solenoid",
            "FUNC": "isDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if solenoid is Disabled.\nIf a solenoid is shorted, it is added to the DisabledList and\ndisabled until power cycle, or until faults are cleared.\n@see ClearAllPCMStickyFaults()\n:returns: If solenoid is disabled due to short.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Solenoid",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set the value of a solenoid.\n:param on: Turn the solenoid output off or on.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Solenoid",
            "FUNC": "setPulseDuration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the pulse duration in the pneumatics module. This is used in\nconjunction with the startPulse method to allow the pneumatics module to\ncontrol the timing of a pulse.\nOn the PCM, the timing can be controlled in 0.01 second increments, with a\nmaximum of 2.55 seconds. On the PH, the timing can be controlled in 0.001\nsecond increments, with a maximum of 65.534 seconds.\n@see startPulse()\n:param duration: The duration of the pulse.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Solenoid",
            "FUNC": "startPulse"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "%Trigger the pneumatics module to generate a pulse of the duration set in\nsetPulseDuration.\n@see setPulseDuration()",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Solenoid",
            "FUNC": "toggle"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Toggle the value of the solenoid.\nIf the solenoid is set to on, it'll be turned off. If the solenoid is set\nto off, it'll be turned on.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "Spark",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "wpilib.Spark"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Spark"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a SPARK.\n:param channel: The PWM channel that the SPARK is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.Spark"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Spark",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "StadiaController",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "wpilib.StadiaController"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.StadiaController"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct an instance of a Stadia controller.\nThe controller index is the USB port on the Driver Station.\n:param port: The port on the Driver Station that the controller is plugged\ninto (0-5).",
          "output": "wpilib.StadiaController"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "A"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the A button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the A button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "B"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the B button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the B button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "POVCenter"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the center of a POV on the\nHID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "POVDown"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 180 degree angle (down)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 180 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "POVDownLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 225 degree angle (down\nleft) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 225 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "POVDownRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 135 degree angle (right\ndown) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 135 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "POVLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 270 degree angle (left)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 270 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "POVRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 90 degree angle (right)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 90 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "POVUp"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 0 degree angle (up) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 0 degree angle of a POV on\nthe HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "POVUpLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 315 degree angle (left\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 315 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "POVUpRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 45 degree angle (right\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 45 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "X"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the X button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the X button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "Y"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the Y button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the Y button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "axisGreaterThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is greater than\nthe provided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "axisLessThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is less than the\nprovided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "button"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around this button's digital signal.\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n:returns: an event instance representing the button's digital signal attached\nto the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "ellipses"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the ellipses button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the ellipses button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "frame"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the frame button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the frame button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getAButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the A button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getAButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the A button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getAButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the A button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getAxisCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of axes for the HID.\n:returns: the number of axis for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getAxisType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the axis type of a joystick axis.\n:returns: the axis type of a joystick axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getBButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the B button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getBButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the B button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getBButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the B button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getButtonCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of buttons for the HID.\n:returns: the number of buttons on the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getEllipsesButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the ellipses button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getEllipsesButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the ellipses button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getEllipsesButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the ellipses button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getFrameButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the frame button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getFrameButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the frame button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getFrameButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the frame button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getGoogleButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the google button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getGoogleButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the google button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getGoogleButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the google button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getHamburgerButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the hamburger button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getHamburgerButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the hamburger button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getHamburgerButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the hamburger button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftBumper"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the left bumper (LB) button on the controller.\n:returns: the state of the button",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftBumperPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left bumper (LB) was pressed since the last check.\n:returns: Whether the button was pressed since the last check",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftBumperReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left bumper (LB) was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftStickButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the left stick button (LSB) on the controller.\n:returns: the state of the button",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftStickButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left stick button (LSB) was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftStickButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left stick button (LSB) was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftTriggerButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the left trigger button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftTriggerButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left trigger button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftTriggerButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left trigger button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the X axis value of left side of the controller.\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getLeftY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Y axis value of left side of the controller.\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getName"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the name of the HID.\n:returns: the name of the HID.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getPOV"
          },
          "inputs": {
            "ARG0": {
              "type": "int",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Get the angle in degrees of a POV on the HID.\nThe POV angles start at 0 in the up direction, and increase clockwise\n(e.g. right is 90, upper-left is 315).\n:param pov: The index of the POV to read (starting at 0)\n:returns: the angle of the POV in degrees, or -1 if the POV is not pressed.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getPOVCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of POVs for the HID.\n:returns: the number of POVs for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getPort"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the port number of the HID.\n:returns: The port number of the HID.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRawAxis"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the value of the axis.\n:param axis: The axis to read, starting at 0.\n:returns: The value of the axis.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRawButton"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the button value (starting at button 1).\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n:param button: The button number to be read (starting at 1)\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRawButtonPressed"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRawButtonReleased"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightBumper"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the right bumper (RB) button on the controller.\n:returns: the state of the button",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightBumperPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right bumper (RB) was pressed since the last check.\n:returns: Whether the button was pressed since the last check",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightBumperReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right bumper (RB) was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightStickButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the right stick button (RSB) on the controller.\n:returns: the state of the button",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightStickButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right stick button (RSB) was pressed since the last check.\n:returns: Whether the button was pressed since the last check",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightStickButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right stick button (RSB) was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightTriggerButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the right trigger button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightTriggerButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right trigger button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightTriggerButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right trigger button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the X axis value of right side of the controller.\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getRightY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Y axis value of right side of the controller.\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getStadiaButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the stadia button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getStadiaButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the stadia button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getStadiaButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the stadia button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the type of the HID.\n:returns: the type of the HID.",
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getXButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the X button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getXButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the X button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getXButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the X button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getYButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Y button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getYButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Y button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "getYButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Y button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "google"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the google button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the google button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "hamburger"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the hamburger button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the hamburger button's digital\nsignal attached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "isConnected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the HID is connected.\n:returns: true if the HID is connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "leftBumper"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the left bumper's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the left bumper's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "leftStick"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the left stick's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the left stick's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "leftTrigger"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the left trigger button's digital\nsignal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the left trigger button's digital\nsignal attached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "rightBumper"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the right bumper's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the right bumper's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "rightStick"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the right stick's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the right stick's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "rightTrigger"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the right trigger button's digital\nsignal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the right trigger button's digital\nsignal attached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "setOutput"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set a single HID output value for the HID.\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "setOutputs"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set all output values for the HID.\n:param value: The 32 bit output value (1 bit for each output)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "setRumble"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.interfaces._interfaces.GenericHID.RumbleType"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the rumble output for the HID.\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "FUNC": "stadia"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the stadia button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the stadia button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "VAR": "Axis"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "VAR": "Button"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "VAR": "HIDType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "VAR": "RumbleType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "VAR": "Axis"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "VAR": "Button"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "VAR": "HIDType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.StadiaController",
            "VAR": "RumbleType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHID1stPerson"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDDriving"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDFlight"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDJoystick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadeStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDancePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDrumKit"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputFlightStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar2"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar3"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputWheel"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kBothRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kLeftRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kRightRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "category",
          "name": "Axis",
          "contents": [
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Axis",
                "VAR": "kLeftX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Axis",
                "VAR": "kLeftY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Axis",
                "VAR": "kRightX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Axis",
                "VAR": "kRightY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Axis",
                "VAR": "kLeftX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Axis",
                "VAR": "kLeftY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Axis",
                "VAR": "kRightX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Axis",
                "VAR": "kRightY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            }
          ]
        },
        {
          "kind": "category",
          "name": "Button",
          "contents": [
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kA"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kB"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kEllipses"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kFrame"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kGoogle"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kHamburger"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kLeftBumper"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kLeftStick"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kLeftTrigger"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kRightBumper"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kRightStick"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kRightTrigger"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kStadia"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kA"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kB"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kEllipses"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kFrame"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kGoogle"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kHamburger"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kLeftBumper"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kLeftStick"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kLeftTrigger"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kRightBumper"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kRightStick"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kRightTrigger"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kStadia"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.StadiaController.Button",
                "VAR": "kY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "SynchronousInterrupt",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SynchronousInterrupt",
            "FUNC": "getFallingTimestamp"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the timestamp of the last falling edge.\nThis function does not require the interrupt to be enabled to work.\nThis only works if falling edge was configured using setInterruptEdges.\n:returns: the timestamp in seconds relative to getFPGATime",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SynchronousInterrupt",
            "FUNC": "getRisingTimestamp"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the timestamp (relative to FPGA Time) of the last rising edge.\n:returns: the timestamp in seconds relative to getFPGATime",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SynchronousInterrupt",
            "FUNC": "setInterruptEdges"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set which edges cause an interrupt to occur.\n:param risingEdge:  true to trigger on rising edge, false otherwise.\n:param fallingEdge: true to trigger on falling edge, false otherwise",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SynchronousInterrupt",
            "FUNC": "waitForInterrupt"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            },
            "ARG1": {
              "type": "bool",
              "shadow": {
                "type": "logic_boolean",
                "fields": {
                  "BOOL": "TRUE"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Wait for an interrupt to occur.\nBoth rising and falling edge can be returned if both a rising and\nfalling happened between calls, and ignorePrevious is false.\n:param timeout:        The timeout to wait for. 0s or less will return immediately.\n:param ignorePrevious: True to ignore any previous interrupts, false to\nreturn interrupt value if an interrupt has occurred since last call.\n:returns: The edge(s) that were triggered, or timeout.",
          "output": "wpilib._wpilib.SynchronousInterrupt.WaitResult"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.SynchronousInterrupt",
            "FUNC": "wakeupWaitingInterrupt"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Wake up an existing wait call. Can be called from any thread.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.SynchronousInterrupt",
            "VAR": "WaitResult"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.SynchronousInterrupt",
            "VAR": "WaitResult"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SynchronousInterrupt.WaitResult",
            "ENUM_VALUE": "kBoth"
          },
          "output": "wpilib.SynchronousInterrupt.WaitResult",
          "colour": 180,
          "tooltip": "Event trigger combinations for a synchronous interrupt.\n\nMembers:\n\n  kTimeout : Timeout event.\n\n  kRisingEdge : Rising edge event.\n\n  kFallingEdge : Falling edge event.\n\n  kBoth : Both rising and falling edge events."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SynchronousInterrupt.WaitResult",
            "ENUM_VALUE": "kFallingEdge"
          },
          "output": "wpilib.SynchronousInterrupt.WaitResult",
          "colour": 180,
          "tooltip": "Event trigger combinations for a synchronous interrupt.\n\nMembers:\n\n  kTimeout : Timeout event.\n\n  kRisingEdge : Rising edge event.\n\n  kFallingEdge : Falling edge event.\n\n  kBoth : Both rising and falling edge events."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SynchronousInterrupt.WaitResult",
            "ENUM_VALUE": "kRisingEdge"
          },
          "output": "wpilib.SynchronousInterrupt.WaitResult",
          "colour": 180,
          "tooltip": "Event trigger combinations for a synchronous interrupt.\n\nMembers:\n\n  kTimeout : Timeout event.\n\n  kRisingEdge : Rising edge event.\n\n  kFallingEdge : Falling edge event.\n\n  kBoth : Both rising and falling edge events."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.SynchronousInterrupt.WaitResult",
            "ENUM_VALUE": "kTimeout"
          },
          "output": "wpilib.SynchronousInterrupt.WaitResult",
          "colour": 180,
          "tooltip": "Event trigger combinations for a synchronous interrupt.\n\nMembers:\n\n  kTimeout : Timeout event.\n\n  kRisingEdge : Rising edge event.\n\n  kFallingEdge : Falling edge event.\n\n  kBoth : Both rising and falling edge events."
        },
        {
          "kind": "category",
          "name": "WaitResult",
          "contents": [
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SynchronousInterrupt.WaitResult",
                "ENUM_VALUE": "kBoth"
              },
              "output": "wpilib.SynchronousInterrupt.WaitResult",
              "colour": 180,
              "tooltip": "Event trigger combinations for a synchronous interrupt.\n\nMembers:\n\n  kTimeout : Timeout event.\n\n  kRisingEdge : Rising edge event.\n\n  kFallingEdge : Falling edge event.\n\n  kBoth : Both rising and falling edge events."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SynchronousInterrupt.WaitResult",
                "ENUM_VALUE": "kFallingEdge"
              },
              "output": "wpilib.SynchronousInterrupt.WaitResult",
              "colour": 180,
              "tooltip": "Event trigger combinations for a synchronous interrupt.\n\nMembers:\n\n  kTimeout : Timeout event.\n\n  kRisingEdge : Rising edge event.\n\n  kFallingEdge : Falling edge event.\n\n  kBoth : Both rising and falling edge events."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SynchronousInterrupt.WaitResult",
                "ENUM_VALUE": "kRisingEdge"
              },
              "output": "wpilib.SynchronousInterrupt.WaitResult",
              "colour": 180,
              "tooltip": "Event trigger combinations for a synchronous interrupt.\n\nMembers:\n\n  kTimeout : Timeout event.\n\n  kRisingEdge : Rising edge event.\n\n  kFallingEdge : Falling edge event.\n\n  kBoth : Both rising and falling edge events."
            },
            {
              "kind": "block",
              "type": "enum_value",
              "fields": {
                "ENUM_TYPE": "wpilib.SynchronousInterrupt.WaitResult",
                "ENUM_VALUE": "kTimeout"
              },
              "output": "wpilib.SynchronousInterrupt.WaitResult",
              "colour": 180,
              "tooltip": "Event trigger combinations for a synchronous interrupt.\n\nMembers:\n\n  kTimeout : Timeout event.\n\n  kRisingEdge : Rising edge event.\n\n  kFallingEdge : Falling edge event.\n\n  kBoth : Both rising and falling edge events."
            }
          ]
        }
      ]
    },
    {
      "kind": "category",
      "name": "Talon",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "wpilib.Talon"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Talon"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a %Talon (original or %Talon SR).\n:param channel: The PWM channel number that the %Talon is attached to. 0-9\nare on-board, 10-19 are on the MXP port",
          "output": "wpilib.Talon"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Talon",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "TimedRobot",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "wpilib.TimedRobot"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.TimedRobot"
            },
            "ARG1": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for TimedRobot.\n:param period: Period.",
          "output": "wpilib.TimedRobot"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "addPeriodic"
          },
          "inputs": {
            "ARG0": {
              "type": "Callable[[]"
            },
            "ARG1": {
              "type": "Any"
            },
            "ARG2": {
              "type": "wpimath.units.seconds"
            },
            "ARG3": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Add a callback to run at a specific period with a starting time offset.\nThis is scheduled on TimedRobot's Notifier, so TimedRobot and the callback\nrun synchronously. Interactions between them are thread-safe.\n:param callback: The callback to run.\n:param period:   The period at which to run the callback.\n:param offset:   The offset from the common starting time. This is useful\nfor scheduling a callback in a different timeslot relative\nto TimedRobot.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "autonomousExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for autonomous mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits autonomous mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "autonomousInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for autonomous mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time the robot enters autonomous mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "autonomousPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for autonomous mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in\nautonomous mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "disabledExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for disabled mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits disabled mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "disabledInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for disabled mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time\nthe robot enters disabled mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "disabledPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for disabled mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in disabled\nmode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "driverStationConnected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Code that needs to know the DS state should go here.\nUsers should override this method for initialization that needs to occur\nafter the DS is connected, such as needing the alliance information.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "enableLiveWindowInTest"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Sets whether LiveWindow operation is enabled during test mode.\n:param testLW: True to enable, false to disable. Defaults to false.\n@throws if called in test mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "endCompetition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Ends the main loop in StartCompetition().",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "getControlState"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "More efficient way to determine what state the robot is in.\n:returns: booleans representing enabled, isautonomous, istest\n.. versionadded:: 2019.2.1\n.. note:: This function only exists in RobotPy",
          "output": "tuple[bool, bool, bool]"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "getPeriod"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets time period between calls to Periodic() functions.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "getRuntimeType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current runtime type.\n:returns: Current runtime type.",
          "output": "wpilib._wpilib.RuntimeType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isAutonomous"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Autonomous mode.\n:returns: True if the robot is currently operating Autonomously as determined\nby the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isAutonomousEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Autonomous mode and enabled.\n:returns: True if the robot us currently operating Autonomously while enabled\nas determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the Robot is currently disabled.\n:returns: True if the Robot is currently disabled by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the Robot is currently enabled.\n:returns: True if the Robot is currently enabled by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isLiveWindowEnabledInTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether LiveWindow operation is enabled during test mode.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isReal"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the robot is real.\n:returns: If the robot is running in the real world.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isSimulation"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the robot is a simulation.\n:returns: If the robot is running in simulation.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isTeleop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Operator Control mode.\n:returns: True if the robot is currently operating in Tele-Op mode as\ndetermined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isTeleopEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is current in Operator Control mode and enabled.\n:returns: True if the robot is currently operating in Tele-Op mode while\nenabled as determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Test mode.\n:returns: True if the robot is currently running in Test mode as determined\nby the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "isTestEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is current in Test mode and enabled.\n:returns: True if the robot is currently operating in Test mode while\nenabled as determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "main"
          },
          "inputs": {
            "ARG0": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Starting point for the application",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "robotInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Robot-wide initialization code should go here.\nUsers should override this method for default Robot-wide initialization\nwhich will be called when the robot is first powered on. It will be called\nexactly one time.\nWarning: the Driver Station \"Robot Code\" light and FMS \"Robot Ready\"\nindicators will be off until RobotInit() exits. Code in RobotInit() that\nwaits for enable will cause the robot to never indicate that the code is\nready, causing the robot to be bypassed in a match.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "robotPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for all modes should go here.\nThis function is called each time a new packet is received from the driver\nstation.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "setNetworkTablesFlushEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enables or disables flushing NetworkTables every loop iteration.\nBy default, this is enabled.\n:param enabled: True to enable, false to disable",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "startCompetition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Provide an alternate \"main loop\" via StartCompetition().",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "teleopExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for teleop mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits teleop mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "teleopInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for teleop mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time the robot enters teleop mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "teleopPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for teleop mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in teleop\nmode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "testExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for test mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits test mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "testInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for test mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time the robot enters test mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "FUNC": "testPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for test mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in test\nmode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "VAR": "kDefaultPeriod"
          },
          "output": "float",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "VAR": "kDefaultPeriod"
          },
          "inputs": {
            "VALUE": {
              "type": "float"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "VAR": "logger"
          },
          "output": "logging.Logger",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.TimedRobot",
            "VAR": "logger"
          },
          "inputs": {
            "VALUE": {
              "type": "logging.Logger"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        }
      ]
    },
    {
      "kind": "category",
      "name": "Timer",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "wpilib.Timer"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Timer"
            }
          },
          "colour": 300,
          "tooltip": "Create a new timer object.\nCreate a new timer object and reset the time to zero. The timer is\ninitially not running and must be started.",
          "output": "wpilib.Timer"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "advanceIfElapsed"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Check if the period specified has passed and if it has, advance the start\ntime by that period. This is useful to decide if it's time to do periodic\nwork without drifting later by the time it took to get around to checking.\n:param period: The period to check for.\n:returns: True if the period has passed.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current time from the timer. If the clock is running it is derived\nfrom the current system clock the start time stored in the timer class. If\nthe clock is not running, then return the time when it was last stopped.\n:returns: Current time value for this timer in seconds",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "getFPGATimestamp"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the FPGA system clock time in seconds.\nReturn the time from the FPGA hardware clock in seconds since the FPGA\nstarted. Rolls over after 71 minutes.\n:returns: Robot running time in seconds.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "getMatchTime"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the approximate match time.\nThe FMS does not send an official match time to the robots, but does send\nan approximate match time. The value will count down the time remaining in\nthe current period (auto or teleop).\nWarning: This is not an official time (so it cannot be used to dispute ref\ncalls or guarantee that a function will trigger before the match ends).\nThe Practice Match function of the DS approximates the behavior seen on the\nfield.\n:returns: Time remaining in current match period (auto or teleop)",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "hasElapsed"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Check if the period specified has passed.\n:param period: The period to check.\n:returns: True if the period has passed.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "reset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Reset the timer by setting the time to 0.\nMake the timer startTime the current time so new requests will be relative\nto now.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "restart"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Restart the timer by stopping the timer, if it is not already stopped,\nresetting the accumulated time, then starting the timer again. If you\nwant an event to periodically reoccur at some time interval from the\nstart time, consider using AdvanceIfElapsed() instead.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "start"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Start the timer running.\nJust set the running flag to true indicating that all time requests should\nbe relative to the system clock. Note that this method is a no-op if the\ntimer is already running.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Timer",
            "FUNC": "stop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Stop the timer.\nThis computes the time as of now and clears the running flag, causing all\nsubsequent time requests to be read from the accumulated time rather than\nlooking at the system clock.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "TimesliceRobot",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "wpilib.TimesliceRobot"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.TimesliceRobot"
            },
            "ARG1": {
              "type": "wpimath.units.seconds"
            },
            "ARG2": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for TimesliceRobot.\n:param robotPeriodicAllocation: The allocation to give the TimesliceRobot\nperiodic functions.\n:param controllerPeriod:        The controller period. The sum of all scheduler\nallocations should be less than or equal to this\nvalue.",
          "output": "wpilib.TimesliceRobot"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "addPeriodic"
          },
          "inputs": {
            "ARG0": {
              "type": "Callable[[]"
            },
            "ARG1": {
              "type": "Any"
            },
            "ARG2": {
              "type": "wpimath.units.seconds"
            },
            "ARG3": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Add a callback to run at a specific period with a starting time offset.\nThis is scheduled on TimedRobot's Notifier, so TimedRobot and the callback\nrun synchronously. Interactions between them are thread-safe.\n:param callback: The callback to run.\n:param period:   The period at which to run the callback.\n:param offset:   The offset from the common starting time. This is useful\nfor scheduling a callback in a different timeslot relative\nto TimedRobot.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "autonomousExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for autonomous mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits autonomous mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "autonomousInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for autonomous mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time the robot enters autonomous mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "autonomousPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for autonomous mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in\nautonomous mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "disabledExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for disabled mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits disabled mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "disabledInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for disabled mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time\nthe robot enters disabled mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "disabledPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for disabled mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in disabled\nmode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "driverStationConnected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Code that needs to know the DS state should go here.\nUsers should override this method for initialization that needs to occur\nafter the DS is connected, such as needing the alliance information.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "enableLiveWindowInTest"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Sets whether LiveWindow operation is enabled during test mode.\n:param testLW: True to enable, false to disable. Defaults to false.\n@throws if called in test mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "endCompetition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Ends the main loop in StartCompetition().",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "getControlState"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "More efficient way to determine what state the robot is in.\n:returns: booleans representing enabled, isautonomous, istest\n.. versionadded:: 2019.2.1\n.. note:: This function only exists in RobotPy",
          "output": "tuple[bool, bool, bool]"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "getPeriod"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Gets time period between calls to Periodic() functions.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "getRuntimeType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the current runtime type.\n:returns: Current runtime type.",
          "output": "wpilib._wpilib.RuntimeType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isAutonomous"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Autonomous mode.\n:returns: True if the robot is currently operating Autonomously as determined\nby the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isAutonomousEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Autonomous mode and enabled.\n:returns: True if the robot us currently operating Autonomously while enabled\nas determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isDisabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the Robot is currently disabled.\n:returns: True if the Robot is currently disabled by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the Robot is currently enabled.\n:returns: True if the Robot is currently enabled by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isLiveWindowEnabledInTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether LiveWindow operation is enabled during test mode.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isReal"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the robot is real.\n:returns: If the robot is running in the real world.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isSimulation"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the robot is a simulation.\n:returns: If the robot is running in simulation.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isTeleop"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Operator Control mode.\n:returns: True if the robot is currently operating in Tele-Op mode as\ndetermined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isTeleopEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is current in Operator Control mode and enabled.\n:returns: True if the robot is currently operating in Tele-Op mode while\nenabled as determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isTest"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is currently in Test mode.\n:returns: True if the robot is currently running in Test mode as determined\nby the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "isTestEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the robot is current in Test mode and enabled.\n:returns: True if the robot is currently operating in Test mode while\nenabled as determined by the Driver Station.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "main"
          },
          "inputs": {
            "ARG0": {
              "type": "object"
            }
          },
          "colour": 270,
          "tooltip": "Starting point for the application",
          "output": "object"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "robotInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Robot-wide initialization code should go here.\nUsers should override this method for default Robot-wide initialization\nwhich will be called when the robot is first powered on. It will be called\nexactly one time.\nWarning: the Driver Station \"Robot Code\" light and FMS \"Robot Ready\"\nindicators will be off until RobotInit() exits. Code in RobotInit() that\nwaits for enable will cause the robot to never indicate that the code is\nready, causing the robot to be bypassed in a match.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "robotPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for all modes should go here.\nThis function is called each time a new packet is received from the driver\nstation.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "schedule"
          },
          "inputs": {
            "ARG0": {
              "type": "Callable[[]"
            },
            "ARG1": {
              "type": "Any"
            },
            "ARG2": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Schedule a periodic function with the constructor's controller period and\nthe given allocation. The function's runtime allocation will be placed\nafter the end of the previous one's.\nIf a call to this function makes the allocations exceed the controller\nperiod, an exception will be thrown since that means the TimesliceRobot\nperiodic functions and the given function will have conflicting\ntimeslices.\n:param func:       Function to schedule.\n:param allocation: The function's runtime allocation out of the controller\nperiod.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "setNetworkTablesFlushEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enables or disables flushing NetworkTables every loop iteration.\nBy default, this is enabled.\n:param enabled: True to enable, false to disable",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "startCompetition"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Provide an alternate \"main loop\" via StartCompetition().",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "teleopExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for teleop mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits teleop mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "teleopInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for teleop mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time the robot enters teleop mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "teleopPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for teleop mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in teleop\nmode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "testExit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Exit code for test mode should go here.\nUsers should override this method for code which will be called each time\nthe robot exits test mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "testInit"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Initialization code for test mode should go here.\nUsers should override this method for initialization code which will be\ncalled each time the robot enters test mode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "FUNC": "testPeriodic"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Periodic code for test mode should go here.\nUsers should override this method for code which will be called each time a\nnew packet is received from the driver station and the robot is in test\nmode.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "VAR": "kDefaultPeriod"
          },
          "output": "float",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "VAR": "kDefaultPeriod"
          },
          "inputs": {
            "VALUE": {
              "type": "float"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "VAR": "logger"
          },
          "output": "logging.Logger",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.TimesliceRobot",
            "VAR": "logger"
          },
          "inputs": {
            "VALUE": {
              "type": "logging.Logger"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        }
      ]
    },
    {
      "kind": "category",
      "name": "Tracer",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Tracer",
            "FUNC": "wpilib.Tracer"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Tracer"
            }
          },
          "colour": 300,
          "tooltip": "Constructs a Tracer instance.",
          "output": "wpilib.Tracer"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Tracer",
            "FUNC": "addEpoch"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Adds time since last epoch to the list printed by PrintEpochs().\nEpochs are a way to partition the time elapsed so that when overruns occur,\none can determine which parts of an operation consumed the most time.\n:param epochName: The name to associate with the epoch.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Tracer",
            "FUNC": "clearEpochs"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Clears all epochs.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Tracer",
            "FUNC": "getEpochs"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retreives list of epochs added so far as a string\n.. versionadded:: 2021.1.2\n.. note:: This function only exists in RobotPy",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Tracer",
            "FUNC": "printEpochs"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Prints list of epochs added so far and their times to the DriverStation.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Tracer",
            "FUNC": "resetTimer"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Restarts the epoch timer.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "Ultrasonic",
      "contents": [
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "getEchoChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the echo channel.\n:returns: The echo channel.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "getRange"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the range from the ultrasonic sensor.\n:returns: Range of the target returned from the ultrasonic sensor. If there\nis no valid value yet, i.e. at least one measurement hasn't\ncompleted, then return 0.",
          "output": "wpimath.units.meters"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "getRangeInches"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpimath.units.inches"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "getRangeMM"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "wpimath.units.millimeters"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "isEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "isRangeValid"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if there is a valid range measurement.\nThe ranges are accumulated in a counter that will increment on each edge of\nthe echo (return) signal. If the count is not at least 2, then the range\nhas not yet been measured, and is invalid.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "ping"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Single ping to ultrasonic sensor.\nSend out a single ping to the ultrasonic sensor. This only works if\nautomatic (round robin) mode is disabled. A single ping is sent out, and\nthe counter should count the semi-period when it comes in. The counter is\nreset to make the current value invalid.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "setAutomaticMode"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Turn Automatic mode on/off.\nWhen in Automatic mode, all sensors will fire in round robin, waiting a set\ntime between each sensor.\n:param enabling: Set to true if round robin scheduling should start for all\nthe ultrasonic sensors. This scheduling method assures that\nthe sensors are non-interfering because no two sensors fire\nat the same time. If another scheduling algorithm is\npreferred, it can be implemented by pinging the sensors\nmanually and waiting for the results to come back.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Ultrasonic",
            "FUNC": "setEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "Victor",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "wpilib.Victor"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Victor"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a %Victor.\n:param channel: The PWM channel number that the %Victor is attached to. 0-9\nare on-board, 10-19 are on the MXP port",
          "output": "wpilib.Victor"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Victor",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "VictorSP",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "wpilib.VictorSP"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.VictorSP"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Constructor for a %Victor SP.\n:param channel: The PWM channel that the Victor SP is attached to. 0-9 are\non-board, 10-19 are on the MXP port",
          "output": "wpilib.VictorSP"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "addFollower"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.PWMMotorController"
            }
          },
          "colour": 270,
          "tooltip": "Make the given PWM motor controller follow the output of this one.\n:param follower: The motor controller follower.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "check"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check if this motor has exceeded its timeout.\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "static_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "checkMotors"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Check the motors to see if any have timed out.\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "enableDeadbandElimination"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Optionally eliminate the deadband from a motor controller.\n:param eliminateDeadband: If true, set the motor curve on the motor\ncontroller to eliminate the deadband in the middle\nof the range. Otherwise, keep the full range\nwithout modifying any values.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "feed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Feed the motor safety object.\nResets the timer on this object that is used to do the timeouts.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "get"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n:returns: The most recently set value for the PWM between -1.0 and 1.0.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "getChannel"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "getDescription"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "getExpiration"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n:returns: the timeout value.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "getInverted"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "initSendable"
          },
          "inputs": {
            "ARG0": {
              "type": "wpiutil._wpiutil.SendableBuilder"
            }
          },
          "colour": 270,
          "tooltip": "Initializes this Sendable object.\n:param builder: sendable builder",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "isAlive"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Determine if the motor is still operating or has timed out.\n:returns: true if the motor is still operating normally and hasn't timed out.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "isSafetyEnabled"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Return the state of the motor safety enabled flag.\nReturn if the motor safety is currently enabled for this device.\n:returns: True if motor safety is enforced for this device.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "set"
          },
          "inputs": {
            "ARG0": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the PWM value.\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n:param value: The speed value between -1.0 and 1.0 to set.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "setExpiration"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Set the expiration time for the corresponding motor safety object.\n:param expirationTime: The timeout value.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "setInverted"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "setSafetyEnabled"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable/disable motor safety for this device.\nTurn on and off the motor safety option for this PWM object.\n:param enabled: True if motor safety is enforced for this object.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "setVoltage"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.volts"
            }
          },
          "colour": 270,
          "tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n:param output: The voltage to output.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.VictorSP",
            "FUNC": "stopMotor"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "Watchdog",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "wpilib.Watchdog"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.Watchdog"
            },
            "ARG1": {
              "type": "wpimath.units.seconds"
            },
            "ARG2": {
              "type": "Callable[[]"
            },
            "ARG3": {
              "type": "Any"
            }
          },
          "colour": 300,
          "tooltip": "Watchdog constructor.\n:param timeout:  The watchdog's timeout in seconds with microsecond\nresolution.\n:param callback: This function is called when the timeout expires.",
          "output": "wpilib.Watchdog"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "addEpoch"
          },
          "inputs": {
            "ARG0": {
              "type": "str"
            }
          },
          "colour": 270,
          "tooltip": "Adds time since last epoch to the list printed by PrintEpochs().\nEpochs are a way to partition the time elapsed so that when overruns occur,\none can determine which parts of an operation consumed the most time.\n:param epochName: The name to associate with the epoch.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "disable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Disables the watchdog timer.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "enable"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Enables the watchdog timer.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "getTime"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the time since the watchdog was last fed.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "getTimeout"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns the watchdog's timeout.",
          "output": "wpimath.units.seconds"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "isExpired"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Returns true if the watchdog timer has expired.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "printEpochs"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Prints list of epochs added so far and their times.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "reset"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Resets the watchdog timer.\nThis also enables the timer if it was previously disabled.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "setTimeout"
          },
          "inputs": {
            "ARG0": {
              "type": "wpimath.units.seconds"
            }
          },
          "colour": 270,
          "tooltip": "Sets the watchdog's timeout.\n:param timeout: The watchdog's timeout in seconds with microsecond\nresolution.",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.Watchdog",
            "FUNC": "suppressTimeoutMessage"
          },
          "inputs": {
            "ARG0": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Enable or disable suppression of the generic timeout message.\nThis may be desirable if the user-provided callback already prints a more\nspecific message.\n:param suppress: Whether to suppress generic timeout message.",
          "previousStatement": null,
          "nextStatement": null
        }
      ]
    },
    {
      "kind": "category",
      "name": "XboxController",
      "contents": [
        {
          "kind": "block",
          "type": "constructor_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "wpilib.XboxController"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib._wpilib.XboxController"
            },
            "ARG1": {
              "type": "int"
            }
          },
          "colour": 300,
          "tooltip": "Construct an instance of an Xbox controller.\nThe controller index is the USB port on the Driver Station.\n:param port: The port on the Driver Station that the controller is plugged\ninto (0-5).",
          "output": "wpilib.XboxController"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "A"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the A button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the A button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "B"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the B button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the B button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "POVCenter"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the center (not pressed) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the center of a POV on the\nHID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "POVDown"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 180 degree angle (down)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 180 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "POVDownLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 225 degree angle (down\nleft) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 225 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "POVDownRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 135 degree angle (right\ndown) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 135 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "POVLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 270 degree angle (left)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 270 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "POVRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 90 degree angle (right)\nof the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 90 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "POVUp"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 0 degree angle (up) of\nthe default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 0 degree angle of a POV on\nthe HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "POVUpLeft"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 315 degree angle (left\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 315 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "POVUpRight"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs a BooleanEvent instance based around the 45 degree angle (right\nup) of the default (index 0) POV on the HID.\n:returns: a BooleanEvent instance based around the 45 degree angle of a POV\non the HID.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "X"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the X button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the X button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "Y"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the Y button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the Y button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "axisGreaterThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is greater\nthan threshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value above which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is greater than\nthe provided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "axisLessThan"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "float"
            },
            "ARG2": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance that is true when the axis value is less than\nthreshold\n:param axis:      The axis to read, starting at 0.\n:param threshold: The value below which this trigger should return true.\n:param loop:      the event loop instance to attach the event to.\n:returns: an event instance that is true when the axis value is less than the\nprovided threshold.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "back"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the back button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the back button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "button"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around this button's digital signal.\n:param button: the button index\n:param loop:   the event loop instance to attach the event to.\n:returns: an event instance representing the button's digital signal attached\nto the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getAButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the A button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getAButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the A button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getAButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the A button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getAxisCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of axes for the HID.\n:returns: the number of axis for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getAxisType"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the axis type of a joystick axis.\n:returns: the axis type of a joystick axis.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getBButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the B button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getBButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the B button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getBButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the B button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getBackButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the back button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getBackButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the back button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getBackButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the back button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getButtonCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of buttons for the HID.\n:returns: the number of buttons on the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getLeftBumper"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the left bumper (LB) button on the controller.\n:returns: the state of the button",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getLeftBumperPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left bumper (LB) was pressed since the last check.\n:returns: Whether the button was pressed since the last check",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getLeftBumperReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left bumper (LB) was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getLeftStickButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the left stick button (LSB) on the controller.\n:returns: the state of the button",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getLeftStickButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left stick button (LSB) was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getLeftStickButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the left stick button (LSB) was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getLeftTriggerAxis"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the left trigger (LT) axis value of the controller. Note that this axis\nis bound to the range of [0, 1] as opposed to the usual [-1, 1].\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getLeftX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the X axis value of left side of the controller.\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getLeftY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Y axis value of left side of the controller.\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getName"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the name of the HID.\n:returns: the name of the HID.",
          "output": "str"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getPOV"
          },
          "inputs": {
            "ARG0": {
              "type": "int",
              "shadow": {
                "type": "math_number",
                "fields": {
                  "NUM": "0"
                }
              }
            }
          },
          "colour": 270,
          "tooltip": "Get the angle in degrees of a POV on the HID.\nThe POV angles start at 0 in the up direction, and increase clockwise\n(e.g. right is 90, upper-left is 315).\n:param pov: The index of the POV to read (starting at 0)\n:returns: the angle of the POV in degrees, or -1 if the POV is not pressed.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getPOVCount"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the number of POVs for the HID.\n:returns: the number of POVs for the current HID",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getPort"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the port number of the HID.\n:returns: The port number of the HID.",
          "output": "int"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRawAxis"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the value of the axis.\n:param axis: The axis to read, starting at 0.\n:returns: The value of the axis.",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRawButton"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Get the button value (starting at button 1).\nThe buttons are returned in a single 16 bit value with one bit representing\nthe state of each button. The appropriate button is returned as a boolean\nvalue.\nThis method returns true if the button is being held down at the time\nthat this method is being called.\n:param button: The button number to be read (starting at 1)\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRawButtonPressed"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was pressed since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from not pressed to held down\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you press the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRawButtonReleased"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Whether the button was released since the last check. %Button indexes begin\nat 1.\nThis method returns true if the button went from held down to not pressed\nsince the last time this method was called. This is useful if you only\nwant to call a function once when you release the button.\n:param button: The button index, beginning at 1.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRightBumper"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the right bumper (RB) button on the controller.\n:returns: the state of the button",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRightBumperPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right bumper (RB) was pressed since the last check.\n:returns: Whether the button was pressed since the last check",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRightBumperReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right bumper (RB) was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRightStickButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the right stick button (RSB) on the controller.\n:returns: the state of the button",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRightStickButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right stick button (RSB) was pressed since the last check.\n:returns: Whether the button was pressed since the last check",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRightStickButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the right stick button (RSB) was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRightTriggerAxis"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the right trigger (RT) axis value of the controller. Note that this\naxis is bound to the range of [0, 1] as opposed to the usual [-1, 1].\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRightX"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the X axis value of right side of the controller.\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getRightY"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the Y axis value of right side of the controller.\n:returns: the axis value",
          "output": "float"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getStartButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the start button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getStartButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the start button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getStartButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the start button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getType"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get the type of the HID.\n:returns: the type of the HID.",
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getXButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the X button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getXButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the X button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getXButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the X button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getYButton"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Read the value of the Y button on the controller.\n:returns: The state of the button.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getYButtonPressed"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Y button was pressed since the last check.\n:returns: Whether the button was pressed since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "getYButtonReleased"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Whether the Y button was released since the last check.\n:returns: Whether the button was released since the last check.",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "isConnected"
          },
          "inputs": {},
          "colour": 270,
          "tooltip": "Get if the HID is connected.\n:returns: true if the HID is connected",
          "output": "bool"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "leftBumper"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the left bumper's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the left bumper's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "leftStick"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the left stick's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the left stick's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "rightBumper"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the right bumper's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the right bumper's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "rightStick"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the right stick's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the right stick's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "setOutput"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            },
            "ARG1": {
              "type": "bool"
            }
          },
          "colour": 270,
          "tooltip": "Set a single HID output value for the HID.\n:param outputNumber: The index of the output to set (1-32)\n:param value:        The value to set the output to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "setOutputs"
          },
          "inputs": {
            "ARG0": {
              "type": "int"
            }
          },
          "colour": 270,
          "tooltip": "Set all output values for the HID.\n:param value: The 32 bit output value (1 bit for each output)",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "setRumble"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.interfaces._interfaces.GenericHID.RumbleType"
            },
            "ARG1": {
              "type": "float"
            }
          },
          "colour": 270,
          "tooltip": "Set the rumble output for the HID.\nThe DS currently supports 2 rumble values, left rumble and right rumble.\n:param type:  Which rumble value to set\n:param value: The normalized value (0 to 1) to set the rumble to",
          "previousStatement": null,
          "nextStatement": null
        },
        {
          "kind": "block",
          "type": "instance_method_call",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "FUNC": "start"
          },
          "inputs": {
            "ARG0": {
              "type": "wpilib.event._event.EventLoop"
            }
          },
          "colour": 270,
          "tooltip": "Constructs an event instance around the start button's digital signal.\n:param loop: the event loop instance to attach the event to.\n:returns: an event instance representing the start button's digital signal\nattached to the given loop.",
          "output": "wpilib.event._event.BooleanEvent"
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "VAR": "Axis"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "VAR": "Button"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "VAR": "HIDType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_get",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "VAR": "RumbleType"
          },
          "output": "pybind11_builtins.pybind11_type",
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "VAR": "Axis"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "VAR": "Button"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "VAR": "HIDType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "class_variable_set",
          "fields": {
            "CLASS": "wpilib.XboxController",
            "VAR": "RumbleType"
          },
          "inputs": {
            "VALUE": {
              "type": "pybind11_builtins.pybind11_type"
            }
          },
          "previousStatement": null,
          "nextStatement": null,
          "colour": 120,
          "tooltip": ""
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHID1stPerson"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDDriving"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDFlight"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kHIDJoystick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputArcadeStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDancePad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputDrumKit"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputFlightStick"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGamepad"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar2"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputGuitar3"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputUnknown"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.HIDType",
            "ENUM_VALUE": "kXInputWheel"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.HIDType",
          "colour": 180,
          "tooltip": "USB HID interface type.\n\nMembers:\n\n  kUnknown : Unknown.\n\n  kXInputUnknown : XInputUnknown.\n\n  kXInputGamepad : XInputGamepad.\n\n  kXInputWheel : XInputWheel.\n\n  kXInputArcadeStick : XInputArcadeStick.\n\n  kXInputFlightStick : XInputFlightStick.\n\n  kXInputDancePad : XInputDancePad.\n\n  kXInputGuitar : XInputGuitar.\n\n  kXInputGuitar2 : XInputGuitar2.\n\n  kXInputDrumKit : XInputDrumKit.\n\n  kXInputGuitar3 : XInputGuitar3.\n\n  kXInputArcadePad : XInputArcadePad.\n\n  kHIDJoystick : HIDJoystick.\n\n  kHIDGamepad : HIDGamepad.\n\n  kHIDDriving : HIDDriving.\n\n  kHIDFlight : HIDFlight.\n\n  kHID1stPerson : HID1stPerson."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kBothRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kLeftRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "block",
          "type": "enum_value",
          "fields": {
            "ENUM_TYPE": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
            "ENUM_VALUE": "kRightRumble"
          },
          "output": "wpilib.interfaces._interfaces.GenericHID.RumbleType",
          "colour": 180,
          "tooltip": "Represents a rumble output on the Joystick.\n\nMembers:\n\n  kLeftRumble : Left rumble motor.\n\n  kRightRumble : Right rumble motor.\n\n  kBothRumble : Both left and right rumble motors."
        },
        {
          "kind": "category",
          "name": "Axis",
          "contents": [
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kLeftTrigger"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kLeftX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kLeftY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kRightTrigger"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kRightX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kRightY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kLeftTrigger"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kLeftX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kLeftY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kRightTrigger"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kRightX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Axis",
                "VAR": "kRightY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            }
          ]
        },
        {
          "kind": "category",
          "name": "Button",
          "contents": [
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kA"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kB"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kBack"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kLeftBumper"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kLeftStick"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kRightBumper"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kRightStick"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kStart"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kX"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_get",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kY"
              },
              "output": "int",
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kA"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kB"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kBack"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kLeftBumper"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kLeftStick"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kRightBumper"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kRightStick"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kStart"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kX"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            },
            {
              "kind": "block",
              "type": "class_variable_set",
              "fields": {
                "CLASS": "wpilib.XboxController.Button",
                "VAR": "kY"
              },
              "inputs": {
                "VALUE": {
                  "type": "int"
                }
              },
              "previousStatement": null,
              "nextStatement": null,
              "colour": 120,
              "tooltip": ""
            }
          ]
        }
      ]
    }
  ]
}