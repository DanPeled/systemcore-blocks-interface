// This file was generated. Do not edit!

import * as python from "../python.js"

// Blocks for class wpimath.system.LinearSystemLoop_1_1_1

function getToolboxCategory(subcategories) {
  const category = {
    kind: "category",
    name: "LinearSystemLoop_1_1_1",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:      State-space plant.\n:param controller: State-space controller.\n:param observer:   State-space observer.\n:param maxVoltage: The maximum voltage that can be applied. Commonly 12.\n:param dt:         The nominal timestep.", "returnType": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1", "args": [{"name": "plant", "type": "wpimath._controls._controls.system.LinearSystem_1_1_1"}, {"name": "controller", "type": "wpimath._controls._controls.controller.LinearQuadraticRegulator_1_1"}, {"name": "observer", "type": "wpimath._controls._controls.estimator.KalmanFilter_1_1_1"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "dt", "type": "wpimath.units.seconds"}], "importModule": "wpimath.system"}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystem_1_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearQuadraticRegulator_1_1"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_1_1_1"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Constructs a state-space loop with the given plant, controller, and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state before enabling the loop. This\nconstructor assumes that the input(s) to this system are voltage.\n\n:param plant:         State-space plant.\n:param controller:    State-space controller.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector.\n:param dt:            The nominal timestep.", "returnType": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1", "args": [{"name": "plant", "type": "wpimath._controls._controls.system.LinearSystem_1_1_1"}, {"name": "controller", "type": "wpimath._controls._controls.controller.LinearQuadraticRegulator_1_1"}, {"name": "observer", "type": "wpimath._controls._controls.estimator.KalmanFilter_1_1_1"}, {"name": "clampFunction", "type": "Callable[[numpy.ndarray[numpy.float64[1, 1]]], numpy.ndarray[numpy.float64[1, 1]]]"}, {"name": "dt", "type": "wpimath.units.seconds"}], "importModule": "wpimath.system"}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystem_1_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearQuadraticRegulator_1_1"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_1_1_1"}}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[1, 1]]]"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Constructs a state-space loop with the given controller, feedforward and\nobserver. By default, the initial reference is all zeros. Users should\ncall reset with the initial system state.\n\n:param controller:  State-space controller.\n:param feedforward: Plant inversion feedforward.\n:param observer:    State-space observer.\n:param maxVoltage:  The maximum voltage that can be applied. Assumes\n                    that the inputs are voltages.", "returnType": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1", "args": [{"name": "controller", "type": "wpimath._controls._controls.controller.LinearQuadraticRegulator_1_1"}, {"name": "feedforward", "type": "wpimath._controls._controls.controller.LinearPlantInversionFeedforward_1_1"}, {"name": "observer", "type": "wpimath._controls._controls.estimator.KalmanFilter_1_1_1"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}], "importModule": "wpimath.system"}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearQuadraticRegulator_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_1_1"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_1_1_1"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Constructs a state-space loop with the given controller, feedforward,\nobserver and clamp function. By default, the initial reference is all\nzeros. Users should call reset with the initial system state.\n\n:param controller:    State-space controller.\n:param feedforward:   Plant-inversion feedforward.\n:param observer:      State-space observer.\n:param clampFunction: The function used to clamp the input vector.", "returnType": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1", "args": [{"name": "controller", "type": "wpimath._controls._controls.controller.LinearQuadraticRegulator_1_1"}, {"name": "feedforward", "type": "wpimath._controls._controls.controller.LinearPlantInversionFeedforward_1_1"}, {"name": "observer", "type": "wpimath._controls._controls.estimator.KalmanFilter_1_1_1"}, {"name": "clampFunction", "type": "Callable[[numpy.ndarray[numpy.float64[1, 1]]], numpy.ndarray[numpy.float64[1, 1]]]"}], "importModule": "wpimath.system"}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearQuadraticRegulator_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearPlantInversionFeedforward_1_1"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_1_1_1"}}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[1, 1]]]"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the controller's calculated control input u.", "returnType": "numpy.ndarray[numpy.float64[1, 1]]", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "U"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns an element of the controller's calculated control input u.\n\n:param i: Row of u.", "returnType": "float", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "i", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "U"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Clamps input vector between system's minimum and maximum allowable input.\n\n:param u: Input vector to clamp.\n\n:returns: Clamped input vector.", "returnType": "numpy.ndarray[numpy.float64[1, 1]]", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "u", "type": "numpy.ndarray[numpy.float64[1, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "clampInput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param y: Measurement vector.", "returnType": "None", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "y", "type": "numpy.ndarray[numpy.float64[1, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "correct"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns difference between reference r and current state x-hat.", "returnType": "numpy.ndarray[numpy.float64[1, 1]]", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "error"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the controller's next reference r.", "returnType": "numpy.ndarray[numpy.float64[1, 1]]", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "nextR"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns an element of the controller's next reference r.\n\n:param i: Row of r.", "returnType": "float", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "i", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "nextR"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Sets new controller output, projects model forward, and runs observer\nprediction.\n\nAfter calling this, the user should send the elements of u to the\nactuators.\n\n:param dt: Timestep for model update.", "returnType": "None", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "dt", "type": "wpimath.units.seconds"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "predict"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Zeroes reference r and controller output u. The previous reference\nof the PlantInversionFeedforward and the initial state estimate of\nthe KalmanFilter are set to the initial state provided.\n\n:param initialState: The initial state.", "returnType": "None", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "initialState", "type": "numpy.ndarray[numpy.float64[1, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the next reference r.\n\n:param nextR: Next reference.", "returnType": "None", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "nextR", "type": "numpy.ndarray[numpy.float64[1, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "setNextR"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the initial state estimate x-hat.\n\n:param xHat: The initial state estimate x-hat.", "returnType": "None", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "xHat", "type": "numpy.ndarray[numpy.float64[1, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "setXhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat.", "returnType": "None", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "i", "type": "int"}, {"name": "value", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "setXhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myfloat64[1, 1]]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the observer's state estimate x-hat.", "returnType": "numpy.ndarray[numpy.float64[1, 1]]", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "xhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns an element of the observer's state estimate x-hat.\n\n:param i: Row of x-hat.", "returnType": "float", "args": [{"name": "linearSystemLoop_1_1_1", "type": "wpimath._controls._controls.system.LinearSystemLoop_1_1_1"}, {"name": "i", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpimath.system.LinearSystemLoop_1_1_1", "FUNC": "xhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystemLoop_1_1_1"}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}

export {getToolboxCategory}
