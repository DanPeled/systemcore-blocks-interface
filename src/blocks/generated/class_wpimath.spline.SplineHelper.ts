// This file was generated. Do not edit!

import {Category} from "../../toolbox/items";

// Blocks for class wpimath.spline.SplineHelper

export function initialize() {
}

export function getToolboxCategory(subcategories: Category[] = []): Category {
  const category: Category = {
    kind: "category",
    name: "SplineHelper",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "mySplineHelper"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "", "returnType": "wpimath.spline._spline.SplineHelper", "args": [], "importModule": "wpimath.spline"}, "fields": {"CLASS": "wpimath.spline.SplineHelper"}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myControlVector]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Returns 2 cubic control vectors from a set of exterior waypoints and\ninterior translations.\n\n:param start:             The starting pose.\n:param interiorWaypoints: The interior waypoints.\n:param end:               The ending pose.\n\n:returns: 2 cubic control vectors.", "returnType": "Tuple[wpimath.spline._spline.Spline3.ControlVector, wpimath.spline._spline.Spline3.ControlVector]", "args": [{"name": "start", "type": "wpimath.geometry._geometry.Pose2d"}, {"name": "interiorWaypoints", "type": "list[wpimath.geometry._geometry.Translation2d]"}, {"name": "end", "type": "wpimath.geometry._geometry.Pose2d"}], "importModule": "wpimath.spline"}, "fields": {"CLASS": "wpimath.spline.SplineHelper", "FUNC": "cubicControlVectorsFromWaypoints"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose2d"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myList"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose2d"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myList"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Returns a set of cubic splines corresponding to the provided control\nvectors. The user is free to set the direction of the start and end\npoint. The directions for the middle waypoints are determined\nautomatically to ensure continuous curvature throughout the path.\n\nThe derivation for the algorithm used can be found here:\n<https://www.uio.no/studier/emner/matnat/ifi/nedlagte-emner/INF-MAT4350/h08/undervisningsmateriale/chap7alecture.pdf>\n\n:param start:     The starting control vector.\n:param waypoints: The middle waypoints. This can be left blank if you\n                  only wish to create a path with two waypoints.\n:param end:       The ending control vector.\n\n:returns: A vector of cubic hermite splines that interpolate through the\n          provided waypoints.", "returnType": "list[wpimath.spline._spline.CubicHermiteSpline]", "args": [{"name": "start", "type": "wpimath.spline._spline.Spline3.ControlVector"}, {"name": "waypoints", "type": "list[wpimath.geometry._geometry.Translation2d]"}, {"name": "end", "type": "wpimath.spline._spline.Spline3.ControlVector"}], "importModule": "wpimath.spline"}, "fields": {"CLASS": "wpimath.spline.SplineHelper", "FUNC": "cubicSplinesFromControlVectors"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myControlVector"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myList"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myControlVector"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myList"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Optimizes the curvature of 2 or more quintic splines at knot points.\nOverall, this reduces the integral of the absolute value of the second\nderivative across the set of splines.\n\n:param splines: A vector of un-optimized quintic splines.\n\n:returns: A vector of optimized quintic splines.", "returnType": "list[wpimath.spline._spline.QuinticHermiteSpline]", "args": [{"name": "splines", "type": "list[wpimath.spline._spline.QuinticHermiteSpline]"}], "importModule": "wpimath.spline"}, "fields": {"CLASS": "wpimath.spline.SplineHelper", "FUNC": "optimizeCurvature"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myList"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myList"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Returns a set of quintic splines corresponding to the provided control\nvectors. The user is free to set the direction of all waypoints. Continuous\ncurvature is guaranteed throughout the path.\n\n:param controlVectors: The control vectors.\n\n:returns: A vector of quintic hermite splines that interpolate through the\n          provided waypoints.", "returnType": "list[wpimath.spline._spline.QuinticHermiteSpline]", "args": [{"name": "controlVectors", "type": "list[wpimath.spline._spline.Spline5.ControlVector]"}], "importModule": "wpimath.spline"}, "fields": {"CLASS": "wpimath.spline.SplineHelper", "FUNC": "quinticSplinesFromControlVectors"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myList"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myList"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Returns quintic splines from a set of waypoints.\n\n:param waypoints: The waypoints\n\n:returns: List of quintic splines.", "returnType": "list[wpimath.spline._spline.QuinticHermiteSpline]", "args": [{"name": "waypoints", "type": "list[wpimath.geometry._geometry.Pose2d]"}], "importModule": "wpimath.spline"}, "fields": {"CLASS": "wpimath.spline.SplineHelper", "FUNC": "quinticSplinesFromWaypoints"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myList"}}}}}}}}},
    ],
  };
  if (category.contents) {
    category.contents.push(...subcategories);
  }
  return category;
}
