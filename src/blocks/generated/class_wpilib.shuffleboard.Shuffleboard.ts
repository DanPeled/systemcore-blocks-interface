// This file was generated. Do not edit!

import * as python from "../python";
import {Category} from "../../toolbox/items";

// Blocks for class wpilib.shuffleboard.Shuffleboard

export function initialize() {
  python.initializeClassVariableGetter("wpilib.shuffleboard.Shuffleboard", "str", ["kBaseTableName"], []);
}

export function getToolboxCategory(subcategories: any): Category {
  const category = {
    kind: "category",
    name: "Shuffleboard",
    contents: [
      {"kind": "block", "type": "get_python_class_variable", "extraState": {"varType": "str", "key": "class wpilib.shuffleboard.Shuffleboard str", "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "VAR": "kBaseTableName"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Notifies Shuffleboard of an event. Events can range from as trivial as a\nchange in a command state to as critical as a total power loss or component\nfailure. If Shuffleboard is recording, the event will also be recorded.\n\nIf ``name`` is ``null`` or empty, no event will be sent and an\nerror will be printed to the driver station.\n\n:param name:        the name of the event\n:param description: a description of the event\n:param importance:  the importance of the event", "returnType": "None", "args": [{"name": "name", "type": "str"}, {"name": "description", "type": "str"}, {"name": "importance", "type": "wpilib.shuffleboard._shuffleboard.ShuffleboardEventImportance"}], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "addEventMarker"}, "inputs": {"ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myShuffleboardEventImportance"}}}}}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Notifies Shuffleboard of an event. Events can range from as trivial as a\nchange in a command state to as critical as a total power loss or component\nfailure. If Shuffleboard is recording, the event will also be recorded.\n\nIf ``name`` is ``null`` or empty, no event will be sent and an\nerror will be printed to the driver station.\n\n:param name:       the name of the event\n:param importance: the importance of the event", "returnType": "None", "args": [{"name": "name", "type": "str"}, {"name": "importance", "type": "wpilib.shuffleboard._shuffleboard.ShuffleboardEventImportance"}], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "addEventMarker"}, "inputs": {"ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myShuffleboardEventImportance"}}}}}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Clears the custom name format for recording files. New recordings will use\nthe default format.\n\n@see SetRecordingFileNameFormat(std::string_view)", "returnType": "None", "args": [], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "clearRecordingFileNameFormat"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Disables user control of widgets containing actuators. For safety reasons,\nactuators should only be controlled while in test mode. IterativeRobotBase\nand SampleRobot are both configured to call this method when exiting in\ntest mode; most users should not need to use this method directly.", "returnType": "None", "args": [], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "disableActuatorWidgets"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Enables user control of widgets containing actuators: motor controllers,\nrelays, etc. This should only be used when the robot is in test mode.\nIterativeRobotBase and SampleRobot are both configured to call this method\nwhen entering test mode; most users should not need to use this method\ndirectly.", "returnType": "None", "args": [], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "enableActuatorWidgets"}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myShuffleboardTab"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Gets the Shuffleboard tab with the given title, creating it if it does not\nalready exist.\n\n:param title: the title of the tab\n\n:returns: the tab with the given title", "returnType": "wpilib.shuffleboard._shuffleboard.ShuffleboardTab", "args": [{"name": "title", "type": "str"}], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "getTab"}}}}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Selects the tab in the dashboard with the given index in the range\n[0..n-1], where *n* is the number of tabs in the dashboard at the time\nthis method is called.\n\n:param index: the index of the tab to select", "returnType": "None", "args": [{"name": "index", "type": "int"}], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "selectTab"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Selects the tab in the dashboard with the given title.\n\n:param title: the title of the tab to select", "returnType": "None", "args": [{"name": "title", "type": "str"}], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "selectTab"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Sets the file name format for new recording files to use. If recording is\nin progress when this method is called, it will continue to use the same\nfile. New recordings will use the format.\n\nTo avoid recording files overwriting each other, make sure to use unique\nrecording file names. File name formats accept templates for inserting the\ndate and time when the recording started with the ``${date``} and\n``${time``} templates, respectively. For example, the default format is\n``\"recording-${time``\"} and recording files created with it will have\nnames like ``\"recording-2018.01.15.sbr\"``. Users are\n**strongly** recommended to use the ``${time``} template\nto ensure unique file names.\n</p>\n\n:param format: the format for the", "returnType": "None", "args": [{"name": "format", "type": "str"}], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "setRecordingFileNameFormat"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Starts data recording on the dashboard. Has no effect if recording is\nalready in progress.", "returnType": "None", "args": [], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "startRecording"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Stops data recording on the dashboard. Has no effect if no recording is in\nprogress.", "returnType": "None", "args": [], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "stopRecording"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Updates all the values in Shuffleboard. Iterative and timed robots are\npre-configured to call this method in the main robot loop; teams using\ncustom robot base classes, or subclass SampleRobot, should make sure to\ncall this repeatedly to keep data on the dashboard up to date.", "returnType": "None", "args": [], "importModule": "wpilib.shuffleboard"}, "fields": {"CLASS": "wpilib.shuffleboard.Shuffleboard", "FUNC": "update"}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
