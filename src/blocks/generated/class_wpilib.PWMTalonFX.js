// This file was generated. Do not edit!

import * as python from "../python.js"

// Blocks for class wpilib.PWMTalonFX

function getToolboxCategory(subcategories) {
  const category = {
    kind: "category",
    name: "PWMTalonFX",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPWMTalonFX"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Construct a %Talon FX connected via PWM.\n\n:param channel: The PWM channel that the %Talon FX is attached to. 0-9 are\n                on-board, 10-19 are on the MXP port", "returnType": "wpilib._wpilib.PWMTalonFX", "args": [{"name": "channel", "type": "int"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.PWMTalonFX"}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Make the given PWM motor controller follow the output of this one.\n\n:param follower: The motor controller follower.", "returnType": "None", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}, {"name": "follower", "type": "wpilib._wpilib.PWMMotorController"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "addFollower"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "check"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.", "returnType": "None", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.PWMTalonFX", "FUNC": "checkMotors"}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "None", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "disable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values.", "returnType": "None", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}, {"name": "eliminateDeadband", "type": "bool"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "enableDeadbandElimination"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts.", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "feed"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the recently set value of the PWM. This value is affected by the\ninversion property. If you want the value that is sent directly to the\nMotorController, use PWM::GetSpeed() instead.\n\n:returns: The most recently set value for the PWM between -1.0 and 1.0.", "returnType": "float", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "get"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "int", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "getChannel"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "str", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "getDescription"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value.", "returnType": "wpimath.units.seconds", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "getExpiration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "bool", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "getInverted"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder", "returnType": "None", "args": [{"name": "sendable", "type": "wpiutil._wpiutil.Sendable"}, {"name": "builder", "type": "wpiutil._wpiutil.SendableBuilder"}], "importModule": ""}, "fields": {"CLASS": "wpiutil.Sendable", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendable"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out.", "returnType": "bool", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "isAlive"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device.", "returnType": "bool", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "isSafetyEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the PWM value.\n\nThe PWM value is set using a range of -1.0 to 1.0, appropriately scaling\nthe value for the FPGA.\n\n:param value: The speed value between -1.0 and 1.0 to set.", "returnType": "None", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}, {"name": "value", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "set"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value.", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}, {"name": "expirationTime", "type": "wpimath.units.seconds"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "setExpiration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "None", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}, {"name": "isInverted", "type": "bool"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "setInverted"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object.", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}, {"name": "enabled", "type": "bool"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "setSafetyEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Sets the voltage output of the PWMMotorController. Compensates for\nthe current bus voltage to ensure that the desired voltage is output even\nif the battery voltage is below 12V - highly useful when the voltage\noutputs are \"meaningful\" (e.g. they come from a feedforward calculation).\n\nNOTE: This function *must* be called regularly in order for voltage\ncompensation to work properly - unlike the ordinary set function, it is not\n\"set it and forget it.\"\n\n:param output: The voltage to output.", "returnType": "None", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}, {"name": "output", "type": "wpimath.units.volts"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "setVoltage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "None", "args": [{"name": "pWMMotorController", "type": "wpilib._wpilib.PWMMotorController"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWMMotorController", "FUNC": "stopMotor"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWMMotorController"}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}

export {getToolboxCategory}
