// This file was generated. Do not edit!

import * as python from "../python";
import {Category} from "../../toolbox/items";

// Blocks for class wpimath.kinematics.ChassisSpeeds

export function initialize() {
  python.initializeInstanceVariableGetter("wpimath.kinematics.ChassisSpeeds", "wpimath.units.radians_per_second", ["omega"], ["Represents the angular velocity of the robot frame. (CCW is +)"]);
  python.initializeInstanceVariableSetter("wpimath.kinematics.ChassisSpeeds", "wpimath.units.radians_per_second", ["omega"], ["Represents the angular velocity of the robot frame. (CCW is +)"]);
  python.initializeInstanceVariableGetter("wpimath.kinematics.ChassisSpeeds", "wpimath.units.degrees_per_second", ["omega_dps"], [""]);
  python.initializeInstanceVariableSetter("wpimath.kinematics.ChassisSpeeds", "wpimath.units.degrees_per_second", ["omega_dps"], [""]);
  python.initializeInstanceVariableGetter("wpimath.kinematics.ChassisSpeeds", "wpimath.units.meters_per_second", ["vx", "vy"], ["Velocity along the x-axis. (Fwd is +)", "Velocity along the y-axis. (Left is +)"]);
  python.initializeInstanceVariableSetter("wpimath.kinematics.ChassisSpeeds", "wpimath.units.meters_per_second", ["vx", "vy"], ["Velocity along the x-axis. (Fwd is +)", "Velocity along the y-axis. (Left is +)"]);
  python.initializeInstanceVariableGetter("wpimath.kinematics.ChassisSpeeds", "wpimath.units.feet_per_second", ["vx_fps", "vy_fps"], ["", ""]);
  python.initializeInstanceVariableSetter("wpimath.kinematics.ChassisSpeeds", "wpimath.units.feet_per_second", ["vx_fps", "vy_fps"], ["", ""]);
}

export function getToolboxCategory(subcategories: any): Category {
  const category = {
    kind: "category",
    name: "ChassisSpeeds",
    contents: [
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.radians_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.radians_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "omega"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "set_python_instance_variable", "extraState": {"varType": "wpimath.units.radians_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.radians_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "omega"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.degrees_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.degrees_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "omega_dps"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "set_python_instance_variable", "extraState": {"varType": "wpimath.units.degrees_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.degrees_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "omega_dps"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.meters_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.meters_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "vx"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "set_python_instance_variable", "extraState": {"varType": "wpimath.units.meters_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.meters_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "vx"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.meters_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.meters_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "vy"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "set_python_instance_variable", "extraState": {"varType": "wpimath.units.meters_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.meters_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "vy"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.feet_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.feet_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "vx_fps"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "set_python_instance_variable", "extraState": {"varType": "wpimath.units.feet_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.feet_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "vx_fps"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.feet_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.feet_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "vy_fps"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "set_python_instance_variable", "extraState": {"varType": "wpimath.units.feet_per_second", "key": "instance wpimath.kinematics.ChassisSpeeds wpimath.units.feet_per_second", "importModule": "", "selfLabel": "chassisSpeeds", "selfType": "wpimath.kinematics.ChassisSpeeds"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "VAR": "vy_fps"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "", "returnType": "wpimath.kinematics._kinematics.ChassisSpeeds", "args": [{"name": "vx", "type": "wpimath.units.meters_per_second"}, {"name": "vy", "type": "wpimath.units.meters_per_second"}, {"name": "omega", "type": "wpimath.units.radians_per_second"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds"}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Disretizes a continuous-time chassis speed.\n\nThis function converts a continuous-time chassis speed into a discrete-time\none such that when the discrete-time chassis speed is applied for one\ntimestep, the robot moves as if the velocity components are independent\n(i.e., the robot moves v_x * dt along the x-axis, v_y * dt along the\ny-axis, and omega * dt around the z-axis).\n\nThis is useful for compensating for translational skew when translating and\nrotating a swerve drivetrain.\n\n:param vx:    Forward velocity.\n:param vy:    Sideways velocity.\n:param omega: Angular velocity.\n:param dt:    The duration of the timestep the speeds should be applied for.\n\n:returns: Discretized ChassisSpeeds.", "returnType": "wpimath.kinematics._kinematics.ChassisSpeeds", "args": [{"name": "vx", "type": "wpimath.units.meters_per_second"}, {"name": "vy", "type": "wpimath.units.meters_per_second"}, {"name": "omega", "type": "wpimath.units.radians_per_second"}, {"name": "dt", "type": "wpimath.units.seconds"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "FUNC": "discretize"}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Disretizes a continuous-time chassis speed.\n\nThis function converts a continuous-time chassis speed into a discrete-time\none such that when the discrete-time chassis speed is applied for one\ntimestep, the robot moves as if the velocity components are independent\n(i.e., the robot moves v_x * dt along the x-axis, v_y * dt along the\ny-axis, and omega * dt around the z-axis).\n\nThis is useful for compensating for translational skew when translating and\nrotating a swerve drivetrain.\n\n:param continuousSpeeds: The continuous speeds.\n:param dt:               The duration of the timestep the speeds should be applied for.\n\n:returns: Discretized ChassisSpeeds.", "returnType": "wpimath.kinematics._kinematics.ChassisSpeeds", "args": [{"name": "continuousSpeeds", "type": "wpimath.kinematics._kinematics.ChassisSpeeds"}, {"name": "dt", "type": "wpimath.units.seconds"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "FUNC": "discretize"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "", "returnType": "wpimath.kinematics._kinematics.ChassisSpeeds", "args": [{"name": "vx", "type": "wpimath.units.feet_per_second"}, {"name": "vy", "type": "wpimath.units.feet_per_second"}, {"name": "omega", "type": "wpimath.units.radians_per_second"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "FUNC": "fromFeet"}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Converts a user provided field-relative set of speeds into a robot-relative\nChassisSpeeds object.\n\n:param vx:         The component of speed in the x direction relative to the field.\n                   Positive x is away from your alliance wall.\n:param vy:         The component of speed in the y direction relative to the field.\n                   Positive y is to your left when standing behind the alliance wall.\n:param omega:      The angular rate of the robot.\n:param robotAngle: The angle of the robot as measured by a gyroscope. The\n                   robot's angle is considered to be zero when it is facing directly away from\n                   your alliance station wall. Remember that this should be CCW positive.\n\n:returns: ChassisSpeeds object representing the speeds in the robot's frame\n          of reference.", "returnType": "wpimath.kinematics._kinematics.ChassisSpeeds", "args": [{"name": "vx", "type": "wpimath.units.meters_per_second"}, {"name": "vy", "type": "wpimath.units.meters_per_second"}, {"name": "omega", "type": "wpimath.units.radians_per_second"}, {"name": "robotAngle", "type": "wpimath.geometry._geometry.Rotation2d"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "FUNC": "fromFieldRelativeSpeeds"}, "inputs": {"ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Converts a user provided field-relative ChassisSpeeds object into a\nrobot-relative ChassisSpeeds object.\n\n:param fieldRelativeSpeeds: The ChassisSpeeds object representing the speeds\n                            in the field frame of reference. Positive x is away from your alliance\n                            wall. Positive y is to your left when standing behind the alliance wall.\n:param robotAngle:          The angle of the robot as measured by a gyroscope. The\n                            robot's angle is considered to be zero when it is facing directly away\n                            from your alliance station wall. Remember that this should be CCW\n                            positive.\n\n:returns: ChassisSpeeds object representing the speeds in the robot's frame\n          of reference.", "returnType": "wpimath.kinematics._kinematics.ChassisSpeeds", "args": [{"name": "fieldRelativeSpeeds", "type": "wpimath.kinematics._kinematics.ChassisSpeeds"}, {"name": "robotAngle", "type": "wpimath.geometry._geometry.Rotation2d"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "FUNC": "fromFieldRelativeSpeeds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Converts a user provided robot-relative set of speeds into a field-relative\nChassisSpeeds object.\n\n:param vx:         The component of speed in the x direction relative to the robot.\n                   Positive x is towards the robot's front.\n:param vy:         The component of speed in the y direction relative to the robot.\n                   Positive y is towards the robot's left.\n:param omega:      The angular rate of the robot.\n:param robotAngle: The angle of the robot as measured by a gyroscope. The\n                   robot's angle is considered to be zero when it is facing directly away from\n                   your alliance station wall. Remember that this should be CCW positive.\n\n:returns: ChassisSpeeds object representing the speeds in the field's frame\n          of reference.", "returnType": "wpimath.kinematics._kinematics.ChassisSpeeds", "args": [{"name": "vx", "type": "wpimath.units.meters_per_second"}, {"name": "vy", "type": "wpimath.units.meters_per_second"}, {"name": "omega", "type": "wpimath.units.radians_per_second"}, {"name": "robotAngle", "type": "wpimath.geometry._geometry.Rotation2d"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "FUNC": "fromRobotRelativeSpeeds"}, "inputs": {"ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Converts a user provided robot-relative ChassisSpeeds object into a\nfield-relative ChassisSpeeds object.\n\n:param robotRelativeSpeeds: The ChassisSpeeds object representing the speeds\n                            in the robot frame of reference. Positive x is the towards robot's\n                            front. Positive y is towards the robot's left.\n:param robotAngle:          The angle of the robot as measured by a gyroscope. The\n                            robot's angle is considered to be zero when it is facing directly away\n                            from your alliance station wall. Remember that this should be CCW\n                            positive.\n\n:returns: ChassisSpeeds object representing the speeds in the field's frame\n          of reference.", "returnType": "wpimath.kinematics._kinematics.ChassisSpeeds", "args": [{"name": "robotRelativeSpeeds", "type": "wpimath.kinematics._kinematics.ChassisSpeeds"}, {"name": "robotAngle", "type": "wpimath.geometry._geometry.Rotation2d"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.ChassisSpeeds", "FUNC": "fromRobotRelativeSpeeds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
