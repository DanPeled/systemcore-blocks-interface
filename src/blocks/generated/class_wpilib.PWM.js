// This file was generated. Do not edit!

import * as python from "../python.js"

// Blocks for class wpilib.PWM

python.PythonEnumValues["wpilib.PWM.PeriodMultiplier"] = ["kPeriodMultiplier_1X", "kPeriodMultiplier_2X", "kPeriodMultiplier_4X"];
python.PythonEnumTooltips["wpilib.PWM.PeriodMultiplier"] = "Represents the amount to multiply the minimum servo-pulse pwm period by.\n\nMembers:\n\n  kPeriodMultiplier_1X : Don't skip pulses. PWM pulses occur every 5.05 ms\n\n  kPeriodMultiplier_2X : Skip every other pulse. PWM pulses occur every 10.10 ms\n\n  kPeriodMultiplier_4X : Skip three out of four pulses. PWM pulses occur every 20.20 ms";


function getToolboxCategory(subcategories) {
  const category = {
    kind: "category",
    name: "PWM",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPWM"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Allocate a PWM given a channel number.\n\nChecks channel value range and allocates the appropriate channel.\nThe allocation is only done to help users ensure that they don't double\nassign channels.\n\n:param channel:          The PWM channel number. 0-9 are on-board, 10-19 are on the\n                         MXP port\n:param registerSendable: If true, adds this instance to SendableRegistry\n                         and LiveWindow", "returnType": "wpilib._wpilib.PWM", "args": [{"name": "channel", "type": "int"}, {"name": "registerSendable", "type": "bool"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.PWM"}, "inputs": {"ARG1": {"shadow": {"type": "logic_boolean", "fields": {"BOOL": "TRUE"}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Optionally eliminate the deadband from a motor controller.\n\n:param eliminateDeadband: If true, set the motor curve on the motor\n                          controller to eliminate the deadband in the middle\n                          of the range. Otherwise, keep the full range\n                          without modifying any values.", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}, {"name": "eliminateDeadband", "type": "bool"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "enableDeadbandElimination"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the bounds on the PWM values.\n\nThis gets the bounds on the PWM values for a particular each type of\ncontroller. The values determine the upper and lower speeds as well as the\ndeadband bracket.\n\n:param max:         The maximum pwm value\n:param deadbandMax: The high end of the deadband range\n:param center:      The center speed (off)\n:param deadbandMin: The low end of the deadband range\n:param min:         The minimum pwm value", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}, {"name": "max", "type": "wpimath.units.microseconds"}, {"name": "deadbandMax", "type": "wpimath.units.microseconds"}, {"name": "center", "type": "wpimath.units.microseconds"}, {"name": "deadbandMin", "type": "wpimath.units.microseconds"}, {"name": "min", "type": "wpimath.units.microseconds"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "getBounds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "int", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "getChannel"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the PWM value in terms of a position.\n\nThis is intended to be used by servos.\n\n@pre SetBounds() called.\n\n:returns: The position the servo is set to between 0.0 and 1.0.", "returnType": "float", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "getPosition"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the PWM pulse time directly from the hardware.\n\nRead a microsecond value from a PWM channel.\n\n:returns: Microsecond PWM control value.", "returnType": "wpimath.units.microseconds", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "getPulseTime"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the PWM value in terms of speed.\n\nThis is intended to be used by motor controllers.\n\n@pre SetBounds() called.\n\n:returns: The most recently set speed between -1.0 and 1.0.", "returnType": "float", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "getSpeed"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Initializes this Sendable object.\n\n:param builder: sendable builder", "returnType": "None", "args": [{"name": "sendable", "type": "wpiutil._wpiutil.Sendable"}, {"name": "builder", "type": "wpiutil._wpiutil.SendableBuilder"}], "importModule": ""}, "fields": {"CLASS": "wpiutil.Sendable", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendable"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Sets the PWM output to be a continuous high signal while enabled.", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "setAlwaysHighMode"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the bounds on the PWM pulse widths.\n\nThis sets the bounds on the PWM values for a particular type of controller.\nThe values determine the upper and lower speeds as well as the deadband\nbracket.\n\n:param max:         The max PWM pulse width in us\n:param deadbandMax: The high end of the deadband range pulse width in us\n:param center:      The center (off) pulse width in us\n:param deadbandMin: The low end of the deadband pulse width in us\n:param min:         The minimum pulse width in us", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}, {"name": "max", "type": "wpimath.units.microseconds"}, {"name": "deadbandMax", "type": "wpimath.units.microseconds"}, {"name": "center", "type": "wpimath.units.microseconds"}, {"name": "deadbandMin", "type": "wpimath.units.microseconds"}, {"name": "min", "type": "wpimath.units.microseconds"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "setBounds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Temporarily disables the PWM output. The next set call will re-enable\nthe output.", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "setDisabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Slow down the PWM signal for old devices.\n\n:param mult: The period multiplier to apply to this channel", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}, {"name": "mult", "type": "wpilib._wpilib.PWM.PeriodMultiplier"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "setPeriodMultiplier"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPeriodMultiplier"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the PWM value based on a position.\n\nThis is intended to be used by servos.\n\n@pre SetBounds() called.\n\n:param pos: The position to set the servo between 0.0 and 1.0.", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}, {"name": "pos", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "setPosition"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the PWM pulse time directly to the hardware.\n\nWrite a microsecond value to a PWM channel.\n\n:param time: Microsecond PWM value.", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}, {"name": "time", "type": "wpimath.units.microseconds"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "setPulseTime"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the PWM value based on a speed.\n\nThis is intended to be used by motor controllers.\n\n@pre SetBounds() called.\n\n:param speed: The speed to set the motor controller between -1.0 and 1.0.", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}, {"name": "speed", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "setSpeed"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Latches PWM to zero.", "returnType": "None", "args": [{"name": "pWM", "type": "wpilib._wpilib.PWM"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PWM", "FUNC": "setZeroLatch"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPWM"}}}}}},
      {"kind": "block", "type": "get_python_enum_value", "extraState": {"enumType": "wpilib.PWM.PeriodMultiplier", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.PWM.PeriodMultiplier", "ENUM_VALUE": "kPeriodMultiplier_1X"}},
      {"kind": "block", "type": "get_python_enum_value", "extraState": {"enumType": "wpilib.PWM.PeriodMultiplier", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.PWM.PeriodMultiplier", "ENUM_VALUE": "kPeriodMultiplier_2X"}},
      {"kind": "block", "type": "get_python_enum_value", "extraState": {"enumType": "wpilib.PWM.PeriodMultiplier", "importModule": "wpilib"}, "fields": {"ENUM_TYPE": "wpilib.PWM.PeriodMultiplier", "ENUM_VALUE": "kPeriodMultiplier_4X"}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}

export {getToolboxCategory}
