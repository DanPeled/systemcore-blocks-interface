// This file was generated. Do not edit!

import {Category} from "../../toolbox/items";

// Blocks for class wpimath.estimator.KalmanFilter_2_2_2

export function initialize() {
}

export function getToolboxCategory(subcategories: any): Category {
  const category = {
    kind: "category",
    name: "KalmanFilter_2_2_2",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Constructs a Kalman filter with the given plant.\n\nSee\nhttps://docs.wpilib.org/en/stable/docs/software/advanced-controls/state-space/state-space-observers.html#process-and-measurement-noise-covariance-matrices\nfor how to select the standard deviations.\n\n:param plant:              The plant used for the prediction step.\n:param stateStdDevs:       Standard deviations of model states.\n:param measurementStdDevs: Standard deviations of measurements.\n:param dt:                 Nominal discretization timestep.\n                           @throws std::invalid_argument If the system is unobservable.", "returnType": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2", "args": [{"name": "plant", "type": "wpimath._controls._controls.system.LinearSystem_2_2_2"}, {"name": "stateStdDevs", "type": "Tuple[float, float]"}, {"name": "measurementStdDevs", "type": "Tuple[float, float]"}, {"name": "dt", "type": "wpimath.units.seconds"}], "importModule": "wpimath.estimator"}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystem_2_2_2"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myfloat64[2, 2]]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the error covariance matrix P.", "returnType": "numpy.ndarray[numpy.float64[2, 2]]", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "P"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns an element of the error covariance matrix P.\n\n:param i: Row of P.\n:param j: Column of P.", "returnType": "float", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}, {"name": "i", "type": "int"}, {"name": "j", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "P"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Correct the state estimate x-hat using the measurements in y.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.", "returnType": "None", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}, {"name": "u", "type": "numpy.ndarray[numpy.float64[2, 1]]"}, {"name": "y", "type": "numpy.ndarray[numpy.float64[2, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "correct"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Correct the state estimate x-hat using the measurements in y.\n\nThis is useful for when the measurement noise covariances vary.\n\n:param u: Same control input used in the predict step.\n:param y: Measurement vector.\n:param R: Continuous measurement noise covariance matrix.", "returnType": "None", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}, {"name": "u", "type": "numpy.ndarray[numpy.float64[2, 1]]"}, {"name": "y", "type": "numpy.ndarray[numpy.float64[2, 1]]"}, {"name": "R", "type": "numpy.ndarray[numpy.float64[2, 2]]"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "correct"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 2]]"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Project the model into the future with a new control input u.\n\n:param u:  New control input from controller.\n:param dt: Timestep for prediction.", "returnType": "None", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}, {"name": "u", "type": "numpy.ndarray[numpy.float64[2, 1]]"}, {"name": "dt", "type": "wpimath.units.seconds"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "predict"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Resets the observer.", "returnType": "None", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the current error covariance matrix P.\n\n:param P: The error covariance matrix P.", "returnType": "None", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}, {"name": "P", "type": "numpy.ndarray[numpy.float64[2, 2]]"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "setP"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 2]]"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set initial state estimate x-hat.\n\n:param xHat: The state estimate x-hat.", "returnType": "None", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}, {"name": "xHat", "type": "numpy.ndarray[numpy.float64[2, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "setXhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set an element of the initial state estimate x-hat.\n\n:param i:     Row of x-hat.\n:param value: Value for element of x-hat.", "returnType": "None", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}, {"name": "i", "type": "int"}, {"name": "value", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "setXhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the state estimate x-hat.", "returnType": "numpy.ndarray[numpy.float64[2, 1]]", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "xhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns an element of the state estimate x-hat.\n\n:param i: Row of x-hat.", "returnType": "float", "args": [{"name": "kalmanFilter_2_2_2", "type": "wpimath._controls._controls.estimator.KalmanFilter_2_2_2"}, {"name": "i", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpimath.estimator.KalmanFilter_2_2_2", "FUNC": "xhat"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myKalmanFilter_2_2_2"}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
