// This file was generated. Do not edit!

import {Category} from "../../toolbox/items";

// Blocks for class wpilib.PneumaticsBase

export function initialize() {
}

export function getToolboxCategory(subcategories: any): Category {
  const category = {
    kind: "category",
    name: "PneumaticsBase",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPneumaticsBase"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "", "returnType": "wpilib._wpilib.PneumaticsBase", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.PneumaticsBase"}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Check to see if the masked solenoids can be reserved, and if not reserve\nthem.\n\n:param mask: The bitmask of solenoids to reserve\n\n:returns: 0 if successful; mask of solenoids that couldn't be allocated\n          otherwise", "returnType": "int", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "mask", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "checkAndReserveSolenoids"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Check if a solenoid channel is valid.\n\n:param channel: Channel to check\n\n:returns: True if channel exists", "returnType": "bool", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "channel", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "checkSolenoidChannel"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Disables the compressor.", "returnType": "None", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "disableCompressor"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "If supported by the device, enables the compressor in analog mode. This\nmode uses an analog pressure sensor connected to analog channel 0 to cycle\nthe compressor. The compressor will turn on when the pressure drops below\n``minPressure`` and will turn off when the pressure reaches {@code\nmaxPressure}. This mode is only supported by the REV PH with the REV Analog\nPressure Sensor connected to analog channel 0.\n\nOn CTRE PCM, this will enable digital control.\n\n:param minPressure: The minimum pressure. The compressor will turn on\n                    when the pressure drops below this value.\n:param maxPressure: The maximum pressure. The compressor will turn\n                    off when the pressure reaches this value.", "returnType": "None", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "minPressure", "type": "wpimath.units.pounds_per_square_inch"}, {"name": "maxPressure", "type": "wpimath.units.pounds_per_square_inch"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "enableCompressorAnalog"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Enables the compressor in digital mode using the digital pressure switch.\nThe compressor will turn on when the pressure switch indicates that the\nsystem is not full, and will turn off when the pressure switch indicates\nthat the system is full.", "returnType": "None", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "enableCompressorDigital"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "If supported by the device, enables the compressor in hybrid mode. This\nmode uses both a digital pressure switch and an analog pressure sensor\nconnected to analog channel 0 to cycle the compressor. This mode is only\nsupported by the REV PH with the REV Analog Pressure Sensor connected to\nanalog channel 0.\n\nThe compressor will turn on when \\a both:\n\n- The digital pressure switch indicates the system is not full AND\n- The analog pressure sensor indicates that the pressure in the system\nis below the specified minimum pressure.\n\nThe compressor will turn off when \\a either:\n\n- The digital pressure switch is disconnected or indicates that the system\nis full OR\n- The pressure detected by the analog sensor is greater than the specified\nmaximum pressure.\n\nOn CTRE PCM, this will enable digital control.\n\n:param minPressure: The minimum pressure. The compressor will turn on\n                    when the pressure drops below this value and the pressure switch indicates\n                    that the system is not full.\n:param maxPressure: The maximum pressure. The compressor will turn\n                    off when the pressure reaches this value or the pressure switch is\n                    disconnected or indicates that the system is full.", "returnType": "None", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "minPressure", "type": "wpimath.units.pounds_per_square_inch"}, {"name": "maxPressure", "type": "wpimath.units.pounds_per_square_inch"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "enableCompressorHybrid"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Fire a single solenoid shot.\n\n:param index: solenoid index", "returnType": "None", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "index", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "fireOneShot"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "If supported by the device, returns the raw voltage of the specified analog\ninput channel.\n\nThis function is only supported by the REV PH. On CTRE PCM, this will\nreturn 0.\n\n:param channel: The analog input channel to read voltage from.\n\n:returns: The voltage of the specified analog input channel.", "returnType": "wpimath.units.volts", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "channel", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getAnalogVoltage"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns whether the compressor is active or not.\n\n:returns: True if the compressor is on - otherwise false.", "returnType": "bool", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getCompressor"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCompressorConfigType"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the active compressor configuration.\n\n:returns: The active compressor configuration.", "returnType": "wpilib._wpilib.CompressorConfigType", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getCompressorConfigType"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the current drawn by the compressor.\n\n:returns: The current drawn by the compressor.", "returnType": "wpimath.units.amperes", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getCompressorCurrent"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "For internal use to get the default for a specific type.\n\n:param moduleType: module type\n\n:returns: module default", "returnType": "int", "args": [{"name": "moduleType", "type": "wpilib._wpilib.PneumaticsModuleType"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getDefaultForType"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsModuleType"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPneumaticsBase"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "For internal use to get a module for a specific type.\n\n:param module:     module number\n:param moduleType: module type\n\n:returns: module", "returnType": "wpilib._wpilib.PneumaticsBase", "args": [{"name": "module", "type": "int"}, {"name": "moduleType", "type": "wpilib._wpilib.PneumaticsModuleType"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getForType"}, "inputs": {"ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsModuleType"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get module number for this module.\n\n:returns: module number", "returnType": "int", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getModuleNumber"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "If supported by the device, returns the pressure read by an analog\npressure sensor on the specified analog input channel.\n\nThis function is only supported by the REV PH. On CTRE PCM, this will\nreturn 0.\n\n:param channel: The analog input channel to read pressure from.\n\n:returns: The pressure read by an analog pressure sensor on the\n          specified analog input channel.", "returnType": "wpimath.units.pounds_per_square_inch", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "channel", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getPressure"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the state of the pressure switch.\n\n:returns: True if pressure switch indicates that the system is full,\n          otherwise false.", "returnType": "bool", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getPressureSwitch"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get a bitmask of disabled solenoids.\n\n:returns: bitmask of disabled solenoids", "returnType": "int", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getSolenoidDisabledList"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Gets a bitmask of solenoid values.\n\n:returns: solenoid values", "returnType": "int", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "getSolenoids"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCompressor"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Create a compressor object.\n\n:returns: Compressor object", "returnType": "wpilib._wpilib.Compressor", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "makeCompressor"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDoubleSolenoid"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Create a double solenoid object for the specified channels.\n\n:param forwardChannel: solenoid channel for forward\n:param reverseChannel: solenoid channel for reverse\n\n:returns: DoubleSolenoid object", "returnType": "wpilib._wpilib.DoubleSolenoid", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "forwardChannel", "type": "int"}, {"name": "reverseChannel", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "makeDoubleSolenoid"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "mySolenoid"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Create a solenoid object for the specified channel.\n\n:param channel: solenoid channel\n\n:returns: Solenoid object", "returnType": "wpilib._wpilib.Solenoid", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "channel", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "makeSolenoid"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Reserve the compressor.\n\n:returns: true if successful; false if compressor already reserved", "returnType": "bool", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "reserveCompressor"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the duration for a single solenoid shot.\n\n:param index:    solenoid index\n:param duration: shot duration", "returnType": "None", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "index", "type": "int"}, {"name": "duration", "type": "wpimath.units.seconds"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "setOneShotDuration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Sets solenoids on a pneumatics module.\n\n:param mask:   bitmask to set\n:param values: solenoid values", "returnType": "None", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "mask", "type": "int"}, {"name": "values", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "setSolenoids"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Unreserve the compressor.", "returnType": "None", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "unreserveCompressor"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Unreserve the masked solenoids.\n\n:param mask: The bitmask of solenoids to unreserve", "returnType": "None", "args": [{"name": "pneumaticsBase", "type": "wpilib._wpilib.PneumaticsBase"}, {"name": "mask", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.PneumaticsBase", "FUNC": "unreserveSolenoids"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPneumaticsBase"}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
