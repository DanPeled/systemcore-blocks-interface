// This file was generated. Do not edit!

// Blocks for class wpilib.RobotController

export function getToolboxCategory(subcategories) {
  const category = {
    kind: "category",
    name: "RobotController",
    contents: [
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Read the battery voltage.\n\n:returns: The battery voltage in Volts.", "returnType": "wpimath.units.volts", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getBatteryVoltage"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the current brownout voltage setting.\n\n:returns: The brownout voltage", "returnType": "wpimath.units.volts", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getBrownoutVoltage"}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myCANStatus"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the current status of the CAN bus.\n\n:returns: The status of the CAN bus", "returnType": "wpilib._wpilib.CANStatus", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getCANStatus"}}}}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the current CPU temperature.\n\n:returns: current CPU temperature", "returnType": "wpimath.units.celsius", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getCPUTemp"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Return the comments from the roboRIO web interface.\n\nThe comments string is cached after the first call to this function on the\nRoboRIO - restart the robot code to reload the comments string after\nchanging it in the web interface.\n\n:returns: The comments from the roboRIO web interface.", "returnType": "str", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getComments"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the current output of the 3.3V rail.\n\n:returns: The controller 3.3V rail output current value in Amps", "returnType": "float", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getCurrent3V3"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the current output of the 5V rail.\n\n:returns: The controller 5V rail output current value in Amps", "returnType": "float", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getCurrent5V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the current output of the 6V rail.\n\n:returns: The controller 6V rail output current value in Amps", "returnType": "float", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getCurrent6V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the enabled state of the 3.3V rail. The rail may be disabled due to\ncalling SetEnabled3V3(), a controller brownout, a short circuit on the\nrail, or controller over-voltage.\n\n:returns: The controller 3.3V rail enabled value. True for enabled.", "returnType": "bool", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getEnabled3V3"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the enabled state of the 5V rail. The rail may be disabled due to\ncalling SetEnabled5V(), a controller brownout, a short circuit on the rail,\nor controller over-voltage.\n\n:returns: The controller 5V rail enabled value. True for enabled.", "returnType": "bool", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getEnabled5V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the enabled state of the 6V rail. The rail may be disabled due to\ncalling SetEnabled6V(), a controller brownout, a short circuit on the rail,\nor controller over-voltage.\n\n:returns: The controller 6V rail enabled value. True for enabled.", "returnType": "bool", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getEnabled6V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Return the FPGA Revision number.\n\nThe format of the revision is 3 numbers. The 12 most significant bits are\nthe Major Revision. The next 8 bits are the Minor Revision. The 12 least\nsignificant bits are the Build Number.\n\n:returns: FPGA Revision number.", "returnType": "int", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getFPGARevision"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Read the microsecond-resolution timer on the FPGA.\n\n:returns: The current time in microseconds according to the FPGA (since FPGA\n          reset).", "returnType": "int", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getFPGATime"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Return the FPGA Version number.\n\nFor now, expect this to be competition year.\n\n:returns: FPGA Version number.", "returnType": "int", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getFPGAVersion"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the count of the total current faults on the 3.3V rail since the\ncontroller has booted.\n\n:returns: The number of faults", "returnType": "int", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getFaultCount3V3"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the count of the total current faults on the 5V rail since the\ncontroller has booted.\n\n:returns: The number of faults", "returnType": "int", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getFaultCount5V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the count of the total current faults on the 6V rail since the\ncontroller has booted.\n\n:returns: The number of faults.", "returnType": "int", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getFaultCount6V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the input current to the robot controller.\n\n:returns: The controller input current value in Amps", "returnType": "float", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getInputCurrent"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the input voltage to the robot controller.\n\n:returns: The controller input voltage value in Volts", "returnType": "float", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getInputVoltage"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Gets the current state of the Robot Signal Light (RSL)\n\n:returns: The current state of the RSL- true if on, false if off", "returnType": "bool", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getRSLState"}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myRadioLEDState"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the state of the \"Radio\" LED. On the RoboRIO, this reads from sysfs, so\nthis function should not be called multiple times per loop cycle to avoid\noverruns.\n\n:returns: The state of the LED.", "returnType": "wpilib._wpilib.RadioLEDState", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getRadioLEDState"}}}}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Return the serial number of the roboRIO.\n\n:returns: The serial number of the roboRIO.", "returnType": "str", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getSerialNumber"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Returns the team number configured for the robot controller.\n\n:returns: team number, or 0 if not found.", "returnType": "int", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getTeamNumber"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the state of the \"USER\" button on the roboRIO.\n\n@warning the User Button is used to stop user programs from automatically\nloading if it is held for more then 5 seconds. Because of this, it's not\nrecommended to be used by teams for any other purpose.\n\n:returns: True if the button is currently pressed down", "returnType": "bool", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getUserButton"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the voltage of the 3.3V rail.\n\n:returns: The controller 3.3V rail voltage value in Volts", "returnType": "float", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getVoltage3V3"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the voltage of the 5V rail.\n\n:returns: The controller 5V rail voltage value in Volts", "returnType": "float", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getVoltage5V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Get the voltage of the 6V rail.\n\n:returns: The controller 6V rail voltage value in Volts", "returnType": "float", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "getVoltage6V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Check if the system is browned out.\n\n:returns: True if the system is browned out", "returnType": "bool", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "isBrownedOut"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Check if the FPGA outputs are enabled.\n\nThe outputs may be disabled if the robot is disabled or e-stopped, the\nwatchdog has expired, or if the roboRIO browns out.\n\n:returns: True if the FPGA outputs are enabled.", "returnType": "bool", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "isSysActive"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Gets if the system time is valid.\n\n:returns: True if the system time is valid, false otherwise", "returnType": "bool", "args": [], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "isSystemTimeValid"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Set the voltage the roboRIO will brownout and disable all outputs.\n\nNote that this only does anything on the roboRIO 2.\nOn the roboRIO it is a no-op.\n\n:param brownoutVoltage: The brownout voltage", "returnType": "None", "args": [{"name": "brownoutVoltage", "type": "wpimath.units.volts"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "setBrownoutVoltage"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Enables or disables the 3.3V rail.\n\n:param enabled: whether to enable the 3.3V rail.", "returnType": "None", "args": [{"name": "enabled", "type": "bool"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "setEnabled3V3"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Enables or disables the 5V rail.\n\n:param enabled: whether to enable the 5V rail.", "returnType": "None", "args": [{"name": "enabled", "type": "bool"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "setEnabled5V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Enables or disables the 6V rail.\n\n:param enabled: whether to enable the 6V rail.", "returnType": "None", "args": [{"name": "enabled", "type": "bool"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "setEnabled6V"}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Set the state of the \"Radio\" LED. On the RoboRIO, this writes to sysfs, so\nthis function should not be called multiple times per loop cycle to avoid\noverruns.\n\n:param state: The state to set the LED to.", "returnType": "None", "args": [{"name": "state", "type": "wpilib._wpilib.RadioLEDState"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.RobotController", "FUNC": "setRadioLEDState"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRadioLEDState"}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
