// This file was generated. Do not edit!

// Blocks for class wpilib.drive.MecanumDrive

export function getToolboxCategory(subcategories) {
  const category = {
    kind: "category",
    name: "MecanumDrive",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myMecanumDrive"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Construct a MecanumDrive.\n\nIf a motor needs to be inverted, do so before passing it in.\n\n:param frontLeftMotor:  Front-left motor.\n:param rearLeftMotor:   Rear-left motor.\n:param frontRightMotor: Front-right motor.\n:param rearRightMotor:  Rear-right motor.", "returnType": "wpilib.drive._drive.MecanumDrive", "args": [{"name": "frontLeftMotor", "type": "wpilib.interfaces._interfaces.MotorController"}, {"name": "rearLeftMotor", "type": "wpilib.interfaces._interfaces.MotorController"}, {"name": "frontRightMotor", "type": "wpilib.interfaces._interfaces.MotorController"}, {"name": "rearRightMotor", "type": "wpilib.interfaces._interfaces.MotorController"}], "importModule": "wpilib.drive"}, "fields": {"CLASS": "wpilib.drive.MecanumDrive"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorController"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorController"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorController"}}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorController"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myMecanumDrive"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Construct a MecanumDrive.\n\nIf a motor needs to be inverted, do so before passing it in.\n\n:param frontLeftMotor:  Front-left motor setter.\n:param rearLeftMotor:   Rear-left motor setter.\n:param frontRightMotor: Front-right motor setter.\n:param rearRightMotor:  Rear-right motor setter.", "returnType": "wpilib.drive._drive.MecanumDrive", "args": [{"name": "frontLeftMotor", "type": "Callable[[float], None]"}, {"name": "rearLeftMotor", "type": "Callable[[float], None]"}, {"name": "frontRightMotor", "type": "Callable[[float], None]"}, {"name": "rearRightMotor", "type": "Callable[[float], None]"}], "importModule": "wpilib.drive"}, "fields": {"CLASS": "wpilib.drive.MecanumDrive"}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Check if this motor has exceeded its timeout.\n\nThis method is called periodically to determine if this motor has exceeded\nits timeout value. If it has, the stop method is called, and the motor is\nshut down until its value is updated again.", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "check"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Check the motors to see if any have timed out.\n\nThis static method is called periodically to poll all the motors and stop\nany that have timed out.", "returnType": "None", "args": [], "importModule": "wpilib.drive"}, "fields": {"CLASS": "wpilib.drive.MecanumDrive", "FUNC": "checkMotors"}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Drive method for Mecanum platform.\n\nAngles are measured counterclockwise from the positive X axis. The robot's\nspeed is independent from its angle or rotation rate.\n\n:param xSpeed:    The robot's speed along the X axis [-1.0..1.0]. Forward is\n                  positive.\n:param ySpeed:    The robot's speed along the Y axis [-1.0..1.0]. Left is\n                  positive.\n:param zRotation: The robot's rotation rate around the Z axis [-1.0..1.0].\n                  Counterclockwise is positive.\n:param gyroAngle: The gyro heading around the Z axis. Use this to implement\n                  field-oriented controls.", "returnType": "None", "args": [{"name": "mecanumDrive", "type": "wpilib.drive._drive.MecanumDrive"}, {"name": "xSpeed", "type": "float"}, {"name": "ySpeed", "type": "float"}, {"name": "zRotation", "type": "float"}, {"name": "gyroAngle", "type": "wpimath.geometry._geometry.Rotation2d"}], "importModule": ""}, "fields": {"CLASS": "wpilib.drive.MecanumDrive", "FUNC": "driveCartesian"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDrive"}}}}, "ARG4": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myWheelSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Cartesian inverse kinematics for Mecanum platform.\n\nAngles are measured counterclockwise from the positive X axis. The robot's\nspeed is independent from its angle or rotation rate.\n\n:param xSpeed:    The robot's speed along the X axis [-1.0..1.0]. Forward is\n                  positive.\n:param ySpeed:    The robot's speed along the Y axis [-1.0..1.0]. Left is\n                  positive.\n:param zRotation: The robot's rotation rate around the Z axis [-1.0..1.0].\n                  Counterclockwise is positive.\n:param gyroAngle: The gyro heading around the Z axis. Use this to implement\n                  field-oriented controls.\n\n:returns: Wheel speeds [-1.0..1.0].", "returnType": "wpilib.drive._drive.MecanumDrive.WheelSpeeds", "args": [{"name": "xSpeed", "type": "float"}, {"name": "ySpeed", "type": "float"}, {"name": "zRotation", "type": "float"}, {"name": "gyroAngle", "type": "wpimath.geometry._geometry.Rotation2d"}], "importModule": "wpilib.drive"}, "fields": {"CLASS": "wpilib.drive.MecanumDrive", "FUNC": "driveCartesianIK"}, "inputs": {"ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Drive method for Mecanum platform.\n\nAngles are measured counterclockwise from the positive X axis. The robot's\nspeed is independent from its angle or rotation rate.\n\n:param magnitude: The robot's speed at a given angle [-1.0..1.0]. Forward is\n                  positive.\n:param angle:     The angle around the Z axis at which the robot drives.\n:param zRotation: The robot's rotation rate around the Z axis [-1.0..1.0].\n                  Counterclockwise is positive.", "returnType": "None", "args": [{"name": "mecanumDrive", "type": "wpilib.drive._drive.MecanumDrive"}, {"name": "magnitude", "type": "float"}, {"name": "angle", "type": "wpimath.geometry._geometry.Rotation2d"}, {"name": "zRotation", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.drive.MecanumDrive", "FUNC": "drivePolar"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDrive"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Feed the motor safety object.\n\nResets the timer on this object that is used to do the timeouts.", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "feed"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Feed the motor safety object. Resets the timer that will stop the motors if\nit completes.\n\n@see MotorSafetyHelper::Feed()", "returnType": "None", "args": [{"name": "robotDriveBase", "type": "wpilib.drive._drive.RobotDriveBase"}], "importModule": ""}, "fields": {"CLASS": "wpilib.drive.RobotDriveBase", "FUNC": "feedWatchdog"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRobotDriveBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "str", "args": [{"name": "mecanumDrive", "type": "wpilib.drive._drive.MecanumDrive"}], "importModule": ""}, "fields": {"CLASS": "wpilib.drive.MecanumDrive", "FUNC": "getDescription"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDrive"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Retrieve the timeout value for the corresponding motor safety object.\n\n:returns: the timeout value.", "returnType": "wpimath.units.seconds", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "getExpiration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "None", "args": [{"name": "mecanumDrive", "type": "wpilib.drive._drive.MecanumDrive"}, {"name": "builder", "type": "wpiutil._wpiutil.SendableBuilder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.drive.MecanumDrive", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDrive"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Determine if the motor is still operating or has timed out.\n\n:returns: true if the motor is still operating normally and hasn't timed out.", "returnType": "bool", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "isAlive"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Return the state of the motor safety enabled flag.\n\nReturn if the motor safety is currently enabled for this device.\n\n:returns: True if motor safety is enforced for this device.", "returnType": "bool", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "isSafetyEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Sets the deadband applied to the drive inputs (e.g., joystick values).\n\nThe default value is 0.02. Inputs smaller than the deadband are set to 0.0\nwhile inputs larger than the deadband are scaled from 0.0 to 1.0. See\nfrc::ApplyDeadband().\n\n:param deadband: The deadband to set.", "returnType": "None", "args": [{"name": "robotDriveBase", "type": "wpilib.drive._drive.RobotDriveBase"}, {"name": "deadband", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.drive.RobotDriveBase", "FUNC": "setDeadband"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRobotDriveBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the expiration time for the corresponding motor safety object.\n\n:param expirationTime: The timeout value.", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}, {"name": "expirationTime", "type": "wpimath.units.seconds"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "setExpiration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Configure the scaling factor for using RobotDrive with motor controllers in\na mode other than PercentVbus or to limit the maximum output.\n\n:param maxOutput: Multiplied with the output percentage computed by the\n                  drive functions.", "returnType": "None", "args": [{"name": "robotDriveBase", "type": "wpilib.drive._drive.RobotDriveBase"}, {"name": "maxOutput", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.drive.RobotDriveBase", "FUNC": "setMaxOutput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRobotDriveBase"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Enable/disable motor safety for this device.\n\nTurn on and off the motor safety option for this PWM object.\n\n:param enabled: True if motor safety is enforced for this object.", "returnType": "None", "args": [{"name": "motorSafety", "type": "wpilib._wpilib.MotorSafety"}, {"name": "enabled", "type": "bool"}], "importModule": ""}, "fields": {"CLASS": "wpilib.MotorSafety", "FUNC": "setSafetyEnabled"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMotorSafety"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "None", "args": [{"name": "mecanumDrive", "type": "wpilib.drive._drive.MecanumDrive"}], "importModule": ""}, "fields": {"CLASS": "wpilib.drive.MecanumDrive", "FUNC": "stopMotor"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myMecanumDrive"}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
