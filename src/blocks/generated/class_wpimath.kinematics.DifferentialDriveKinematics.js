// This file was generated. Do not edit!

import * as python from "../python.js";

// Blocks for class wpimath.kinematics.DifferentialDriveKinematics

python.PythonVariableGetterNames["instance wpimath.kinematics.DifferentialDriveKinematics wpimath.units.meters"] = ["trackWidth"];
python.PythonVariableGetterTooltips["instance wpimath.kinematics.DifferentialDriveKinematics wpimath.units.meters"] = ["Differential drive trackwidth."];


export function getToolboxCategory(subcategories) {
  const category = {
    kind: "category",
    name: "DifferentialDriveKinematics",
    contents: [
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.meters", "key": "instance wpimath.kinematics.DifferentialDriveKinematics wpimath.units.meters", "importModule": "", "selfLabel": "differentialDriveKinematics", "selfType": "wpimath.kinematics.DifferentialDriveKinematics"}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveKinematics", "VAR": "trackWidth"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveKinematics"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDifferentialDriveKinematics"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Constructs a differential drive kinematics object.\n\n:param trackWidth: The track width of the drivetrain. Theoretically, this is\n                   the distance between the left wheels and right wheels. However, the\n                   empirical value may be larger than the physical measured value due to\n                   scrubbing effects.", "returnType": "wpimath.kinematics._kinematics.DifferentialDriveKinematics", "args": [{"name": "trackWidth", "type": "wpimath.units.meters"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveKinematics"}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myChassisSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns a chassis speed from left and right component velocities using\nforward kinematics.\n\n:param wheelSpeeds: The left and right velocities.\n\n:returns: The chassis speed.", "returnType": "wpimath.kinematics._kinematics.ChassisSpeeds", "args": [{"name": "differentialDriveKinematics", "type": "wpimath.kinematics._kinematics.DifferentialDriveKinematics"}, {"name": "wheelSpeeds", "type": "wpimath.kinematics._kinematics.DifferentialDriveWheelSpeeds"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveKinematics", "FUNC": "toChassisSpeeds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveKinematics"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveWheelSpeeds"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTwist2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns a twist from left and right distance deltas using\nforward kinematics.\n\n:param leftDistance:  The distance measured by the left encoder.\n:param rightDistance: The distance measured by the right encoder.\n\n:returns: The resulting Twist2d.", "returnType": "wpimath.geometry._geometry.Twist2d", "args": [{"name": "differentialDriveKinematics", "type": "wpimath.kinematics._kinematics.DifferentialDriveKinematics"}, {"name": "leftDistance", "type": "wpimath.units.meters"}, {"name": "rightDistance", "type": "wpimath.units.meters"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveKinematics", "FUNC": "toTwist2d"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveKinematics"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myTwist2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "wpimath.geometry._geometry.Twist2d", "args": [{"name": "differentialDriveKinematics", "type": "wpimath.kinematics._kinematics.DifferentialDriveKinematics"}, {"name": "start", "type": "wpimath.kinematics._kinematics.DifferentialDriveWheelPositions"}, {"name": "end", "type": "wpimath.kinematics._kinematics.DifferentialDriveWheelPositions"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveKinematics", "FUNC": "toTwist2d"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveKinematics"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveWheelPositions"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveWheelPositions"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDifferentialDriveWheelSpeeds"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns left and right component velocities from a chassis speed using\ninverse kinematics.\n\n:param chassisSpeeds: The linear and angular (dx and dtheta) components that\n                      represent the chassis' speed.\n\n:returns: The left and right velocities.", "returnType": "wpimath.kinematics._kinematics.DifferentialDriveWheelSpeeds", "args": [{"name": "differentialDriveKinematics", "type": "wpimath.kinematics._kinematics.DifferentialDriveKinematics"}, {"name": "chassisSpeeds", "type": "wpimath.kinematics._kinematics.ChassisSpeeds"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveKinematics", "FUNC": "toWheelSpeeds"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveKinematics"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myChassisSpeeds"}}}}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
