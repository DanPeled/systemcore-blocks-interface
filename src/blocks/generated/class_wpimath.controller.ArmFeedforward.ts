// This file was generated. Do not edit!

import * as python from "../python";
import {Category} from "../../toolbox/items";

// Blocks for class wpimath.controller.ArmFeedforward

export function initialize() {
  python.initializeInstanceVariableGetter("wpimath.controller.ArmFeedforward", "wpimath.units.volt_seconds_squared_per_radian", ["kA"], ["The acceleration gain, in volt seconds\u00b2 per radian."]);
  python.initializeInstanceVariableGetter("wpimath.controller.ArmFeedforward", "wpimath.units.volts", ["kG", "kS"], ["The gravity gain, in volts.", "The static gain, in volts."]);
  python.initializeInstanceVariableGetter("wpimath.controller.ArmFeedforward", "wpimath.units.volt_seconds_per_radian", ["kV"], ["The velocity gain, in volt seconds per radian."]);
}

export function getToolboxCategory(subcategories: any): Category {
  const category = {
    kind: "category",
    name: "ArmFeedforward",
    contents: [
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.volt_seconds_squared_per_radian", "key": "instance wpimath.controller.ArmFeedforward wpimath.units.volt_seconds_squared_per_radian", "importModule": "", "selfLabel": "armFeedforward", "selfType": "wpimath.controller.ArmFeedforward"}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward", "VAR": "kA"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.volts", "key": "instance wpimath.controller.ArmFeedforward wpimath.units.volts", "importModule": "", "selfLabel": "armFeedforward", "selfType": "wpimath.controller.ArmFeedforward"}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward", "VAR": "kG"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.volts", "key": "instance wpimath.controller.ArmFeedforward wpimath.units.volts", "importModule": "", "selfLabel": "armFeedforward", "selfType": "wpimath.controller.ArmFeedforward"}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward", "VAR": "kS"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.volt_seconds_per_radian", "key": "instance wpimath.controller.ArmFeedforward wpimath.units.volt_seconds_per_radian", "importModule": "", "selfLabel": "armFeedforward", "selfType": "wpimath.controller.ArmFeedforward"}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward", "VAR": "kV"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myArmFeedforward"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Creates a new ArmFeedforward with the specified gains.\n\n:param kS: The static gain, in volts.\n:param kG: The gravity gain, in volts.\n:param kV: The velocity gain, in volt seconds per radian.\n:param kA: The acceleration gain, in volt seconds\u00b2 per radian.", "returnType": "wpimath._controls._controls.controller.ArmFeedforward", "args": [{"name": "kS", "type": "wpimath.units.volts"}, {"name": "kG", "type": "wpimath.units.volts"}, {"name": "kV", "type": "wpimath.units.volt_seconds_per_radian"}, {"name": "kA", "type": "wpimath.units.volt_seconds_squared_per_radian"}], "importModule": "wpimath.controller"}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward"}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the feedforward from the gains and setpoints.\n\n:param angle:        The angle setpoint, in radians. This angle should be\n                     measured from the horizontal (i.e. if the provided\n                     angle is 0, the arm should be parallel to the floor).\n                     If your encoder does not follow this convention, an\n                     offset should be added.\n:param velocity:     The velocity setpoint, in radians per second.\n:param acceleration: The acceleration setpoint, in radians per second\u00b2.\n\n:returns: The computed feedforward, in volts.", "returnType": "wpimath.units.volts", "args": [{"name": "armFeedforward", "type": "wpimath._controls._controls.controller.ArmFeedforward"}, {"name": "angle", "type": "wpimath.units.radians"}, {"name": "velocity", "type": "wpimath.units.radians_per_second"}, {"name": "acceleration", "type": "wpimath.units.radians_per_second_squared"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the maximum achievable acceleration given a maximum voltage\nsupply, a position, and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the arm.\n:param angle:      The angle of the arm. This angle should be measured\n                   from the horizontal (i.e. if the provided angle is 0,\n                   the arm should be parallel to the floor). If your\n                   encoder does not follow this convention, an offset\n                   should be added.\n:param velocity:   The velocity of the arm.\n\n:returns: The maximum possible acceleration at the given velocity and angle.", "returnType": "wpimath.units.radians_per_second_squared", "args": [{"name": "armFeedforward", "type": "wpimath._controls._controls.controller.ArmFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "angle", "type": "wpimath.units.radians"}, {"name": "velocity", "type": "wpimath.units.radians_per_second"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "maxAchievableAcceleration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the maximum achievable velocity given a maximum voltage supply,\na position, and an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the arm.\n:param angle:        The angle of the arm. This angle should be measured\n                     from the horizontal (i.e. if the provided angle is 0,\n                     the arm should be parallel to the floor). If your\n                     encoder does not follow this convention, an offset\n                     should be added.\n:param acceleration: The acceleration of the arm.\n\n:returns: The maximum possible velocity at the given acceleration and angle.", "returnType": "wpimath.units.radians_per_second", "args": [{"name": "armFeedforward", "type": "wpimath._controls._controls.controller.ArmFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "angle", "type": "wpimath.units.radians"}, {"name": "acceleration", "type": "wpimath.units.radians_per_second_squared"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "maxAchievableVelocity"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the minimum achievable acceleration given a maximum voltage\nsupply, a position, and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the arm.\n:param angle:      The angle of the arm. This angle should be measured\n                   from the horizontal (i.e. if the provided angle is 0,\n                   the arm should be parallel to the floor). If your\n                   encoder does not follow this convention, an offset\n                   should be added.\n:param velocity:   The velocity of the arm.\n\n:returns: The minimum possible acceleration at the given velocity and angle.", "returnType": "wpimath.units.radians_per_second_squared", "args": [{"name": "armFeedforward", "type": "wpimath._controls._controls.controller.ArmFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "angle", "type": "wpimath.units.radians"}, {"name": "velocity", "type": "wpimath.units.radians_per_second"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "minAchievableAcceleration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the minimum achievable velocity given a maximum voltage supply,\na position, and an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the arm.\n:param angle:        The angle of the arm. This angle should be measured\n                     from the horizontal (i.e. if the provided angle is 0,\n                     the arm should be parallel to the floor). If your\n                     encoder does not follow this convention, an offset\n                     should be added.\n:param acceleration: The acceleration of the arm.\n\n:returns: The minimum possible velocity at the given acceleration and angle.", "returnType": "wpimath.units.radians_per_second", "args": [{"name": "armFeedforward", "type": "wpimath._controls._controls.controller.ArmFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "angle", "type": "wpimath.units.radians"}, {"name": "acceleration", "type": "wpimath.units.radians_per_second_squared"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ArmFeedforward", "FUNC": "minAchievableVelocity"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myArmFeedforward"}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
