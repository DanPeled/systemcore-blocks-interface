// This file was generated. Do not edit!

import {Category} from "../../toolbox/items";

// Blocks for class wpimath.kinematics.DifferentialDriveOdometry

export function initialize() {
}

export function getToolboxCategory(subcategories: any): Category {
  const category = {
    kind: "category",
    name: "DifferentialDriveOdometry",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDifferentialDriveOdometry"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Constructs a DifferentialDriveOdometry object.\n\nIF leftDistance and rightDistance are unspecified,\nYou NEED to reset your encoders (to zero).\n\n:param gyroAngle:     The angle reported by the gyroscope.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n:param initialPose:   The starting position of the robot on the field.", "returnType": "wpimath.kinematics._kinematics.DifferentialDriveOdometry", "args": [{"name": "gyroAngle", "type": "wpimath.geometry._geometry.Rotation2d"}, {"name": "leftDistance", "type": "wpimath.units.meters"}, {"name": "rightDistance", "type": "wpimath.units.meters"}, {"name": "initialPose", "type": "wpimath.geometry._geometry.Pose2d"}], "importModule": "wpimath.kinematics"}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveOdometry"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}, "ARG3": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose2d"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the position of the robot on the field.\n\n:returns: The pose of the robot.", "returnType": "wpimath.geometry._geometry.Pose2d", "args": [{"name": "differentialDriveOdometryBase", "type": "wpimath.kinematics._kinematics.DifferentialDriveOdometryBase"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveOdometryBase", "FUNC": "getPose"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveOdometryBase"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Resets the pose.\n\n:param pose: The pose to reset to.", "returnType": "None", "args": [{"name": "differentialDriveOdometryBase", "type": "wpimath.kinematics._kinematics.DifferentialDriveOdometryBase"}, {"name": "pose", "type": "wpimath.geometry._geometry.Pose2d"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveOdometryBase", "FUNC": "resetPose"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveOdometryBase"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose2d"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Resets the robot's position on the field.\n\nIF leftDistance and rightDistance are unspecified,\nYou NEED to reset your encoders (to zero).\n\nThe gyroscope angle does not need to be reset here on the user's robot\ncode. The library automatically takes care of offsetting the gyro angle.\n\n:param pose:          The position on the field that your robot is at.\n:param gyroAngle:     The angle reported by the gyroscope.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.", "returnType": "None", "args": [{"name": "differentialDriveOdometry", "type": "wpimath.kinematics._kinematics.DifferentialDriveOdometry"}, {"name": "gyroAngle", "type": "wpimath.geometry._geometry.Rotation2d"}, {"name": "leftDistance", "type": "wpimath.units.meters"}, {"name": "rightDistance", "type": "wpimath.units.meters"}, {"name": "pose", "type": "wpimath.geometry._geometry.Pose2d"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveOdometry", "FUNC": "resetPosition"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveOdometry"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}, "ARG4": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose2d"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Resets the rotation of the pose.\n\n:param rotation: The rotation to reset to.", "returnType": "None", "args": [{"name": "differentialDriveOdometryBase", "type": "wpimath.kinematics._kinematics.DifferentialDriveOdometryBase"}, {"name": "rotation", "type": "wpimath.geometry._geometry.Rotation2d"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveOdometryBase", "FUNC": "resetRotation"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveOdometryBase"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Resets the translation of the pose.\n\n:param translation: The translation to reset to.", "returnType": "None", "args": [{"name": "differentialDriveOdometryBase", "type": "wpimath.kinematics._kinematics.DifferentialDriveOdometryBase"}, {"name": "translation", "type": "wpimath.geometry._geometry.Translation2d"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveOdometryBase", "FUNC": "resetTranslation"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveOdometryBase"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myTranslation2d"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Updates the robot position on the field using distance measurements from\nencoders. This method is more numerically accurate than using velocities to\nintegrate the pose and is also advantageous for teams that are using lower\nCPR encoders.\n\n:param gyroAngle:     The angle reported by the gyroscope.\n:param leftDistance:  The distance traveled by the left encoder.\n:param rightDistance: The distance traveled by the right encoder.\n\n:returns: The new pose of the robot.", "returnType": "wpimath.geometry._geometry.Pose2d", "args": [{"name": "differentialDriveOdometry", "type": "wpimath.kinematics._kinematics.DifferentialDriveOdometry"}, {"name": "gyroAngle", "type": "wpimath.geometry._geometry.Rotation2d"}, {"name": "leftDistance", "type": "wpimath.units.meters"}, {"name": "rightDistance", "type": "wpimath.units.meters"}], "importModule": ""}, "fields": {"CLASS": "wpimath.kinematics.DifferentialDriveOdometry", "FUNC": "update"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDriveOdometry"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myRotation2d"}}}}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
