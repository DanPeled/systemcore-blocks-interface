// This file was generated. Do not edit!

import * as python from "../python.js"

// Blocks for class wpimath.controller.ElevatorFeedforward

python.PythonVariableGetterNames["instance wpimath.controller.ElevatorFeedforward wpimath.units.volt_seconds_squared_per_meter"] = ["kA"];
python.PythonVariableGetterTooltips["instance wpimath.controller.ElevatorFeedforward wpimath.units.volt_seconds_squared_per_meter"] = ["The acceleration gain."];
python.PythonVariableGetterNames["instance wpimath.controller.ElevatorFeedforward wpimath.units.volts"] = ["kG", "kS"];
python.PythonVariableGetterTooltips["instance wpimath.controller.ElevatorFeedforward wpimath.units.volts"] = ["The gravity gain.", "The static gain."];
python.PythonVariableGetterNames["instance wpimath.controller.ElevatorFeedforward wpimath.units.volt_seconds_per_meter"] = ["kV"];
python.PythonVariableGetterTooltips["instance wpimath.controller.ElevatorFeedforward wpimath.units.volt_seconds_per_meter"] = ["The velocity gain."];


export function getToolboxCategory(subcategories) {
  const category = {
    kind: "category",
    name: "ElevatorFeedforward",
    contents: [
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.volt_seconds_squared_per_meter", "key": "instance wpimath.controller.ElevatorFeedforward wpimath.units.volt_seconds_squared_per_meter", "importModule": "", "selfLabel": "elevatorFeedforward", "selfType": "wpimath.controller.ElevatorFeedforward"}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "VAR": "kA"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.volts", "key": "instance wpimath.controller.ElevatorFeedforward wpimath.units.volts", "importModule": "", "selfLabel": "elevatorFeedforward", "selfType": "wpimath.controller.ElevatorFeedforward"}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "VAR": "kG"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.volts", "key": "instance wpimath.controller.ElevatorFeedforward wpimath.units.volts", "importModule": "", "selfLabel": "elevatorFeedforward", "selfType": "wpimath.controller.ElevatorFeedforward"}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "VAR": "kS"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
      {"kind": "block", "type": "get_python_instance_variable", "extraState": {"varType": "wpimath.units.volt_seconds_per_meter", "key": "instance wpimath.controller.ElevatorFeedforward wpimath.units.volt_seconds_per_meter", "importModule": "", "selfLabel": "elevatorFeedforward", "selfType": "wpimath.controller.ElevatorFeedforward"}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "VAR": "kV"}, "inputs": {"SELF": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myElevatorFeedforward"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Creates a new ElevatorFeedforward with the specified gains.\n\n:param kS: The static gain, in volts.\n:param kG: The gravity gain, in volts.\n:param kV: The velocity gain, in volt seconds per distance.\n:param kA: The acceleration gain, in volt seconds\u00b2 per distance.", "returnType": "wpimath._controls._controls.controller.ElevatorFeedforward", "args": [{"name": "kS", "type": "wpimath.units.volts"}, {"name": "kG", "type": "wpimath.units.volts"}, {"name": "kV", "type": "wpimath.units.volt_seconds_per_meter"}, {"name": "kA", "type": "wpimath.units.volt_seconds_squared_per_meter"}], "importModule": "wpimath.controller"}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward"}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the feedforward from the gains and setpoints.\n\n:param velocity:     The velocity setpoint, in distance per second.\n:param acceleration: The acceleration setpoint, in distance per second\u00b2.\n\n:returns: The computed feedforward, in volts.", "returnType": "wpimath.units.volts", "args": [{"name": "elevatorFeedforward", "type": "wpimath._controls._controls.controller.ElevatorFeedforward"}, {"name": "velocity", "type": "wpimath.units.meters_per_second"}, {"name": "acceleration", "type": "wpimath.units.meters_per_second_squared"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the feedforward from the gains and setpoints.\n\n:param currentVelocity: The current velocity setpoint, in distance per\n                        second.\n:param nextVelocity:    The next velocity setpoint, in distance per second.\n:param dt:              Time between velocity setpoints in seconds.\n\n:returns: The computed feedforward, in volts.", "returnType": "wpimath.units.volts", "args": [{"name": "elevatorFeedforward", "type": "wpimath._controls._controls.controller.ElevatorFeedforward"}, {"name": "currentVelocity", "type": "wpimath.units.meters_per_second"}, {"name": "nextVelocity", "type": "wpimath.units.meters_per_second"}, {"name": "dt", "type": "wpimath.units.seconds"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "FUNC": "calculate"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the maximum achievable acceleration given a maximum voltage\nsupply and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the elevator.\n:param velocity:   The velocity of the elevator.\n\n:returns: The maximum possible acceleration at the given velocity.", "returnType": "wpimath.units.meters_per_second_squared", "args": [{"name": "elevatorFeedforward", "type": "wpimath._controls._controls.controller.ElevatorFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "velocity", "type": "wpimath.units.meters_per_second"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "FUNC": "maxAchievableAcceleration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the maximum achievable velocity given a maximum voltage supply\nand an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the elevator.\n:param acceleration: The acceleration of the elevator.\n\n:returns: The maximum possible velocity at the given acceleration.", "returnType": "wpimath.units.meters_per_second", "args": [{"name": "elevatorFeedforward", "type": "wpimath._controls._controls.controller.ElevatorFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "acceleration", "type": "wpimath.units.meters_per_second_squared"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "FUNC": "maxAchievableVelocity"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the minimum achievable acceleration given a maximum voltage\nsupply and a velocity. Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the velocity constraint, and this will give you\na simultaneously-achievable acceleration constraint.\n\n:param maxVoltage: The maximum voltage that can be supplied to the elevator.\n:param velocity:   The velocity of the elevator.\n\n:returns: The minimum possible acceleration at the given velocity.", "returnType": "wpimath.units.meters_per_second_squared", "args": [{"name": "elevatorFeedforward", "type": "wpimath._controls._controls.controller.ElevatorFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "velocity", "type": "wpimath.units.meters_per_second"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "FUNC": "minAchievableAcceleration"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Calculates the minimum achievable velocity given a maximum voltage supply\nand an acceleration.  Useful for ensuring that velocity and\nacceleration constraints for a trapezoidal profile are simultaneously\nachievable - enter the acceleration constraint, and this will give you\na simultaneously-achievable velocity constraint.\n\n:param maxVoltage:   The maximum voltage that can be supplied to the elevator.\n:param acceleration: The acceleration of the elevator.\n\n:returns: The minimum possible velocity at the given acceleration.", "returnType": "wpimath.units.meters_per_second", "args": [{"name": "elevatorFeedforward", "type": "wpimath._controls._controls.controller.ElevatorFeedforward"}, {"name": "maxVoltage", "type": "wpimath.units.volts"}, {"name": "acceleration", "type": "wpimath.units.meters_per_second_squared"}], "importModule": ""}, "fields": {"CLASS": "wpimath.controller.ElevatorFeedforward", "FUNC": "minAchievableVelocity"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myElevatorFeedforward"}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
