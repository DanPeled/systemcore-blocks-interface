// This file was generated. Do not edit!

import * as python from "../python.js"

// Blocks for class wpilib.DutyCycleEncoder

export function getToolboxCategory(subcategories) {
  const category = {
    kind: "category",
    name: "DutyCycleEncoder",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Construct a new DutyCycleEncoder on a specific channel.\n\n:param channel: the channel to attach to", "returnType": "wpilib._wpilib.DutyCycleEncoder", "args": [{"name": "channel", "type": "int"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.DutyCycleEncoder"}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Construct a new DutyCycleEncoder attached to an existing DutyCycle object.\n\n:param dutyCycle: the duty cycle to attach to", "returnType": "wpilib._wpilib.DutyCycleEncoder", "args": [{"name": "dutyCycle", "type": "wpilib._wpilib.DutyCycle"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.DutyCycleEncoder"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycle"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Construct a new DutyCycleEncoder attached to a DigitalSource object.\n\n:param digitalSource: the digital source to attach to", "returnType": "wpilib._wpilib.DutyCycleEncoder", "args": [{"name": "digitalSource", "type": "wpilib._wpilib.DigitalSource"}], "importModule": "wpilib"}, "fields": {"CLASS": "wpilib.DutyCycleEncoder"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDigitalSource"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the encoder value since the last reset.\n\nThis is reported in rotations since the last reset.\n\n:returns: the encoder value in rotations", "returnType": "wpimath.units.turns", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "get"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the absolute position of the duty cycle encoder encoder.\n\nGetAbsolutePosition() - GetPositionOffset() will give an encoder\nabsolute position relative to the last reset. This could potentially be\nnegative, which needs to be accounted for.\n\nThis will not account for rollovers, and will always be just the raw\nabsolute position.\n\n:returns: the absolute position", "returnType": "float", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getAbsolutePosition"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the distance the sensor has driven since the last reset as scaled by\nthe value from SetDistancePerRotation.\n\n:returns: The distance driven since the last reset", "returnType": "float", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getDistance"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the distance per rotation for this encoder.\n\n:returns: The scale factor that will be used to convert rotation to useful\n          units.", "returnType": "float", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getDistancePerRotation"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the FPGA index for the DutyCycleEncoder.\n\n:returns: the FPGA index", "returnType": "int", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getFPGAIndex"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the frequency in Hz of the duty cycle signal from the encoder.\n\n:returns: duty cycle frequency in Hz", "returnType": "int", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getFrequency"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the offset of position relative to the last reset.\n\nGetAbsolutePosition() - GetPositionOffset() will give an encoder absolute\nposition relative to the last reset. This could potentially be negative,\nwhich needs to be accounted for.\n\n:returns: the position offset", "returnType": "float", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getPositionOffset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the channel of the source.\n\n:returns: the source channel", "returnType": "int", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "getSourceChannel"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}, {"name": "builder", "type": "wpiutil._wpiutil.SendableBuilder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "initSendable"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "mySendableBuilder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get if the sensor is connected\n\nThis uses the duty cycle frequency to determine if the sensor is connected.\nBy default, a value of 100 Hz is used as the threshold, and this value can\nbe changed with SetConnectedFrequencyThreshold.\n\n:returns: true if the sensor is connected", "returnType": "bool", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "isConnected"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Reset the Encoder distance to zero.", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "reset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Change the frequency threshold for detecting connection used by\nIsConnected.\n\n:param frequency: the minimum frequency in Hz.", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}, {"name": "frequency", "type": "int"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "setConnectedFrequencyThreshold"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the distance per rotation of the encoder. This sets the multiplier used\nto determine the distance driven based on the rotation value from the\nencoder. Set this value based on the how far the mechanism travels in 1\nrotation of the encoder, and factor in gearing reductions following the\nencoder shaft. This distance can be in any units you like, linear or\nangular.\n\n:param distancePerRotation: the distance per rotation of the encoder", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}, {"name": "distancePerRotation", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "setDistancePerRotation"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the encoder duty cycle range. As the encoder needs to maintain a duty\ncycle, the duty cycle cannot go all the way to 0% or all the way to 100%.\nFor example, an encoder with a 4096 us period might have a minimum duty\ncycle of 1 us / 4096 us and a maximum duty cycle of 4095 / 4096 us. Setting\nthe range will result in an encoder duty cycle less than or equal to the\nminimum being output as 0 rotation, the duty cycle greater than or equal to\nthe maximum being output as 1 rotation, and values in between linearly\nscaled from 0 to 1.\n\n:param min: minimum duty cycle (0-1 range)\n:param max: maximum duty cycle (0-1 range)", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}, {"name": "min", "type": "float"}, {"name": "max", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "setDutyCycleRange"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Set the position offset.\n\nThis must be in the range of 0-1.\n\n:param offset: the offset", "returnType": "None", "args": [{"name": "dutyCycleEncoder", "type": "wpilib._wpilib.DutyCycleEncoder"}, {"name": "offset", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.DutyCycleEncoder", "FUNC": "setPositionOffset"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDutyCycleEncoder"}}}}}},
    ],
  };
  if (subcategories) {
    category.contents.push(...subcategories);
  }
  return category;
}
