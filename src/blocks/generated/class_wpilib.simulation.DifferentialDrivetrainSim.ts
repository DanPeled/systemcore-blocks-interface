// This file was generated. Do not edit!

import {Category} from "../../toolbox/items";

// Blocks for class wpilib.simulation.DifferentialDrivetrainSim

export function initialize() {
}

export function getToolboxCategory(subcategories: Category[] = []): Category {
  const category: Category = {
    kind: "category",
    name: "DifferentialDrivetrainSim",
    contents: [
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Creates a simulated differential drivetrain.\n\n:param plant:              The LinearSystem representing the robot's drivetrain. This\n                           system can be created with\n                           LinearSystemId::DrivetrainVelocitySystem() or\n                           LinearSystemId::IdentifyDrivetrainSystem().\n:param trackWidth:         The robot's track width.\n:param driveMotor:         A DCMotor representing the left side of the drivetrain.\n:param gearingRatio:       The gearingRatio ratio of the left side, as output over\n                           input. This must be the same ratio as the ratio used to\n                           identify or create the plant.\n:param wheelRadius:        The radius of the wheels on the drivetrain, in meters.\n:param measurementStdDevs: Standard deviations for measurements, in the form\n                           [x, y, heading, left velocity, right velocity,\n                           left distance, right distance]\u1d40. Can be omitted\n                           if no noise is desired. Gyro standard deviations\n                           of 0.0001 radians, velocity standard deviations\n                           of 0.05 m/s, and position measurement standard\n                           deviations of 0.005 meters are a reasonable\n                           starting point.", "returnType": "wpilib.simulation._simulation.DifferentialDrivetrainSim", "args": [{"name": "plant", "type": "wpimath._controls._controls.system.LinearSystem_2_2_2"}, {"name": "trackWidth", "type": "wpimath.units.meters"}, {"name": "driveMotor", "type": "wpimath._controls._controls.plant.DCMotor"}, {"name": "gearingRatio", "type": "float"}, {"name": "wheelRadius", "type": "wpimath.units.meters"}, {"name": "measurementStdDevs", "type": "Annotated[list[float], FixedSize(7)]"}], "importModule": "wpilib.simulation"}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myLinearSystem_2_2_2"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDCMotor"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_constructor", "extraState": {"tooltip": "Creates a simulated differential drivetrain.\n\n:param driveMotor:         A DCMotor representing the left side of the drivetrain.\n:param gearing:            The gearing on the drive between motor and wheel, as\n                           output over input. This must be the same ratio as the\n                           ratio used to identify or create the plant.\n:param J:                  The moment of inertia of the drivetrain about its\n                           center.\n:param mass:               The mass of the drivebase.\n:param wheelRadius:        The radius of the wheels on the drivetrain.\n:param trackWidth:         The robot's track width, or distance between left and\n                           right wheels.\n:param measurementStdDevs: Standard deviations for measurements, in the form\n                           [x, y, heading, left velocity, right velocity,\n                           left distance, right distance]\u1d40. Can be omitted\n                           if no noise is desired. Gyro standard deviations\n                           of 0.0001 radians, velocity standard deviations\n                           of 0.05 m/s, and position measurement standard\n                           deviations of 0.005 meters are a reasonable\n                           starting point.", "returnType": "wpilib.simulation._simulation.DifferentialDrivetrainSim", "args": [{"name": "driveMotor", "type": "wpimath._controls._controls.plant.DCMotor"}, {"name": "gearing", "type": "float"}, {"name": "J", "type": "wpimath.units.kilogram_square_meters"}, {"name": "mass", "type": "wpimath.units.kilograms"}, {"name": "wheelRadius", "type": "wpimath.units.meters"}, {"name": "trackWidth", "type": "wpimath.units.meters"}, {"name": "measurementStdDevs", "type": "Annotated[list[float], FixedSize(7)]"}], "importModule": "wpilib.simulation"}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDCMotor"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Clamp the input vector such that no element exceeds the battery voltage.\nIf any does, the relative magnitudes of the input will be maintained.\n\n:param u: The input vector.\n\n:returns: The normalized input.", "returnType": "numpy.ndarray[numpy.float64[2, 1]]", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}, {"name": "u", "type": "numpy.ndarray[numpy.float64[2, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "clampInput"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Create a sim for the standard FRC kitbot.\n\n:param motor:              The motors installed in the bot.\n:param gearing:            The gearing reduction used.\n:param wheelSize:          The wheel size.\n:param measurementStdDevs: Standard deviations for measurements, in the form\n                           [x, y, heading, left velocity, right velocity, left distance, right\n                           distance]\u1d40. Can be omitted if no noise is desired. Gyro standard\n                           deviations of 0.0001 radians, velocity standard deviations of 0.05 m/s, and\n                           position measurement standard deviations of 0.005 meters are a reasonable\n                           starting point.", "returnType": "wpilib.simulation._simulation.DifferentialDrivetrainSim", "args": [{"name": "motor", "type": "wpimath._controls._controls.plant.DCMotor"}, {"name": "gearing", "type": "float"}, {"name": "wheelSize", "type": "wpimath.units.meters"}, {"name": "measurementStdDevs", "type": "Annotated[list[float], FixedSize(7)]"}], "importModule": "wpilib.simulation"}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "createKitbotSim"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDCMotor"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_static_method", "extraState": {"tooltip": "Create a sim for the standard FRC kitbot.\n\n:param motor:              The motors installed in the bot.\n:param gearing:            The gearing reduction used.\n:param wheelSize:          The wheel size.\n:param J:                  The moment of inertia of the drivebase. This can be\n                           calculated using SysId.\n:param measurementStdDevs: Standard deviations for measurements, in the form\n                           [x, y, heading, left velocity, right velocity, left distance, right\n                           distance]\u1d40. Can be omitted if no noise is desired. Gyro standard\n                           deviations of 0.0001 radians, velocity standard deviations of 0.05 m/s, and\n                           position measurement standard deviations of 0.005 meters are a reasonable\n                           starting point.", "returnType": "wpilib.simulation._simulation.DifferentialDrivetrainSim", "args": [{"name": "motor", "type": "wpimath._controls._controls.plant.DCMotor"}, {"name": "gearing", "type": "float"}, {"name": "wheelSize", "type": "wpimath.units.meters"}, {"name": "J", "type": "wpimath.units.kilogram_square_meters"}, {"name": "measurementStdDevs", "type": "Annotated[list[float], FixedSize(7)]"}], "importModule": "wpilib.simulation"}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "createKitbotSim"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDCMotor"}}}}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myfloat64[7, 1]]"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "The differential drive dynamics function.\n\n:param x: The state.\n:param u: The input.\n\n:returns: The state derivative with respect to time.", "returnType": "numpy.ndarray[numpy.float64[7, 1]]", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}, {"name": "x", "type": "numpy.ndarray[numpy.float64[7, 1]]"}, {"name": "u", "type": "numpy.ndarray[numpy.float64[2, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "dynamics"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[7, 1]]"}}}}, "ARG2": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[2, 1]]"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the currently drawn current.", "returnType": "wpimath.units.amperes", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getCurrentDraw"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the current gearing reduction of the drivetrain, as output over\ninput.", "returnType": "float", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getGearing"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myRotation2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the direction the robot is pointing.\n\nNote that this angle is counterclockwise-positive, while most gyros are\nclockwise positive.", "returnType": "wpimath.geometry._geometry.Rotation2d", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getHeading"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the currently drawn current for the left side.", "returnType": "wpimath.units.amperes", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getLeftCurrentDraw"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the left encoder position in meters.\n\n:returns: The encoder position.", "returnType": "wpimath.units.meters", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getLeftPosition"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "wpimath.units.feet", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getLeftPositionFeet"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "wpimath.units.inches", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getLeftPositionInches"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the left encoder velocity in meters per second.\n\n:returns: The encoder velocity.", "returnType": "wpimath.units.meters_per_second", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getLeftVelocity"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "wpimath.units.feet_per_second", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getLeftVelocityFps"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "variables_set", "fields": {"VAR": {"name": "myPose2d"}}, "inputs": {"VALUE": {"block": {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the current pose.", "returnType": "wpimath.geometry._geometry.Pose2d", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getPose"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Returns the currently drawn current for the right side.", "returnType": "wpimath.units.amperes", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getRightCurrentDraw"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the right encoder position in meters.\n\n:returns: The encoder position.", "returnType": "wpimath.units.meters", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getRightPosition"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "wpimath.units.feet", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getRightPositionFeet"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "wpimath.units.inches", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getRightPositionInches"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Get the right encoder velocity in meters per second.\n\n:returns: The encoder velocity.", "returnType": "wpimath.units.meters_per_second", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getRightVelocity"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "", "returnType": "wpimath.units.feet_per_second", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "getRightVelocityFps"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Sets the gearing reduction on the drivetrain. This is commonly used for\nshifting drivetrains.\n\n:param newGearing: The new gear ratio, as output over input.", "returnType": "None", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}, {"name": "newGearing", "type": "float"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "setGearing"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Sets the applied voltage to the drivetrain. Note that positive voltage must\nmake that side of the drivetrain travel forward (+X).\n\n:param leftVoltage:  The left voltage.\n:param rightVoltage: The right voltage.", "returnType": "None", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}, {"name": "leftVoltage", "type": "wpimath.units.volts"}, {"name": "rightVoltage", "type": "wpimath.units.volts"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "setInputs"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Sets the system pose.\n\n:param pose: The pose.", "returnType": "None", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}, {"name": "pose", "type": "wpimath.geometry._geometry.Pose2d"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "setPose"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myPose2d"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Sets the system state.\n\n:param state: The state.", "returnType": "None", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}, {"name": "state", "type": "numpy.ndarray[numpy.float64[7, 1]]"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "setState"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}, "ARG1": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myfloat64[7, 1]]"}}}}}},
      {"kind": "block", "type": "call_python_instance_method", "extraState": {"tooltip": "Updates the simulation.\n\n:param dt: The time that's passed since the last Update(units::second_t)\n           call.", "returnType": "None", "args": [{"name": "differentialDrivetrainSim", "type": "wpilib.simulation._simulation.DifferentialDrivetrainSim"}, {"name": "dt", "type": "wpimath.units.seconds"}], "importModule": ""}, "fields": {"CLASS": "wpilib.simulation.DifferentialDrivetrainSim", "FUNC": "update"}, "inputs": {"ARG0": {"block": {"type": "variables_get", "fields": {"VAR": {"name": "myDifferentialDrivetrainSim"}}}}}},
    ],
  };
  category.contents.push(...subcategories);
  return category;
}
